/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("protobufjs/minimal"));

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots["@cosmos-client/bandprotocol"] || ($protobuf.roots["@cosmos-client/bandprotocol"] = {});
    
    $root.oracle = (function() {
    
        /**
         * Namespace oracle.
         * @exports oracle
         * @namespace
         */
        var oracle = {};
    
        oracle.v1 = (function() {
    
            /**
             * Namespace v1.
             * @memberof oracle
             * @namespace
             */
            var v1 = {};
    
            v1.DataSource = (function() {
    
                /**
                 * Properties of a DataSource.
                 * @memberof oracle.v1
                 * @interface IDataSource
                 * @property {string|null} [owner] DataSource owner
                 * @property {string|null} [name] DataSource name
                 * @property {string|null} [description] DataSource description
                 * @property {string|null} [filename] DataSource filename
                 * @property {string|null} [treasury] DataSource treasury
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [fee] DataSource fee
                 */
    
                /**
                 * Constructs a new DataSource.
                 * @memberof oracle.v1
                 * @classdesc Represents a DataSource.
                 * @implements IDataSource
                 * @constructor
                 * @param {oracle.v1.IDataSource=} [properties] Properties to set
                 */
                function DataSource(properties) {
                    this.fee = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DataSource owner.
                 * @member {string} owner
                 * @memberof oracle.v1.DataSource
                 * @instance
                 */
                DataSource.prototype.owner = "";
    
                /**
                 * DataSource name.
                 * @member {string} name
                 * @memberof oracle.v1.DataSource
                 * @instance
                 */
                DataSource.prototype.name = "";
    
                /**
                 * DataSource description.
                 * @member {string} description
                 * @memberof oracle.v1.DataSource
                 * @instance
                 */
                DataSource.prototype.description = "";
    
                /**
                 * DataSource filename.
                 * @member {string} filename
                 * @memberof oracle.v1.DataSource
                 * @instance
                 */
                DataSource.prototype.filename = "";
    
                /**
                 * DataSource treasury.
                 * @member {string} treasury
                 * @memberof oracle.v1.DataSource
                 * @instance
                 */
                DataSource.prototype.treasury = "";
    
                /**
                 * DataSource fee.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} fee
                 * @memberof oracle.v1.DataSource
                 * @instance
                 */
                DataSource.prototype.fee = $util.emptyArray;
    
                /**
                 * Encodes the specified DataSource message. Does not implicitly {@link oracle.v1.DataSource.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.DataSource
                 * @static
                 * @param {oracle.v1.IDataSource} message DataSource message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DataSource.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.owner);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                    if (message.filename != null && Object.hasOwnProperty.call(message, "filename"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.filename);
                    if (message.treasury != null && Object.hasOwnProperty.call(message, "treasury"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.treasury);
                    if (message.fee != null && message.fee.length)
                        for (var i = 0; i < message.fee.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.fee[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified DataSource message, length delimited. Does not implicitly {@link oracle.v1.DataSource.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.DataSource
                 * @static
                 * @param {oracle.v1.IDataSource} message DataSource message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DataSource.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DataSource message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.DataSource
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.DataSource} DataSource
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DataSource.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.DataSource();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.owner = reader.string();
                            break;
                        case 2:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.description = reader.string();
                            break;
                        case 4:
                            message.filename = reader.string();
                            break;
                        case 5:
                            message.treasury = reader.string();
                            break;
                        case 6:
                            if (!(message.fee && message.fee.length))
                                message.fee = [];
                            message.fee.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DataSource message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.DataSource
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.DataSource} DataSource
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DataSource.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DataSource message.
                 * @function verify
                 * @memberof oracle.v1.DataSource
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DataSource.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.owner != null && message.hasOwnProperty("owner"))
                        if (!$util.isString(message.owner))
                            return "owner: string expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.filename != null && message.hasOwnProperty("filename"))
                        if (!$util.isString(message.filename))
                            return "filename: string expected";
                    if (message.treasury != null && message.hasOwnProperty("treasury"))
                        if (!$util.isString(message.treasury))
                            return "treasury: string expected";
                    if (message.fee != null && message.hasOwnProperty("fee")) {
                        if (!Array.isArray(message.fee))
                            return "fee: array expected";
                        for (var i = 0; i < message.fee.length; ++i) {
                            var error = $root.cosmos.base.v1beta1.Coin.verify(message.fee[i]);
                            if (error)
                                return "fee." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a DataSource message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.DataSource
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.DataSource} DataSource
                 */
                DataSource.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.DataSource)
                        return object;
                    var message = new $root.oracle.v1.DataSource();
                    if (object.owner != null)
                        message.owner = String(object.owner);
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.filename != null)
                        message.filename = String(object.filename);
                    if (object.treasury != null)
                        message.treasury = String(object.treasury);
                    if (object.fee) {
                        if (!Array.isArray(object.fee))
                            throw TypeError(".oracle.v1.DataSource.fee: array expected");
                        message.fee = [];
                        for (var i = 0; i < object.fee.length; ++i) {
                            if (typeof object.fee[i] !== "object")
                                throw TypeError(".oracle.v1.DataSource.fee: object expected");
                            message.fee[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.fee[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DataSource message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.DataSource
                 * @static
                 * @param {oracle.v1.DataSource} message DataSource
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DataSource.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.fee = [];
                    if (options.defaults) {
                        object.owner = "";
                        object.name = "";
                        object.description = "";
                        object.filename = "";
                        object.treasury = "";
                    }
                    if (message.owner != null && message.hasOwnProperty("owner"))
                        object.owner = message.owner;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.filename != null && message.hasOwnProperty("filename"))
                        object.filename = message.filename;
                    if (message.treasury != null && message.hasOwnProperty("treasury"))
                        object.treasury = message.treasury;
                    if (message.fee && message.fee.length) {
                        object.fee = [];
                        for (var j = 0; j < message.fee.length; ++j)
                            object.fee[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.fee[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this DataSource to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.DataSource
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DataSource.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return DataSource;
            })();
    
            v1.OracleScript = (function() {
    
                /**
                 * Properties of an OracleScript.
                 * @memberof oracle.v1
                 * @interface IOracleScript
                 * @property {string|null} [owner] OracleScript owner
                 * @property {string|null} [name] OracleScript name
                 * @property {string|null} [description] OracleScript description
                 * @property {string|null} [filename] OracleScript filename
                 * @property {string|null} [schema] OracleScript schema
                 * @property {string|null} [source_code_url] OracleScript source_code_url
                 */
    
                /**
                 * Constructs a new OracleScript.
                 * @memberof oracle.v1
                 * @classdesc Represents an OracleScript.
                 * @implements IOracleScript
                 * @constructor
                 * @param {oracle.v1.IOracleScript=} [properties] Properties to set
                 */
                function OracleScript(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OracleScript owner.
                 * @member {string} owner
                 * @memberof oracle.v1.OracleScript
                 * @instance
                 */
                OracleScript.prototype.owner = "";
    
                /**
                 * OracleScript name.
                 * @member {string} name
                 * @memberof oracle.v1.OracleScript
                 * @instance
                 */
                OracleScript.prototype.name = "";
    
                /**
                 * OracleScript description.
                 * @member {string} description
                 * @memberof oracle.v1.OracleScript
                 * @instance
                 */
                OracleScript.prototype.description = "";
    
                /**
                 * OracleScript filename.
                 * @member {string} filename
                 * @memberof oracle.v1.OracleScript
                 * @instance
                 */
                OracleScript.prototype.filename = "";
    
                /**
                 * OracleScript schema.
                 * @member {string} schema
                 * @memberof oracle.v1.OracleScript
                 * @instance
                 */
                OracleScript.prototype.schema = "";
    
                /**
                 * OracleScript source_code_url.
                 * @member {string} source_code_url
                 * @memberof oracle.v1.OracleScript
                 * @instance
                 */
                OracleScript.prototype.source_code_url = "";
    
                /**
                 * Encodes the specified OracleScript message. Does not implicitly {@link oracle.v1.OracleScript.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.OracleScript
                 * @static
                 * @param {oracle.v1.IOracleScript} message OracleScript message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OracleScript.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.owner);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                    if (message.filename != null && Object.hasOwnProperty.call(message, "filename"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.filename);
                    if (message.schema != null && Object.hasOwnProperty.call(message, "schema"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.schema);
                    if (message.source_code_url != null && Object.hasOwnProperty.call(message, "source_code_url"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.source_code_url);
                    return writer;
                };
    
                /**
                 * Encodes the specified OracleScript message, length delimited. Does not implicitly {@link oracle.v1.OracleScript.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.OracleScript
                 * @static
                 * @param {oracle.v1.IOracleScript} message OracleScript message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OracleScript.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OracleScript message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.OracleScript
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.OracleScript} OracleScript
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OracleScript.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.OracleScript();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.owner = reader.string();
                            break;
                        case 2:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.description = reader.string();
                            break;
                        case 4:
                            message.filename = reader.string();
                            break;
                        case 5:
                            message.schema = reader.string();
                            break;
                        case 6:
                            message.source_code_url = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OracleScript message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.OracleScript
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.OracleScript} OracleScript
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OracleScript.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OracleScript message.
                 * @function verify
                 * @memberof oracle.v1.OracleScript
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OracleScript.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.owner != null && message.hasOwnProperty("owner"))
                        if (!$util.isString(message.owner))
                            return "owner: string expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.filename != null && message.hasOwnProperty("filename"))
                        if (!$util.isString(message.filename))
                            return "filename: string expected";
                    if (message.schema != null && message.hasOwnProperty("schema"))
                        if (!$util.isString(message.schema))
                            return "schema: string expected";
                    if (message.source_code_url != null && message.hasOwnProperty("source_code_url"))
                        if (!$util.isString(message.source_code_url))
                            return "source_code_url: string expected";
                    return null;
                };
    
                /**
                 * Creates an OracleScript message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.OracleScript
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.OracleScript} OracleScript
                 */
                OracleScript.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.OracleScript)
                        return object;
                    var message = new $root.oracle.v1.OracleScript();
                    if (object.owner != null)
                        message.owner = String(object.owner);
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.filename != null)
                        message.filename = String(object.filename);
                    if (object.schema != null)
                        message.schema = String(object.schema);
                    if (object.source_code_url != null)
                        message.source_code_url = String(object.source_code_url);
                    return message;
                };
    
                /**
                 * Creates a plain object from an OracleScript message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.OracleScript
                 * @static
                 * @param {oracle.v1.OracleScript} message OracleScript
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OracleScript.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.owner = "";
                        object.name = "";
                        object.description = "";
                        object.filename = "";
                        object.schema = "";
                        object.source_code_url = "";
                    }
                    if (message.owner != null && message.hasOwnProperty("owner"))
                        object.owner = message.owner;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.filename != null && message.hasOwnProperty("filename"))
                        object.filename = message.filename;
                    if (message.schema != null && message.hasOwnProperty("schema"))
                        object.schema = message.schema;
                    if (message.source_code_url != null && message.hasOwnProperty("source_code_url"))
                        object.source_code_url = message.source_code_url;
                    return object;
                };
    
                /**
                 * Converts this OracleScript to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.OracleScript
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OracleScript.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OracleScript;
            })();
    
            v1.RawRequest = (function() {
    
                /**
                 * Properties of a RawRequest.
                 * @memberof oracle.v1
                 * @interface IRawRequest
                 * @property {Long|null} [external_id] RawRequest external_id
                 * @property {Long|null} [data_source_id] RawRequest data_source_id
                 * @property {Uint8Array|null} [calldata] RawRequest calldata
                 */
    
                /**
                 * Constructs a new RawRequest.
                 * @memberof oracle.v1
                 * @classdesc Represents a RawRequest.
                 * @implements IRawRequest
                 * @constructor
                 * @param {oracle.v1.IRawRequest=} [properties] Properties to set
                 */
                function RawRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RawRequest external_id.
                 * @member {Long} external_id
                 * @memberof oracle.v1.RawRequest
                 * @instance
                 */
                RawRequest.prototype.external_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * RawRequest data_source_id.
                 * @member {Long} data_source_id
                 * @memberof oracle.v1.RawRequest
                 * @instance
                 */
                RawRequest.prototype.data_source_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * RawRequest calldata.
                 * @member {Uint8Array} calldata
                 * @memberof oracle.v1.RawRequest
                 * @instance
                 */
                RawRequest.prototype.calldata = $util.newBuffer([]);
    
                /**
                 * Encodes the specified RawRequest message. Does not implicitly {@link oracle.v1.RawRequest.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.RawRequest
                 * @static
                 * @param {oracle.v1.IRawRequest} message RawRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RawRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.external_id != null && Object.hasOwnProperty.call(message, "external_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.external_id);
                    if (message.data_source_id != null && Object.hasOwnProperty.call(message, "data_source_id"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.data_source_id);
                    if (message.calldata != null && Object.hasOwnProperty.call(message, "calldata"))
                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.calldata);
                    return writer;
                };
    
                /**
                 * Encodes the specified RawRequest message, length delimited. Does not implicitly {@link oracle.v1.RawRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.RawRequest
                 * @static
                 * @param {oracle.v1.IRawRequest} message RawRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RawRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RawRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.RawRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.RawRequest} RawRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RawRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.RawRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.external_id = reader.uint64();
                            break;
                        case 2:
                            message.data_source_id = reader.uint64();
                            break;
                        case 3:
                            message.calldata = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RawRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.RawRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.RawRequest} RawRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RawRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RawRequest message.
                 * @function verify
                 * @memberof oracle.v1.RawRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RawRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.external_id != null && message.hasOwnProperty("external_id"))
                        if (!$util.isInteger(message.external_id) && !(message.external_id && $util.isInteger(message.external_id.low) && $util.isInteger(message.external_id.high)))
                            return "external_id: integer|Long expected";
                    if (message.data_source_id != null && message.hasOwnProperty("data_source_id"))
                        if (!$util.isInteger(message.data_source_id) && !(message.data_source_id && $util.isInteger(message.data_source_id.low) && $util.isInteger(message.data_source_id.high)))
                            return "data_source_id: integer|Long expected";
                    if (message.calldata != null && message.hasOwnProperty("calldata"))
                        if (!(message.calldata && typeof message.calldata.length === "number" || $util.isString(message.calldata)))
                            return "calldata: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a RawRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.RawRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.RawRequest} RawRequest
                 */
                RawRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.RawRequest)
                        return object;
                    var message = new $root.oracle.v1.RawRequest();
                    if (object.external_id != null)
                        if ($util.Long)
                            (message.external_id = $util.Long.fromValue(object.external_id)).unsigned = true;
                        else if (typeof object.external_id === "string")
                            message.external_id = parseInt(object.external_id, 10);
                        else if (typeof object.external_id === "number")
                            message.external_id = object.external_id;
                        else if (typeof object.external_id === "object")
                            message.external_id = new $util.LongBits(object.external_id.low >>> 0, object.external_id.high >>> 0).toNumber(true);
                    if (object.data_source_id != null)
                        if ($util.Long)
                            (message.data_source_id = $util.Long.fromValue(object.data_source_id)).unsigned = true;
                        else if (typeof object.data_source_id === "string")
                            message.data_source_id = parseInt(object.data_source_id, 10);
                        else if (typeof object.data_source_id === "number")
                            message.data_source_id = object.data_source_id;
                        else if (typeof object.data_source_id === "object")
                            message.data_source_id = new $util.LongBits(object.data_source_id.low >>> 0, object.data_source_id.high >>> 0).toNumber(true);
                    if (object.calldata != null)
                        if (typeof object.calldata === "string")
                            $util.base64.decode(object.calldata, message.calldata = $util.newBuffer($util.base64.length(object.calldata)), 0);
                        else if (object.calldata.length)
                            message.calldata = object.calldata;
                    return message;
                };
    
                /**
                 * Creates a plain object from a RawRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.RawRequest
                 * @static
                 * @param {oracle.v1.RawRequest} message RawRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RawRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.external_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.external_id = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.data_source_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.data_source_id = options.longs === String ? "0" : 0;
                        if (options.bytes === String)
                            object.calldata = "";
                        else {
                            object.calldata = [];
                            if (options.bytes !== Array)
                                object.calldata = $util.newBuffer(object.calldata);
                        }
                    }
                    if (message.external_id != null && message.hasOwnProperty("external_id"))
                        if (typeof message.external_id === "number")
                            object.external_id = options.longs === String ? String(message.external_id) : message.external_id;
                        else
                            object.external_id = options.longs === String ? $util.Long.prototype.toString.call(message.external_id) : options.longs === Number ? new $util.LongBits(message.external_id.low >>> 0, message.external_id.high >>> 0).toNumber(true) : message.external_id;
                    if (message.data_source_id != null && message.hasOwnProperty("data_source_id"))
                        if (typeof message.data_source_id === "number")
                            object.data_source_id = options.longs === String ? String(message.data_source_id) : message.data_source_id;
                        else
                            object.data_source_id = options.longs === String ? $util.Long.prototype.toString.call(message.data_source_id) : options.longs === Number ? new $util.LongBits(message.data_source_id.low >>> 0, message.data_source_id.high >>> 0).toNumber(true) : message.data_source_id;
                    if (message.calldata != null && message.hasOwnProperty("calldata"))
                        object.calldata = options.bytes === String ? $util.base64.encode(message.calldata, 0, message.calldata.length) : options.bytes === Array ? Array.prototype.slice.call(message.calldata) : message.calldata;
                    return object;
                };
    
                /**
                 * Converts this RawRequest to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.RawRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RawRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RawRequest;
            })();
    
            v1.RawReport = (function() {
    
                /**
                 * Properties of a RawReport.
                 * @memberof oracle.v1
                 * @interface IRawReport
                 * @property {Long|null} [external_id] RawReport external_id
                 * @property {number|null} [exit_code] RawReport exit_code
                 * @property {Uint8Array|null} [data] RawReport data
                 */
    
                /**
                 * Constructs a new RawReport.
                 * @memberof oracle.v1
                 * @classdesc Represents a RawReport.
                 * @implements IRawReport
                 * @constructor
                 * @param {oracle.v1.IRawReport=} [properties] Properties to set
                 */
                function RawReport(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RawReport external_id.
                 * @member {Long} external_id
                 * @memberof oracle.v1.RawReport
                 * @instance
                 */
                RawReport.prototype.external_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * RawReport exit_code.
                 * @member {number} exit_code
                 * @memberof oracle.v1.RawReport
                 * @instance
                 */
                RawReport.prototype.exit_code = 0;
    
                /**
                 * RawReport data.
                 * @member {Uint8Array} data
                 * @memberof oracle.v1.RawReport
                 * @instance
                 */
                RawReport.prototype.data = $util.newBuffer([]);
    
                /**
                 * Encodes the specified RawReport message. Does not implicitly {@link oracle.v1.RawReport.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.RawReport
                 * @static
                 * @param {oracle.v1.IRawReport} message RawReport message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RawReport.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.external_id != null && Object.hasOwnProperty.call(message, "external_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.external_id);
                    if (message.exit_code != null && Object.hasOwnProperty.call(message, "exit_code"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.exit_code);
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
                    return writer;
                };
    
                /**
                 * Encodes the specified RawReport message, length delimited. Does not implicitly {@link oracle.v1.RawReport.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.RawReport
                 * @static
                 * @param {oracle.v1.IRawReport} message RawReport message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RawReport.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RawReport message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.RawReport
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.RawReport} RawReport
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RawReport.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.RawReport();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.external_id = reader.uint64();
                            break;
                        case 2:
                            message.exit_code = reader.uint32();
                            break;
                        case 3:
                            message.data = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RawReport message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.RawReport
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.RawReport} RawReport
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RawReport.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RawReport message.
                 * @function verify
                 * @memberof oracle.v1.RawReport
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RawReport.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.external_id != null && message.hasOwnProperty("external_id"))
                        if (!$util.isInteger(message.external_id) && !(message.external_id && $util.isInteger(message.external_id.low) && $util.isInteger(message.external_id.high)))
                            return "external_id: integer|Long expected";
                    if (message.exit_code != null && message.hasOwnProperty("exit_code"))
                        if (!$util.isInteger(message.exit_code))
                            return "exit_code: integer expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a RawReport message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.RawReport
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.RawReport} RawReport
                 */
                RawReport.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.RawReport)
                        return object;
                    var message = new $root.oracle.v1.RawReport();
                    if (object.external_id != null)
                        if ($util.Long)
                            (message.external_id = $util.Long.fromValue(object.external_id)).unsigned = true;
                        else if (typeof object.external_id === "string")
                            message.external_id = parseInt(object.external_id, 10);
                        else if (typeof object.external_id === "number")
                            message.external_id = object.external_id;
                        else if (typeof object.external_id === "object")
                            message.external_id = new $util.LongBits(object.external_id.low >>> 0, object.external_id.high >>> 0).toNumber(true);
                    if (object.exit_code != null)
                        message.exit_code = object.exit_code >>> 0;
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    return message;
                };
    
                /**
                 * Creates a plain object from a RawReport message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.RawReport
                 * @static
                 * @param {oracle.v1.RawReport} message RawReport
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RawReport.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.external_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.external_id = options.longs === String ? "0" : 0;
                        object.exit_code = 0;
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                    }
                    if (message.external_id != null && message.hasOwnProperty("external_id"))
                        if (typeof message.external_id === "number")
                            object.external_id = options.longs === String ? String(message.external_id) : message.external_id;
                        else
                            object.external_id = options.longs === String ? $util.Long.prototype.toString.call(message.external_id) : options.longs === Number ? new $util.LongBits(message.external_id.low >>> 0, message.external_id.high >>> 0).toNumber(true) : message.external_id;
                    if (message.exit_code != null && message.hasOwnProperty("exit_code"))
                        object.exit_code = message.exit_code;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    return object;
                };
    
                /**
                 * Converts this RawReport to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.RawReport
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RawReport.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RawReport;
            })();
    
            v1.Request = (function() {
    
                /**
                 * Properties of a Request.
                 * @memberof oracle.v1
                 * @interface IRequest
                 * @property {Long|null} [oracle_script_id] Request oracle_script_id
                 * @property {Uint8Array|null} [calldata] Request calldata
                 * @property {Array.<string>|null} [requested_validators] Request requested_validators
                 * @property {Long|null} [min_count] Request min_count
                 * @property {Long|null} [request_height] Request request_height
                 * @property {Long|null} [request_time] Request request_time
                 * @property {string|null} [client_id] Request client_id
                 * @property {Array.<oracle.v1.IRawRequest>|null} [raw_requests] Request raw_requests
                 * @property {oracle.v1.IIBCChannel|null} [ibc_channel] Request ibc_channel
                 * @property {Long|null} [execute_gas] Request execute_gas
                 */
    
                /**
                 * Constructs a new Request.
                 * @memberof oracle.v1
                 * @classdesc Represents a Request.
                 * @implements IRequest
                 * @constructor
                 * @param {oracle.v1.IRequest=} [properties] Properties to set
                 */
                function Request(properties) {
                    this.requested_validators = [];
                    this.raw_requests = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Request oracle_script_id.
                 * @member {Long} oracle_script_id
                 * @memberof oracle.v1.Request
                 * @instance
                 */
                Request.prototype.oracle_script_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Request calldata.
                 * @member {Uint8Array} calldata
                 * @memberof oracle.v1.Request
                 * @instance
                 */
                Request.prototype.calldata = $util.newBuffer([]);
    
                /**
                 * Request requested_validators.
                 * @member {Array.<string>} requested_validators
                 * @memberof oracle.v1.Request
                 * @instance
                 */
                Request.prototype.requested_validators = $util.emptyArray;
    
                /**
                 * Request min_count.
                 * @member {Long} min_count
                 * @memberof oracle.v1.Request
                 * @instance
                 */
                Request.prototype.min_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Request request_height.
                 * @member {Long} request_height
                 * @memberof oracle.v1.Request
                 * @instance
                 */
                Request.prototype.request_height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Request request_time.
                 * @member {Long} request_time
                 * @memberof oracle.v1.Request
                 * @instance
                 */
                Request.prototype.request_time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Request client_id.
                 * @member {string} client_id
                 * @memberof oracle.v1.Request
                 * @instance
                 */
                Request.prototype.client_id = "";
    
                /**
                 * Request raw_requests.
                 * @member {Array.<oracle.v1.IRawRequest>} raw_requests
                 * @memberof oracle.v1.Request
                 * @instance
                 */
                Request.prototype.raw_requests = $util.emptyArray;
    
                /**
                 * Request ibc_channel.
                 * @member {oracle.v1.IIBCChannel|null|undefined} ibc_channel
                 * @memberof oracle.v1.Request
                 * @instance
                 */
                Request.prototype.ibc_channel = null;
    
                /**
                 * Request execute_gas.
                 * @member {Long} execute_gas
                 * @memberof oracle.v1.Request
                 * @instance
                 */
                Request.prototype.execute_gas = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified Request message. Does not implicitly {@link oracle.v1.Request.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.Request
                 * @static
                 * @param {oracle.v1.IRequest} message Request message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Request.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.oracle_script_id != null && Object.hasOwnProperty.call(message, "oracle_script_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.oracle_script_id);
                    if (message.calldata != null && Object.hasOwnProperty.call(message, "calldata"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.calldata);
                    if (message.requested_validators != null && message.requested_validators.length)
                        for (var i = 0; i < message.requested_validators.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.requested_validators[i]);
                    if (message.min_count != null && Object.hasOwnProperty.call(message, "min_count"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.min_count);
                    if (message.request_height != null && Object.hasOwnProperty.call(message, "request_height"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.request_height);
                    if (message.request_time != null && Object.hasOwnProperty.call(message, "request_time"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int64(message.request_time);
                    if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.client_id);
                    if (message.raw_requests != null && message.raw_requests.length)
                        for (var i = 0; i < message.raw_requests.length; ++i)
                            $root.oracle.v1.RawRequest.encode(message.raw_requests[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.ibc_channel != null && Object.hasOwnProperty.call(message, "ibc_channel"))
                        $root.oracle.v1.IBCChannel.encode(message.ibc_channel, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.execute_gas != null && Object.hasOwnProperty.call(message, "execute_gas"))
                        writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.execute_gas);
                    return writer;
                };
    
                /**
                 * Encodes the specified Request message, length delimited. Does not implicitly {@link oracle.v1.Request.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.Request
                 * @static
                 * @param {oracle.v1.IRequest} message Request message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Request.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Request message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.Request
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.Request} Request
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Request.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.Request();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.oracle_script_id = reader.uint64();
                            break;
                        case 2:
                            message.calldata = reader.bytes();
                            break;
                        case 3:
                            if (!(message.requested_validators && message.requested_validators.length))
                                message.requested_validators = [];
                            message.requested_validators.push(reader.string());
                            break;
                        case 4:
                            message.min_count = reader.uint64();
                            break;
                        case 5:
                            message.request_height = reader.int64();
                            break;
                        case 6:
                            message.request_time = reader.int64();
                            break;
                        case 7:
                            message.client_id = reader.string();
                            break;
                        case 8:
                            if (!(message.raw_requests && message.raw_requests.length))
                                message.raw_requests = [];
                            message.raw_requests.push($root.oracle.v1.RawRequest.decode(reader, reader.uint32()));
                            break;
                        case 9:
                            message.ibc_channel = $root.oracle.v1.IBCChannel.decode(reader, reader.uint32());
                            break;
                        case 10:
                            message.execute_gas = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Request message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.Request
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.Request} Request
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Request.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Request message.
                 * @function verify
                 * @memberof oracle.v1.Request
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Request.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.oracle_script_id != null && message.hasOwnProperty("oracle_script_id"))
                        if (!$util.isInteger(message.oracle_script_id) && !(message.oracle_script_id && $util.isInteger(message.oracle_script_id.low) && $util.isInteger(message.oracle_script_id.high)))
                            return "oracle_script_id: integer|Long expected";
                    if (message.calldata != null && message.hasOwnProperty("calldata"))
                        if (!(message.calldata && typeof message.calldata.length === "number" || $util.isString(message.calldata)))
                            return "calldata: buffer expected";
                    if (message.requested_validators != null && message.hasOwnProperty("requested_validators")) {
                        if (!Array.isArray(message.requested_validators))
                            return "requested_validators: array expected";
                        for (var i = 0; i < message.requested_validators.length; ++i)
                            if (!$util.isString(message.requested_validators[i]))
                                return "requested_validators: string[] expected";
                    }
                    if (message.min_count != null && message.hasOwnProperty("min_count"))
                        if (!$util.isInteger(message.min_count) && !(message.min_count && $util.isInteger(message.min_count.low) && $util.isInteger(message.min_count.high)))
                            return "min_count: integer|Long expected";
                    if (message.request_height != null && message.hasOwnProperty("request_height"))
                        if (!$util.isInteger(message.request_height) && !(message.request_height && $util.isInteger(message.request_height.low) && $util.isInteger(message.request_height.high)))
                            return "request_height: integer|Long expected";
                    if (message.request_time != null && message.hasOwnProperty("request_time"))
                        if (!$util.isInteger(message.request_time) && !(message.request_time && $util.isInteger(message.request_time.low) && $util.isInteger(message.request_time.high)))
                            return "request_time: integer|Long expected";
                    if (message.client_id != null && message.hasOwnProperty("client_id"))
                        if (!$util.isString(message.client_id))
                            return "client_id: string expected";
                    if (message.raw_requests != null && message.hasOwnProperty("raw_requests")) {
                        if (!Array.isArray(message.raw_requests))
                            return "raw_requests: array expected";
                        for (var i = 0; i < message.raw_requests.length; ++i) {
                            var error = $root.oracle.v1.RawRequest.verify(message.raw_requests[i]);
                            if (error)
                                return "raw_requests." + error;
                        }
                    }
                    if (message.ibc_channel != null && message.hasOwnProperty("ibc_channel")) {
                        var error = $root.oracle.v1.IBCChannel.verify(message.ibc_channel);
                        if (error)
                            return "ibc_channel." + error;
                    }
                    if (message.execute_gas != null && message.hasOwnProperty("execute_gas"))
                        if (!$util.isInteger(message.execute_gas) && !(message.execute_gas && $util.isInteger(message.execute_gas.low) && $util.isInteger(message.execute_gas.high)))
                            return "execute_gas: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a Request message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.Request
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.Request} Request
                 */
                Request.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.Request)
                        return object;
                    var message = new $root.oracle.v1.Request();
                    if (object.oracle_script_id != null)
                        if ($util.Long)
                            (message.oracle_script_id = $util.Long.fromValue(object.oracle_script_id)).unsigned = true;
                        else if (typeof object.oracle_script_id === "string")
                            message.oracle_script_id = parseInt(object.oracle_script_id, 10);
                        else if (typeof object.oracle_script_id === "number")
                            message.oracle_script_id = object.oracle_script_id;
                        else if (typeof object.oracle_script_id === "object")
                            message.oracle_script_id = new $util.LongBits(object.oracle_script_id.low >>> 0, object.oracle_script_id.high >>> 0).toNumber(true);
                    if (object.calldata != null)
                        if (typeof object.calldata === "string")
                            $util.base64.decode(object.calldata, message.calldata = $util.newBuffer($util.base64.length(object.calldata)), 0);
                        else if (object.calldata.length)
                            message.calldata = object.calldata;
                    if (object.requested_validators) {
                        if (!Array.isArray(object.requested_validators))
                            throw TypeError(".oracle.v1.Request.requested_validators: array expected");
                        message.requested_validators = [];
                        for (var i = 0; i < object.requested_validators.length; ++i)
                            message.requested_validators[i] = String(object.requested_validators[i]);
                    }
                    if (object.min_count != null)
                        if ($util.Long)
                            (message.min_count = $util.Long.fromValue(object.min_count)).unsigned = true;
                        else if (typeof object.min_count === "string")
                            message.min_count = parseInt(object.min_count, 10);
                        else if (typeof object.min_count === "number")
                            message.min_count = object.min_count;
                        else if (typeof object.min_count === "object")
                            message.min_count = new $util.LongBits(object.min_count.low >>> 0, object.min_count.high >>> 0).toNumber(true);
                    if (object.request_height != null)
                        if ($util.Long)
                            (message.request_height = $util.Long.fromValue(object.request_height)).unsigned = false;
                        else if (typeof object.request_height === "string")
                            message.request_height = parseInt(object.request_height, 10);
                        else if (typeof object.request_height === "number")
                            message.request_height = object.request_height;
                        else if (typeof object.request_height === "object")
                            message.request_height = new $util.LongBits(object.request_height.low >>> 0, object.request_height.high >>> 0).toNumber();
                    if (object.request_time != null)
                        if ($util.Long)
                            (message.request_time = $util.Long.fromValue(object.request_time)).unsigned = false;
                        else if (typeof object.request_time === "string")
                            message.request_time = parseInt(object.request_time, 10);
                        else if (typeof object.request_time === "number")
                            message.request_time = object.request_time;
                        else if (typeof object.request_time === "object")
                            message.request_time = new $util.LongBits(object.request_time.low >>> 0, object.request_time.high >>> 0).toNumber();
                    if (object.client_id != null)
                        message.client_id = String(object.client_id);
                    if (object.raw_requests) {
                        if (!Array.isArray(object.raw_requests))
                            throw TypeError(".oracle.v1.Request.raw_requests: array expected");
                        message.raw_requests = [];
                        for (var i = 0; i < object.raw_requests.length; ++i) {
                            if (typeof object.raw_requests[i] !== "object")
                                throw TypeError(".oracle.v1.Request.raw_requests: object expected");
                            message.raw_requests[i] = $root.oracle.v1.RawRequest.fromObject(object.raw_requests[i]);
                        }
                    }
                    if (object.ibc_channel != null) {
                        if (typeof object.ibc_channel !== "object")
                            throw TypeError(".oracle.v1.Request.ibc_channel: object expected");
                        message.ibc_channel = $root.oracle.v1.IBCChannel.fromObject(object.ibc_channel);
                    }
                    if (object.execute_gas != null)
                        if ($util.Long)
                            (message.execute_gas = $util.Long.fromValue(object.execute_gas)).unsigned = true;
                        else if (typeof object.execute_gas === "string")
                            message.execute_gas = parseInt(object.execute_gas, 10);
                        else if (typeof object.execute_gas === "number")
                            message.execute_gas = object.execute_gas;
                        else if (typeof object.execute_gas === "object")
                            message.execute_gas = new $util.LongBits(object.execute_gas.low >>> 0, object.execute_gas.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Request message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.Request
                 * @static
                 * @param {oracle.v1.Request} message Request
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Request.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.requested_validators = [];
                        object.raw_requests = [];
                    }
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.oracle_script_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.oracle_script_id = options.longs === String ? "0" : 0;
                        if (options.bytes === String)
                            object.calldata = "";
                        else {
                            object.calldata = [];
                            if (options.bytes !== Array)
                                object.calldata = $util.newBuffer(object.calldata);
                        }
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.min_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.min_count = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.request_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.request_height = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.request_time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.request_time = options.longs === String ? "0" : 0;
                        object.client_id = "";
                        object.ibc_channel = null;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.execute_gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.execute_gas = options.longs === String ? "0" : 0;
                    }
                    if (message.oracle_script_id != null && message.hasOwnProperty("oracle_script_id"))
                        if (typeof message.oracle_script_id === "number")
                            object.oracle_script_id = options.longs === String ? String(message.oracle_script_id) : message.oracle_script_id;
                        else
                            object.oracle_script_id = options.longs === String ? $util.Long.prototype.toString.call(message.oracle_script_id) : options.longs === Number ? new $util.LongBits(message.oracle_script_id.low >>> 0, message.oracle_script_id.high >>> 0).toNumber(true) : message.oracle_script_id;
                    if (message.calldata != null && message.hasOwnProperty("calldata"))
                        object.calldata = options.bytes === String ? $util.base64.encode(message.calldata, 0, message.calldata.length) : options.bytes === Array ? Array.prototype.slice.call(message.calldata) : message.calldata;
                    if (message.requested_validators && message.requested_validators.length) {
                        object.requested_validators = [];
                        for (var j = 0; j < message.requested_validators.length; ++j)
                            object.requested_validators[j] = message.requested_validators[j];
                    }
                    if (message.min_count != null && message.hasOwnProperty("min_count"))
                        if (typeof message.min_count === "number")
                            object.min_count = options.longs === String ? String(message.min_count) : message.min_count;
                        else
                            object.min_count = options.longs === String ? $util.Long.prototype.toString.call(message.min_count) : options.longs === Number ? new $util.LongBits(message.min_count.low >>> 0, message.min_count.high >>> 0).toNumber(true) : message.min_count;
                    if (message.request_height != null && message.hasOwnProperty("request_height"))
                        if (typeof message.request_height === "number")
                            object.request_height = options.longs === String ? String(message.request_height) : message.request_height;
                        else
                            object.request_height = options.longs === String ? $util.Long.prototype.toString.call(message.request_height) : options.longs === Number ? new $util.LongBits(message.request_height.low >>> 0, message.request_height.high >>> 0).toNumber() : message.request_height;
                    if (message.request_time != null && message.hasOwnProperty("request_time"))
                        if (typeof message.request_time === "number")
                            object.request_time = options.longs === String ? String(message.request_time) : message.request_time;
                        else
                            object.request_time = options.longs === String ? $util.Long.prototype.toString.call(message.request_time) : options.longs === Number ? new $util.LongBits(message.request_time.low >>> 0, message.request_time.high >>> 0).toNumber() : message.request_time;
                    if (message.client_id != null && message.hasOwnProperty("client_id"))
                        object.client_id = message.client_id;
                    if (message.raw_requests && message.raw_requests.length) {
                        object.raw_requests = [];
                        for (var j = 0; j < message.raw_requests.length; ++j)
                            object.raw_requests[j] = $root.oracle.v1.RawRequest.toObject(message.raw_requests[j], options);
                    }
                    if (message.ibc_channel != null && message.hasOwnProperty("ibc_channel"))
                        object.ibc_channel = $root.oracle.v1.IBCChannel.toObject(message.ibc_channel, options);
                    if (message.execute_gas != null && message.hasOwnProperty("execute_gas"))
                        if (typeof message.execute_gas === "number")
                            object.execute_gas = options.longs === String ? String(message.execute_gas) : message.execute_gas;
                        else
                            object.execute_gas = options.longs === String ? $util.Long.prototype.toString.call(message.execute_gas) : options.longs === Number ? new $util.LongBits(message.execute_gas.low >>> 0, message.execute_gas.high >>> 0).toNumber(true) : message.execute_gas;
                    return object;
                };
    
                /**
                 * Converts this Request to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.Request
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Request.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Request;
            })();
    
            v1.Report = (function() {
    
                /**
                 * Properties of a Report.
                 * @memberof oracle.v1
                 * @interface IReport
                 * @property {string|null} [validator] Report validator
                 * @property {boolean|null} [in_before_resolve] Report in_before_resolve
                 * @property {Array.<oracle.v1.IRawReport>|null} [raw_reports] Report raw_reports
                 */
    
                /**
                 * Constructs a new Report.
                 * @memberof oracle.v1
                 * @classdesc Represents a Report.
                 * @implements IReport
                 * @constructor
                 * @param {oracle.v1.IReport=} [properties] Properties to set
                 */
                function Report(properties) {
                    this.raw_reports = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Report validator.
                 * @member {string} validator
                 * @memberof oracle.v1.Report
                 * @instance
                 */
                Report.prototype.validator = "";
    
                /**
                 * Report in_before_resolve.
                 * @member {boolean} in_before_resolve
                 * @memberof oracle.v1.Report
                 * @instance
                 */
                Report.prototype.in_before_resolve = false;
    
                /**
                 * Report raw_reports.
                 * @member {Array.<oracle.v1.IRawReport>} raw_reports
                 * @memberof oracle.v1.Report
                 * @instance
                 */
                Report.prototype.raw_reports = $util.emptyArray;
    
                /**
                 * Encodes the specified Report message. Does not implicitly {@link oracle.v1.Report.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.Report
                 * @static
                 * @param {oracle.v1.IReport} message Report message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Report.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.validator != null && Object.hasOwnProperty.call(message, "validator"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.validator);
                    if (message.in_before_resolve != null && Object.hasOwnProperty.call(message, "in_before_resolve"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.in_before_resolve);
                    if (message.raw_reports != null && message.raw_reports.length)
                        for (var i = 0; i < message.raw_reports.length; ++i)
                            $root.oracle.v1.RawReport.encode(message.raw_reports[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Report message, length delimited. Does not implicitly {@link oracle.v1.Report.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.Report
                 * @static
                 * @param {oracle.v1.IReport} message Report message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Report.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Report message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.Report
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.Report} Report
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Report.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.Report();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.validator = reader.string();
                            break;
                        case 2:
                            message.in_before_resolve = reader.bool();
                            break;
                        case 3:
                            if (!(message.raw_reports && message.raw_reports.length))
                                message.raw_reports = [];
                            message.raw_reports.push($root.oracle.v1.RawReport.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Report message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.Report
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.Report} Report
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Report.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Report message.
                 * @function verify
                 * @memberof oracle.v1.Report
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Report.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.validator != null && message.hasOwnProperty("validator"))
                        if (!$util.isString(message.validator))
                            return "validator: string expected";
                    if (message.in_before_resolve != null && message.hasOwnProperty("in_before_resolve"))
                        if (typeof message.in_before_resolve !== "boolean")
                            return "in_before_resolve: boolean expected";
                    if (message.raw_reports != null && message.hasOwnProperty("raw_reports")) {
                        if (!Array.isArray(message.raw_reports))
                            return "raw_reports: array expected";
                        for (var i = 0; i < message.raw_reports.length; ++i) {
                            var error = $root.oracle.v1.RawReport.verify(message.raw_reports[i]);
                            if (error)
                                return "raw_reports." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Report message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.Report
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.Report} Report
                 */
                Report.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.Report)
                        return object;
                    var message = new $root.oracle.v1.Report();
                    if (object.validator != null)
                        message.validator = String(object.validator);
                    if (object.in_before_resolve != null)
                        message.in_before_resolve = Boolean(object.in_before_resolve);
                    if (object.raw_reports) {
                        if (!Array.isArray(object.raw_reports))
                            throw TypeError(".oracle.v1.Report.raw_reports: array expected");
                        message.raw_reports = [];
                        for (var i = 0; i < object.raw_reports.length; ++i) {
                            if (typeof object.raw_reports[i] !== "object")
                                throw TypeError(".oracle.v1.Report.raw_reports: object expected");
                            message.raw_reports[i] = $root.oracle.v1.RawReport.fromObject(object.raw_reports[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Report message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.Report
                 * @static
                 * @param {oracle.v1.Report} message Report
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Report.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.raw_reports = [];
                    if (options.defaults) {
                        object.validator = "";
                        object.in_before_resolve = false;
                    }
                    if (message.validator != null && message.hasOwnProperty("validator"))
                        object.validator = message.validator;
                    if (message.in_before_resolve != null && message.hasOwnProperty("in_before_resolve"))
                        object.in_before_resolve = message.in_before_resolve;
                    if (message.raw_reports && message.raw_reports.length) {
                        object.raw_reports = [];
                        for (var j = 0; j < message.raw_reports.length; ++j)
                            object.raw_reports[j] = $root.oracle.v1.RawReport.toObject(message.raw_reports[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Report to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.Report
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Report.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Report;
            })();
    
            /**
             * ResolveStatus enum.
             * @name oracle.v1.ResolveStatus
             * @enum {number}
             * @property {number} RESOLVE_STATUS_OPEN_UNSPECIFIED=0 RESOLVE_STATUS_OPEN_UNSPECIFIED value
             * @property {number} RESOLVE_STATUS_SUCCESS=1 RESOLVE_STATUS_SUCCESS value
             * @property {number} RESOLVE_STATUS_FAILURE=2 RESOLVE_STATUS_FAILURE value
             * @property {number} RESOLVE_STATUS_EXPIRED=3 RESOLVE_STATUS_EXPIRED value
             */
            v1.ResolveStatus = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "RESOLVE_STATUS_OPEN_UNSPECIFIED"] = 0;
                values[valuesById[1] = "RESOLVE_STATUS_SUCCESS"] = 1;
                values[valuesById[2] = "RESOLVE_STATUS_FAILURE"] = 2;
                values[valuesById[3] = "RESOLVE_STATUS_EXPIRED"] = 3;
                return values;
            })();
    
            v1.OracleRequestPacketData = (function() {
    
                /**
                 * Properties of an OracleRequestPacketData.
                 * @memberof oracle.v1
                 * @interface IOracleRequestPacketData
                 * @property {string|null} [client_id] OracleRequestPacketData client_id
                 * @property {Long|null} [oracle_script_id] OracleRequestPacketData oracle_script_id
                 * @property {Uint8Array|null} [calldata] OracleRequestPacketData calldata
                 * @property {Long|null} [ask_count] OracleRequestPacketData ask_count
                 * @property {Long|null} [min_count] OracleRequestPacketData min_count
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [fee_limit] OracleRequestPacketData fee_limit
                 * @property {Long|null} [prepare_gas] OracleRequestPacketData prepare_gas
                 * @property {Long|null} [execute_gas] OracleRequestPacketData execute_gas
                 */
    
                /**
                 * Constructs a new OracleRequestPacketData.
                 * @memberof oracle.v1
                 * @classdesc Represents an OracleRequestPacketData.
                 * @implements IOracleRequestPacketData
                 * @constructor
                 * @param {oracle.v1.IOracleRequestPacketData=} [properties] Properties to set
                 */
                function OracleRequestPacketData(properties) {
                    this.fee_limit = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OracleRequestPacketData client_id.
                 * @member {string} client_id
                 * @memberof oracle.v1.OracleRequestPacketData
                 * @instance
                 */
                OracleRequestPacketData.prototype.client_id = "";
    
                /**
                 * OracleRequestPacketData oracle_script_id.
                 * @member {Long} oracle_script_id
                 * @memberof oracle.v1.OracleRequestPacketData
                 * @instance
                 */
                OracleRequestPacketData.prototype.oracle_script_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * OracleRequestPacketData calldata.
                 * @member {Uint8Array} calldata
                 * @memberof oracle.v1.OracleRequestPacketData
                 * @instance
                 */
                OracleRequestPacketData.prototype.calldata = $util.newBuffer([]);
    
                /**
                 * OracleRequestPacketData ask_count.
                 * @member {Long} ask_count
                 * @memberof oracle.v1.OracleRequestPacketData
                 * @instance
                 */
                OracleRequestPacketData.prototype.ask_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * OracleRequestPacketData min_count.
                 * @member {Long} min_count
                 * @memberof oracle.v1.OracleRequestPacketData
                 * @instance
                 */
                OracleRequestPacketData.prototype.min_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * OracleRequestPacketData fee_limit.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} fee_limit
                 * @memberof oracle.v1.OracleRequestPacketData
                 * @instance
                 */
                OracleRequestPacketData.prototype.fee_limit = $util.emptyArray;
    
                /**
                 * OracleRequestPacketData prepare_gas.
                 * @member {Long} prepare_gas
                 * @memberof oracle.v1.OracleRequestPacketData
                 * @instance
                 */
                OracleRequestPacketData.prototype.prepare_gas = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * OracleRequestPacketData execute_gas.
                 * @member {Long} execute_gas
                 * @memberof oracle.v1.OracleRequestPacketData
                 * @instance
                 */
                OracleRequestPacketData.prototype.execute_gas = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified OracleRequestPacketData message. Does not implicitly {@link oracle.v1.OracleRequestPacketData.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.OracleRequestPacketData
                 * @static
                 * @param {oracle.v1.IOracleRequestPacketData} message OracleRequestPacketData message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OracleRequestPacketData.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                    if (message.oracle_script_id != null && Object.hasOwnProperty.call(message, "oracle_script_id"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.oracle_script_id);
                    if (message.calldata != null && Object.hasOwnProperty.call(message, "calldata"))
                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.calldata);
                    if (message.ask_count != null && Object.hasOwnProperty.call(message, "ask_count"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.ask_count);
                    if (message.min_count != null && Object.hasOwnProperty.call(message, "min_count"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.min_count);
                    if (message.fee_limit != null && message.fee_limit.length)
                        for (var i = 0; i < message.fee_limit.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.fee_limit[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.prepare_gas != null && Object.hasOwnProperty.call(message, "prepare_gas"))
                        writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.prepare_gas);
                    if (message.execute_gas != null && Object.hasOwnProperty.call(message, "execute_gas"))
                        writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.execute_gas);
                    return writer;
                };
    
                /**
                 * Encodes the specified OracleRequestPacketData message, length delimited. Does not implicitly {@link oracle.v1.OracleRequestPacketData.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.OracleRequestPacketData
                 * @static
                 * @param {oracle.v1.IOracleRequestPacketData} message OracleRequestPacketData message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OracleRequestPacketData.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OracleRequestPacketData message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.OracleRequestPacketData
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.OracleRequestPacketData} OracleRequestPacketData
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OracleRequestPacketData.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.OracleRequestPacketData();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.client_id = reader.string();
                            break;
                        case 2:
                            message.oracle_script_id = reader.uint64();
                            break;
                        case 3:
                            message.calldata = reader.bytes();
                            break;
                        case 4:
                            message.ask_count = reader.uint64();
                            break;
                        case 5:
                            message.min_count = reader.uint64();
                            break;
                        case 6:
                            if (!(message.fee_limit && message.fee_limit.length))
                                message.fee_limit = [];
                            message.fee_limit.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            message.prepare_gas = reader.uint64();
                            break;
                        case 8:
                            message.execute_gas = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OracleRequestPacketData message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.OracleRequestPacketData
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.OracleRequestPacketData} OracleRequestPacketData
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OracleRequestPacketData.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OracleRequestPacketData message.
                 * @function verify
                 * @memberof oracle.v1.OracleRequestPacketData
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OracleRequestPacketData.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.client_id != null && message.hasOwnProperty("client_id"))
                        if (!$util.isString(message.client_id))
                            return "client_id: string expected";
                    if (message.oracle_script_id != null && message.hasOwnProperty("oracle_script_id"))
                        if (!$util.isInteger(message.oracle_script_id) && !(message.oracle_script_id && $util.isInteger(message.oracle_script_id.low) && $util.isInteger(message.oracle_script_id.high)))
                            return "oracle_script_id: integer|Long expected";
                    if (message.calldata != null && message.hasOwnProperty("calldata"))
                        if (!(message.calldata && typeof message.calldata.length === "number" || $util.isString(message.calldata)))
                            return "calldata: buffer expected";
                    if (message.ask_count != null && message.hasOwnProperty("ask_count"))
                        if (!$util.isInteger(message.ask_count) && !(message.ask_count && $util.isInteger(message.ask_count.low) && $util.isInteger(message.ask_count.high)))
                            return "ask_count: integer|Long expected";
                    if (message.min_count != null && message.hasOwnProperty("min_count"))
                        if (!$util.isInteger(message.min_count) && !(message.min_count && $util.isInteger(message.min_count.low) && $util.isInteger(message.min_count.high)))
                            return "min_count: integer|Long expected";
                    if (message.fee_limit != null && message.hasOwnProperty("fee_limit")) {
                        if (!Array.isArray(message.fee_limit))
                            return "fee_limit: array expected";
                        for (var i = 0; i < message.fee_limit.length; ++i) {
                            var error = $root.cosmos.base.v1beta1.Coin.verify(message.fee_limit[i]);
                            if (error)
                                return "fee_limit." + error;
                        }
                    }
                    if (message.prepare_gas != null && message.hasOwnProperty("prepare_gas"))
                        if (!$util.isInteger(message.prepare_gas) && !(message.prepare_gas && $util.isInteger(message.prepare_gas.low) && $util.isInteger(message.prepare_gas.high)))
                            return "prepare_gas: integer|Long expected";
                    if (message.execute_gas != null && message.hasOwnProperty("execute_gas"))
                        if (!$util.isInteger(message.execute_gas) && !(message.execute_gas && $util.isInteger(message.execute_gas.low) && $util.isInteger(message.execute_gas.high)))
                            return "execute_gas: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates an OracleRequestPacketData message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.OracleRequestPacketData
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.OracleRequestPacketData} OracleRequestPacketData
                 */
                OracleRequestPacketData.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.OracleRequestPacketData)
                        return object;
                    var message = new $root.oracle.v1.OracleRequestPacketData();
                    if (object.client_id != null)
                        message.client_id = String(object.client_id);
                    if (object.oracle_script_id != null)
                        if ($util.Long)
                            (message.oracle_script_id = $util.Long.fromValue(object.oracle_script_id)).unsigned = true;
                        else if (typeof object.oracle_script_id === "string")
                            message.oracle_script_id = parseInt(object.oracle_script_id, 10);
                        else if (typeof object.oracle_script_id === "number")
                            message.oracle_script_id = object.oracle_script_id;
                        else if (typeof object.oracle_script_id === "object")
                            message.oracle_script_id = new $util.LongBits(object.oracle_script_id.low >>> 0, object.oracle_script_id.high >>> 0).toNumber(true);
                    if (object.calldata != null)
                        if (typeof object.calldata === "string")
                            $util.base64.decode(object.calldata, message.calldata = $util.newBuffer($util.base64.length(object.calldata)), 0);
                        else if (object.calldata.length)
                            message.calldata = object.calldata;
                    if (object.ask_count != null)
                        if ($util.Long)
                            (message.ask_count = $util.Long.fromValue(object.ask_count)).unsigned = true;
                        else if (typeof object.ask_count === "string")
                            message.ask_count = parseInt(object.ask_count, 10);
                        else if (typeof object.ask_count === "number")
                            message.ask_count = object.ask_count;
                        else if (typeof object.ask_count === "object")
                            message.ask_count = new $util.LongBits(object.ask_count.low >>> 0, object.ask_count.high >>> 0).toNumber(true);
                    if (object.min_count != null)
                        if ($util.Long)
                            (message.min_count = $util.Long.fromValue(object.min_count)).unsigned = true;
                        else if (typeof object.min_count === "string")
                            message.min_count = parseInt(object.min_count, 10);
                        else if (typeof object.min_count === "number")
                            message.min_count = object.min_count;
                        else if (typeof object.min_count === "object")
                            message.min_count = new $util.LongBits(object.min_count.low >>> 0, object.min_count.high >>> 0).toNumber(true);
                    if (object.fee_limit) {
                        if (!Array.isArray(object.fee_limit))
                            throw TypeError(".oracle.v1.OracleRequestPacketData.fee_limit: array expected");
                        message.fee_limit = [];
                        for (var i = 0; i < object.fee_limit.length; ++i) {
                            if (typeof object.fee_limit[i] !== "object")
                                throw TypeError(".oracle.v1.OracleRequestPacketData.fee_limit: object expected");
                            message.fee_limit[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.fee_limit[i]);
                        }
                    }
                    if (object.prepare_gas != null)
                        if ($util.Long)
                            (message.prepare_gas = $util.Long.fromValue(object.prepare_gas)).unsigned = true;
                        else if (typeof object.prepare_gas === "string")
                            message.prepare_gas = parseInt(object.prepare_gas, 10);
                        else if (typeof object.prepare_gas === "number")
                            message.prepare_gas = object.prepare_gas;
                        else if (typeof object.prepare_gas === "object")
                            message.prepare_gas = new $util.LongBits(object.prepare_gas.low >>> 0, object.prepare_gas.high >>> 0).toNumber(true);
                    if (object.execute_gas != null)
                        if ($util.Long)
                            (message.execute_gas = $util.Long.fromValue(object.execute_gas)).unsigned = true;
                        else if (typeof object.execute_gas === "string")
                            message.execute_gas = parseInt(object.execute_gas, 10);
                        else if (typeof object.execute_gas === "number")
                            message.execute_gas = object.execute_gas;
                        else if (typeof object.execute_gas === "object")
                            message.execute_gas = new $util.LongBits(object.execute_gas.low >>> 0, object.execute_gas.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from an OracleRequestPacketData message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.OracleRequestPacketData
                 * @static
                 * @param {oracle.v1.OracleRequestPacketData} message OracleRequestPacketData
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OracleRequestPacketData.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.fee_limit = [];
                    if (options.defaults) {
                        object.client_id = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.oracle_script_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.oracle_script_id = options.longs === String ? "0" : 0;
                        if (options.bytes === String)
                            object.calldata = "";
                        else {
                            object.calldata = [];
                            if (options.bytes !== Array)
                                object.calldata = $util.newBuffer(object.calldata);
                        }
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.ask_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.ask_count = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.min_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.min_count = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.prepare_gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.prepare_gas = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.execute_gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.execute_gas = options.longs === String ? "0" : 0;
                    }
                    if (message.client_id != null && message.hasOwnProperty("client_id"))
                        object.client_id = message.client_id;
                    if (message.oracle_script_id != null && message.hasOwnProperty("oracle_script_id"))
                        if (typeof message.oracle_script_id === "number")
                            object.oracle_script_id = options.longs === String ? String(message.oracle_script_id) : message.oracle_script_id;
                        else
                            object.oracle_script_id = options.longs === String ? $util.Long.prototype.toString.call(message.oracle_script_id) : options.longs === Number ? new $util.LongBits(message.oracle_script_id.low >>> 0, message.oracle_script_id.high >>> 0).toNumber(true) : message.oracle_script_id;
                    if (message.calldata != null && message.hasOwnProperty("calldata"))
                        object.calldata = options.bytes === String ? $util.base64.encode(message.calldata, 0, message.calldata.length) : options.bytes === Array ? Array.prototype.slice.call(message.calldata) : message.calldata;
                    if (message.ask_count != null && message.hasOwnProperty("ask_count"))
                        if (typeof message.ask_count === "number")
                            object.ask_count = options.longs === String ? String(message.ask_count) : message.ask_count;
                        else
                            object.ask_count = options.longs === String ? $util.Long.prototype.toString.call(message.ask_count) : options.longs === Number ? new $util.LongBits(message.ask_count.low >>> 0, message.ask_count.high >>> 0).toNumber(true) : message.ask_count;
                    if (message.min_count != null && message.hasOwnProperty("min_count"))
                        if (typeof message.min_count === "number")
                            object.min_count = options.longs === String ? String(message.min_count) : message.min_count;
                        else
                            object.min_count = options.longs === String ? $util.Long.prototype.toString.call(message.min_count) : options.longs === Number ? new $util.LongBits(message.min_count.low >>> 0, message.min_count.high >>> 0).toNumber(true) : message.min_count;
                    if (message.fee_limit && message.fee_limit.length) {
                        object.fee_limit = [];
                        for (var j = 0; j < message.fee_limit.length; ++j)
                            object.fee_limit[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.fee_limit[j], options);
                    }
                    if (message.prepare_gas != null && message.hasOwnProperty("prepare_gas"))
                        if (typeof message.prepare_gas === "number")
                            object.prepare_gas = options.longs === String ? String(message.prepare_gas) : message.prepare_gas;
                        else
                            object.prepare_gas = options.longs === String ? $util.Long.prototype.toString.call(message.prepare_gas) : options.longs === Number ? new $util.LongBits(message.prepare_gas.low >>> 0, message.prepare_gas.high >>> 0).toNumber(true) : message.prepare_gas;
                    if (message.execute_gas != null && message.hasOwnProperty("execute_gas"))
                        if (typeof message.execute_gas === "number")
                            object.execute_gas = options.longs === String ? String(message.execute_gas) : message.execute_gas;
                        else
                            object.execute_gas = options.longs === String ? $util.Long.prototype.toString.call(message.execute_gas) : options.longs === Number ? new $util.LongBits(message.execute_gas.low >>> 0, message.execute_gas.high >>> 0).toNumber(true) : message.execute_gas;
                    return object;
                };
    
                /**
                 * Converts this OracleRequestPacketData to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.OracleRequestPacketData
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OracleRequestPacketData.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OracleRequestPacketData;
            })();
    
            v1.OracleRequestPacketAcknowledgement = (function() {
    
                /**
                 * Properties of an OracleRequestPacketAcknowledgement.
                 * @memberof oracle.v1
                 * @interface IOracleRequestPacketAcknowledgement
                 * @property {Long|null} [request_id] OracleRequestPacketAcknowledgement request_id
                 */
    
                /**
                 * Constructs a new OracleRequestPacketAcknowledgement.
                 * @memberof oracle.v1
                 * @classdesc Represents an OracleRequestPacketAcknowledgement.
                 * @implements IOracleRequestPacketAcknowledgement
                 * @constructor
                 * @param {oracle.v1.IOracleRequestPacketAcknowledgement=} [properties] Properties to set
                 */
                function OracleRequestPacketAcknowledgement(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OracleRequestPacketAcknowledgement request_id.
                 * @member {Long} request_id
                 * @memberof oracle.v1.OracleRequestPacketAcknowledgement
                 * @instance
                 */
                OracleRequestPacketAcknowledgement.prototype.request_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified OracleRequestPacketAcknowledgement message. Does not implicitly {@link oracle.v1.OracleRequestPacketAcknowledgement.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.OracleRequestPacketAcknowledgement
                 * @static
                 * @param {oracle.v1.IOracleRequestPacketAcknowledgement} message OracleRequestPacketAcknowledgement message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OracleRequestPacketAcknowledgement.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request_id != null && Object.hasOwnProperty.call(message, "request_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.request_id);
                    return writer;
                };
    
                /**
                 * Encodes the specified OracleRequestPacketAcknowledgement message, length delimited. Does not implicitly {@link oracle.v1.OracleRequestPacketAcknowledgement.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.OracleRequestPacketAcknowledgement
                 * @static
                 * @param {oracle.v1.IOracleRequestPacketAcknowledgement} message OracleRequestPacketAcknowledgement message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OracleRequestPacketAcknowledgement.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OracleRequestPacketAcknowledgement message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.OracleRequestPacketAcknowledgement
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.OracleRequestPacketAcknowledgement} OracleRequestPacketAcknowledgement
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OracleRequestPacketAcknowledgement.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.OracleRequestPacketAcknowledgement();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.request_id = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OracleRequestPacketAcknowledgement message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.OracleRequestPacketAcknowledgement
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.OracleRequestPacketAcknowledgement} OracleRequestPacketAcknowledgement
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OracleRequestPacketAcknowledgement.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OracleRequestPacketAcknowledgement message.
                 * @function verify
                 * @memberof oracle.v1.OracleRequestPacketAcknowledgement
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OracleRequestPacketAcknowledgement.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        if (!$util.isInteger(message.request_id) && !(message.request_id && $util.isInteger(message.request_id.low) && $util.isInteger(message.request_id.high)))
                            return "request_id: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates an OracleRequestPacketAcknowledgement message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.OracleRequestPacketAcknowledgement
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.OracleRequestPacketAcknowledgement} OracleRequestPacketAcknowledgement
                 */
                OracleRequestPacketAcknowledgement.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.OracleRequestPacketAcknowledgement)
                        return object;
                    var message = new $root.oracle.v1.OracleRequestPacketAcknowledgement();
                    if (object.request_id != null)
                        if ($util.Long)
                            (message.request_id = $util.Long.fromValue(object.request_id)).unsigned = true;
                        else if (typeof object.request_id === "string")
                            message.request_id = parseInt(object.request_id, 10);
                        else if (typeof object.request_id === "number")
                            message.request_id = object.request_id;
                        else if (typeof object.request_id === "object")
                            message.request_id = new $util.LongBits(object.request_id.low >>> 0, object.request_id.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from an OracleRequestPacketAcknowledgement message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.OracleRequestPacketAcknowledgement
                 * @static
                 * @param {oracle.v1.OracleRequestPacketAcknowledgement} message OracleRequestPacketAcknowledgement
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OracleRequestPacketAcknowledgement.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.request_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.request_id = options.longs === String ? "0" : 0;
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        if (typeof message.request_id === "number")
                            object.request_id = options.longs === String ? String(message.request_id) : message.request_id;
                        else
                            object.request_id = options.longs === String ? $util.Long.prototype.toString.call(message.request_id) : options.longs === Number ? new $util.LongBits(message.request_id.low >>> 0, message.request_id.high >>> 0).toNumber(true) : message.request_id;
                    return object;
                };
    
                /**
                 * Converts this OracleRequestPacketAcknowledgement to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.OracleRequestPacketAcknowledgement
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OracleRequestPacketAcknowledgement.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OracleRequestPacketAcknowledgement;
            })();
    
            v1.OracleResponsePacketData = (function() {
    
                /**
                 * Properties of an OracleResponsePacketData.
                 * @memberof oracle.v1
                 * @interface IOracleResponsePacketData
                 * @property {string|null} [client_id] OracleResponsePacketData client_id
                 * @property {Long|null} [request_id] OracleResponsePacketData request_id
                 * @property {Long|null} [ans_count] OracleResponsePacketData ans_count
                 * @property {Long|null} [request_time] OracleResponsePacketData request_time
                 * @property {Long|null} [resolve_time] OracleResponsePacketData resolve_time
                 * @property {oracle.v1.ResolveStatus|null} [resolve_status] OracleResponsePacketData resolve_status
                 * @property {Uint8Array|null} [result] OracleResponsePacketData result
                 */
    
                /**
                 * Constructs a new OracleResponsePacketData.
                 * @memberof oracle.v1
                 * @classdesc Represents an OracleResponsePacketData.
                 * @implements IOracleResponsePacketData
                 * @constructor
                 * @param {oracle.v1.IOracleResponsePacketData=} [properties] Properties to set
                 */
                function OracleResponsePacketData(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OracleResponsePacketData client_id.
                 * @member {string} client_id
                 * @memberof oracle.v1.OracleResponsePacketData
                 * @instance
                 */
                OracleResponsePacketData.prototype.client_id = "";
    
                /**
                 * OracleResponsePacketData request_id.
                 * @member {Long} request_id
                 * @memberof oracle.v1.OracleResponsePacketData
                 * @instance
                 */
                OracleResponsePacketData.prototype.request_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * OracleResponsePacketData ans_count.
                 * @member {Long} ans_count
                 * @memberof oracle.v1.OracleResponsePacketData
                 * @instance
                 */
                OracleResponsePacketData.prototype.ans_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * OracleResponsePacketData request_time.
                 * @member {Long} request_time
                 * @memberof oracle.v1.OracleResponsePacketData
                 * @instance
                 */
                OracleResponsePacketData.prototype.request_time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * OracleResponsePacketData resolve_time.
                 * @member {Long} resolve_time
                 * @memberof oracle.v1.OracleResponsePacketData
                 * @instance
                 */
                OracleResponsePacketData.prototype.resolve_time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * OracleResponsePacketData resolve_status.
                 * @member {oracle.v1.ResolveStatus} resolve_status
                 * @memberof oracle.v1.OracleResponsePacketData
                 * @instance
                 */
                OracleResponsePacketData.prototype.resolve_status = 0;
    
                /**
                 * OracleResponsePacketData result.
                 * @member {Uint8Array} result
                 * @memberof oracle.v1.OracleResponsePacketData
                 * @instance
                 */
                OracleResponsePacketData.prototype.result = $util.newBuffer([]);
    
                /**
                 * Encodes the specified OracleResponsePacketData message. Does not implicitly {@link oracle.v1.OracleResponsePacketData.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.OracleResponsePacketData
                 * @static
                 * @param {oracle.v1.IOracleResponsePacketData} message OracleResponsePacketData message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OracleResponsePacketData.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                    if (message.request_id != null && Object.hasOwnProperty.call(message, "request_id"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.request_id);
                    if (message.ans_count != null && Object.hasOwnProperty.call(message, "ans_count"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.ans_count);
                    if (message.request_time != null && Object.hasOwnProperty.call(message, "request_time"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int64(message.request_time);
                    if (message.resolve_time != null && Object.hasOwnProperty.call(message, "resolve_time"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.resolve_time);
                    if (message.resolve_status != null && Object.hasOwnProperty.call(message, "resolve_status"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.resolve_status);
                    if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.result);
                    return writer;
                };
    
                /**
                 * Encodes the specified OracleResponsePacketData message, length delimited. Does not implicitly {@link oracle.v1.OracleResponsePacketData.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.OracleResponsePacketData
                 * @static
                 * @param {oracle.v1.IOracleResponsePacketData} message OracleResponsePacketData message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OracleResponsePacketData.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OracleResponsePacketData message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.OracleResponsePacketData
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.OracleResponsePacketData} OracleResponsePacketData
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OracleResponsePacketData.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.OracleResponsePacketData();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.client_id = reader.string();
                            break;
                        case 2:
                            message.request_id = reader.uint64();
                            break;
                        case 3:
                            message.ans_count = reader.uint64();
                            break;
                        case 4:
                            message.request_time = reader.int64();
                            break;
                        case 5:
                            message.resolve_time = reader.int64();
                            break;
                        case 6:
                            message.resolve_status = reader.int32();
                            break;
                        case 7:
                            message.result = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OracleResponsePacketData message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.OracleResponsePacketData
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.OracleResponsePacketData} OracleResponsePacketData
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OracleResponsePacketData.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OracleResponsePacketData message.
                 * @function verify
                 * @memberof oracle.v1.OracleResponsePacketData
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OracleResponsePacketData.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.client_id != null && message.hasOwnProperty("client_id"))
                        if (!$util.isString(message.client_id))
                            return "client_id: string expected";
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        if (!$util.isInteger(message.request_id) && !(message.request_id && $util.isInteger(message.request_id.low) && $util.isInteger(message.request_id.high)))
                            return "request_id: integer|Long expected";
                    if (message.ans_count != null && message.hasOwnProperty("ans_count"))
                        if (!$util.isInteger(message.ans_count) && !(message.ans_count && $util.isInteger(message.ans_count.low) && $util.isInteger(message.ans_count.high)))
                            return "ans_count: integer|Long expected";
                    if (message.request_time != null && message.hasOwnProperty("request_time"))
                        if (!$util.isInteger(message.request_time) && !(message.request_time && $util.isInteger(message.request_time.low) && $util.isInteger(message.request_time.high)))
                            return "request_time: integer|Long expected";
                    if (message.resolve_time != null && message.hasOwnProperty("resolve_time"))
                        if (!$util.isInteger(message.resolve_time) && !(message.resolve_time && $util.isInteger(message.resolve_time.low) && $util.isInteger(message.resolve_time.high)))
                            return "resolve_time: integer|Long expected";
                    if (message.resolve_status != null && message.hasOwnProperty("resolve_status"))
                        switch (message.resolve_status) {
                        default:
                            return "resolve_status: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.result != null && message.hasOwnProperty("result"))
                        if (!(message.result && typeof message.result.length === "number" || $util.isString(message.result)))
                            return "result: buffer expected";
                    return null;
                };
    
                /**
                 * Creates an OracleResponsePacketData message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.OracleResponsePacketData
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.OracleResponsePacketData} OracleResponsePacketData
                 */
                OracleResponsePacketData.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.OracleResponsePacketData)
                        return object;
                    var message = new $root.oracle.v1.OracleResponsePacketData();
                    if (object.client_id != null)
                        message.client_id = String(object.client_id);
                    if (object.request_id != null)
                        if ($util.Long)
                            (message.request_id = $util.Long.fromValue(object.request_id)).unsigned = true;
                        else if (typeof object.request_id === "string")
                            message.request_id = parseInt(object.request_id, 10);
                        else if (typeof object.request_id === "number")
                            message.request_id = object.request_id;
                        else if (typeof object.request_id === "object")
                            message.request_id = new $util.LongBits(object.request_id.low >>> 0, object.request_id.high >>> 0).toNumber(true);
                    if (object.ans_count != null)
                        if ($util.Long)
                            (message.ans_count = $util.Long.fromValue(object.ans_count)).unsigned = true;
                        else if (typeof object.ans_count === "string")
                            message.ans_count = parseInt(object.ans_count, 10);
                        else if (typeof object.ans_count === "number")
                            message.ans_count = object.ans_count;
                        else if (typeof object.ans_count === "object")
                            message.ans_count = new $util.LongBits(object.ans_count.low >>> 0, object.ans_count.high >>> 0).toNumber(true);
                    if (object.request_time != null)
                        if ($util.Long)
                            (message.request_time = $util.Long.fromValue(object.request_time)).unsigned = false;
                        else if (typeof object.request_time === "string")
                            message.request_time = parseInt(object.request_time, 10);
                        else if (typeof object.request_time === "number")
                            message.request_time = object.request_time;
                        else if (typeof object.request_time === "object")
                            message.request_time = new $util.LongBits(object.request_time.low >>> 0, object.request_time.high >>> 0).toNumber();
                    if (object.resolve_time != null)
                        if ($util.Long)
                            (message.resolve_time = $util.Long.fromValue(object.resolve_time)).unsigned = false;
                        else if (typeof object.resolve_time === "string")
                            message.resolve_time = parseInt(object.resolve_time, 10);
                        else if (typeof object.resolve_time === "number")
                            message.resolve_time = object.resolve_time;
                        else if (typeof object.resolve_time === "object")
                            message.resolve_time = new $util.LongBits(object.resolve_time.low >>> 0, object.resolve_time.high >>> 0).toNumber();
                    switch (object.resolve_status) {
                    case "RESOLVE_STATUS_OPEN_UNSPECIFIED":
                    case 0:
                        message.resolve_status = 0;
                        break;
                    case "RESOLVE_STATUS_SUCCESS":
                    case 1:
                        message.resolve_status = 1;
                        break;
                    case "RESOLVE_STATUS_FAILURE":
                    case 2:
                        message.resolve_status = 2;
                        break;
                    case "RESOLVE_STATUS_EXPIRED":
                    case 3:
                        message.resolve_status = 3;
                        break;
                    }
                    if (object.result != null)
                        if (typeof object.result === "string")
                            $util.base64.decode(object.result, message.result = $util.newBuffer($util.base64.length(object.result)), 0);
                        else if (object.result.length)
                            message.result = object.result;
                    return message;
                };
    
                /**
                 * Creates a plain object from an OracleResponsePacketData message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.OracleResponsePacketData
                 * @static
                 * @param {oracle.v1.OracleResponsePacketData} message OracleResponsePacketData
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OracleResponsePacketData.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.client_id = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.request_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.request_id = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.ans_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.ans_count = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.request_time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.request_time = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.resolve_time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.resolve_time = options.longs === String ? "0" : 0;
                        object.resolve_status = options.enums === String ? "RESOLVE_STATUS_OPEN_UNSPECIFIED" : 0;
                        if (options.bytes === String)
                            object.result = "";
                        else {
                            object.result = [];
                            if (options.bytes !== Array)
                                object.result = $util.newBuffer(object.result);
                        }
                    }
                    if (message.client_id != null && message.hasOwnProperty("client_id"))
                        object.client_id = message.client_id;
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        if (typeof message.request_id === "number")
                            object.request_id = options.longs === String ? String(message.request_id) : message.request_id;
                        else
                            object.request_id = options.longs === String ? $util.Long.prototype.toString.call(message.request_id) : options.longs === Number ? new $util.LongBits(message.request_id.low >>> 0, message.request_id.high >>> 0).toNumber(true) : message.request_id;
                    if (message.ans_count != null && message.hasOwnProperty("ans_count"))
                        if (typeof message.ans_count === "number")
                            object.ans_count = options.longs === String ? String(message.ans_count) : message.ans_count;
                        else
                            object.ans_count = options.longs === String ? $util.Long.prototype.toString.call(message.ans_count) : options.longs === Number ? new $util.LongBits(message.ans_count.low >>> 0, message.ans_count.high >>> 0).toNumber(true) : message.ans_count;
                    if (message.request_time != null && message.hasOwnProperty("request_time"))
                        if (typeof message.request_time === "number")
                            object.request_time = options.longs === String ? String(message.request_time) : message.request_time;
                        else
                            object.request_time = options.longs === String ? $util.Long.prototype.toString.call(message.request_time) : options.longs === Number ? new $util.LongBits(message.request_time.low >>> 0, message.request_time.high >>> 0).toNumber() : message.request_time;
                    if (message.resolve_time != null && message.hasOwnProperty("resolve_time"))
                        if (typeof message.resolve_time === "number")
                            object.resolve_time = options.longs === String ? String(message.resolve_time) : message.resolve_time;
                        else
                            object.resolve_time = options.longs === String ? $util.Long.prototype.toString.call(message.resolve_time) : options.longs === Number ? new $util.LongBits(message.resolve_time.low >>> 0, message.resolve_time.high >>> 0).toNumber() : message.resolve_time;
                    if (message.resolve_status != null && message.hasOwnProperty("resolve_status"))
                        object.resolve_status = options.enums === String ? $root.oracle.v1.ResolveStatus[message.resolve_status] : message.resolve_status;
                    if (message.result != null && message.hasOwnProperty("result"))
                        object.result = options.bytes === String ? $util.base64.encode(message.result, 0, message.result.length) : options.bytes === Array ? Array.prototype.slice.call(message.result) : message.result;
                    return object;
                };
    
                /**
                 * Converts this OracleResponsePacketData to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.OracleResponsePacketData
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OracleResponsePacketData.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OracleResponsePacketData;
            })();
    
            v1.Result = (function() {
    
                /**
                 * Properties of a Result.
                 * @memberof oracle.v1
                 * @interface IResult
                 * @property {string|null} [client_id] Result client_id
                 * @property {Long|null} [oracle_script_id] Result oracle_script_id
                 * @property {Uint8Array|null} [calldata] Result calldata
                 * @property {Long|null} [ask_count] Result ask_count
                 * @property {Long|null} [min_count] Result min_count
                 * @property {Long|null} [request_id] Result request_id
                 * @property {Long|null} [ans_count] Result ans_count
                 * @property {Long|null} [request_time] Result request_time
                 * @property {Long|null} [resolve_time] Result resolve_time
                 * @property {oracle.v1.ResolveStatus|null} [resolve_status] Result resolve_status
                 * @property {Uint8Array|null} [result] Result result
                 */
    
                /**
                 * Constructs a new Result.
                 * @memberof oracle.v1
                 * @classdesc Represents a Result.
                 * @implements IResult
                 * @constructor
                 * @param {oracle.v1.IResult=} [properties] Properties to set
                 */
                function Result(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Result client_id.
                 * @member {string} client_id
                 * @memberof oracle.v1.Result
                 * @instance
                 */
                Result.prototype.client_id = "";
    
                /**
                 * Result oracle_script_id.
                 * @member {Long} oracle_script_id
                 * @memberof oracle.v1.Result
                 * @instance
                 */
                Result.prototype.oracle_script_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Result calldata.
                 * @member {Uint8Array} calldata
                 * @memberof oracle.v1.Result
                 * @instance
                 */
                Result.prototype.calldata = $util.newBuffer([]);
    
                /**
                 * Result ask_count.
                 * @member {Long} ask_count
                 * @memberof oracle.v1.Result
                 * @instance
                 */
                Result.prototype.ask_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Result min_count.
                 * @member {Long} min_count
                 * @memberof oracle.v1.Result
                 * @instance
                 */
                Result.prototype.min_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Result request_id.
                 * @member {Long} request_id
                 * @memberof oracle.v1.Result
                 * @instance
                 */
                Result.prototype.request_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Result ans_count.
                 * @member {Long} ans_count
                 * @memberof oracle.v1.Result
                 * @instance
                 */
                Result.prototype.ans_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Result request_time.
                 * @member {Long} request_time
                 * @memberof oracle.v1.Result
                 * @instance
                 */
                Result.prototype.request_time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Result resolve_time.
                 * @member {Long} resolve_time
                 * @memberof oracle.v1.Result
                 * @instance
                 */
                Result.prototype.resolve_time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Result resolve_status.
                 * @member {oracle.v1.ResolveStatus} resolve_status
                 * @memberof oracle.v1.Result
                 * @instance
                 */
                Result.prototype.resolve_status = 0;
    
                /**
                 * Result result.
                 * @member {Uint8Array} result
                 * @memberof oracle.v1.Result
                 * @instance
                 */
                Result.prototype.result = $util.newBuffer([]);
    
                /**
                 * Encodes the specified Result message. Does not implicitly {@link oracle.v1.Result.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.Result
                 * @static
                 * @param {oracle.v1.IResult} message Result message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Result.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                    if (message.oracle_script_id != null && Object.hasOwnProperty.call(message, "oracle_script_id"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.oracle_script_id);
                    if (message.calldata != null && Object.hasOwnProperty.call(message, "calldata"))
                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.calldata);
                    if (message.ask_count != null && Object.hasOwnProperty.call(message, "ask_count"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.ask_count);
                    if (message.min_count != null && Object.hasOwnProperty.call(message, "min_count"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.min_count);
                    if (message.request_id != null && Object.hasOwnProperty.call(message, "request_id"))
                        writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.request_id);
                    if (message.ans_count != null && Object.hasOwnProperty.call(message, "ans_count"))
                        writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.ans_count);
                    if (message.request_time != null && Object.hasOwnProperty.call(message, "request_time"))
                        writer.uint32(/* id 8, wireType 0 =*/64).int64(message.request_time);
                    if (message.resolve_time != null && Object.hasOwnProperty.call(message, "resolve_time"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int64(message.resolve_time);
                    if (message.resolve_status != null && Object.hasOwnProperty.call(message, "resolve_status"))
                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.resolve_status);
                    if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                        writer.uint32(/* id 11, wireType 2 =*/90).bytes(message.result);
                    return writer;
                };
    
                /**
                 * Encodes the specified Result message, length delimited. Does not implicitly {@link oracle.v1.Result.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.Result
                 * @static
                 * @param {oracle.v1.IResult} message Result message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Result.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Result message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.Result
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.Result} Result
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Result.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.Result();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.client_id = reader.string();
                            break;
                        case 2:
                            message.oracle_script_id = reader.uint64();
                            break;
                        case 3:
                            message.calldata = reader.bytes();
                            break;
                        case 4:
                            message.ask_count = reader.uint64();
                            break;
                        case 5:
                            message.min_count = reader.uint64();
                            break;
                        case 6:
                            message.request_id = reader.uint64();
                            break;
                        case 7:
                            message.ans_count = reader.uint64();
                            break;
                        case 8:
                            message.request_time = reader.int64();
                            break;
                        case 9:
                            message.resolve_time = reader.int64();
                            break;
                        case 10:
                            message.resolve_status = reader.int32();
                            break;
                        case 11:
                            message.result = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Result message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.Result
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.Result} Result
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Result.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Result message.
                 * @function verify
                 * @memberof oracle.v1.Result
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Result.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.client_id != null && message.hasOwnProperty("client_id"))
                        if (!$util.isString(message.client_id))
                            return "client_id: string expected";
                    if (message.oracle_script_id != null && message.hasOwnProperty("oracle_script_id"))
                        if (!$util.isInteger(message.oracle_script_id) && !(message.oracle_script_id && $util.isInteger(message.oracle_script_id.low) && $util.isInteger(message.oracle_script_id.high)))
                            return "oracle_script_id: integer|Long expected";
                    if (message.calldata != null && message.hasOwnProperty("calldata"))
                        if (!(message.calldata && typeof message.calldata.length === "number" || $util.isString(message.calldata)))
                            return "calldata: buffer expected";
                    if (message.ask_count != null && message.hasOwnProperty("ask_count"))
                        if (!$util.isInteger(message.ask_count) && !(message.ask_count && $util.isInteger(message.ask_count.low) && $util.isInteger(message.ask_count.high)))
                            return "ask_count: integer|Long expected";
                    if (message.min_count != null && message.hasOwnProperty("min_count"))
                        if (!$util.isInteger(message.min_count) && !(message.min_count && $util.isInteger(message.min_count.low) && $util.isInteger(message.min_count.high)))
                            return "min_count: integer|Long expected";
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        if (!$util.isInteger(message.request_id) && !(message.request_id && $util.isInteger(message.request_id.low) && $util.isInteger(message.request_id.high)))
                            return "request_id: integer|Long expected";
                    if (message.ans_count != null && message.hasOwnProperty("ans_count"))
                        if (!$util.isInteger(message.ans_count) && !(message.ans_count && $util.isInteger(message.ans_count.low) && $util.isInteger(message.ans_count.high)))
                            return "ans_count: integer|Long expected";
                    if (message.request_time != null && message.hasOwnProperty("request_time"))
                        if (!$util.isInteger(message.request_time) && !(message.request_time && $util.isInteger(message.request_time.low) && $util.isInteger(message.request_time.high)))
                            return "request_time: integer|Long expected";
                    if (message.resolve_time != null && message.hasOwnProperty("resolve_time"))
                        if (!$util.isInteger(message.resolve_time) && !(message.resolve_time && $util.isInteger(message.resolve_time.low) && $util.isInteger(message.resolve_time.high)))
                            return "resolve_time: integer|Long expected";
                    if (message.resolve_status != null && message.hasOwnProperty("resolve_status"))
                        switch (message.resolve_status) {
                        default:
                            return "resolve_status: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.result != null && message.hasOwnProperty("result"))
                        if (!(message.result && typeof message.result.length === "number" || $util.isString(message.result)))
                            return "result: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a Result message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.Result
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.Result} Result
                 */
                Result.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.Result)
                        return object;
                    var message = new $root.oracle.v1.Result();
                    if (object.client_id != null)
                        message.client_id = String(object.client_id);
                    if (object.oracle_script_id != null)
                        if ($util.Long)
                            (message.oracle_script_id = $util.Long.fromValue(object.oracle_script_id)).unsigned = true;
                        else if (typeof object.oracle_script_id === "string")
                            message.oracle_script_id = parseInt(object.oracle_script_id, 10);
                        else if (typeof object.oracle_script_id === "number")
                            message.oracle_script_id = object.oracle_script_id;
                        else if (typeof object.oracle_script_id === "object")
                            message.oracle_script_id = new $util.LongBits(object.oracle_script_id.low >>> 0, object.oracle_script_id.high >>> 0).toNumber(true);
                    if (object.calldata != null)
                        if (typeof object.calldata === "string")
                            $util.base64.decode(object.calldata, message.calldata = $util.newBuffer($util.base64.length(object.calldata)), 0);
                        else if (object.calldata.length)
                            message.calldata = object.calldata;
                    if (object.ask_count != null)
                        if ($util.Long)
                            (message.ask_count = $util.Long.fromValue(object.ask_count)).unsigned = true;
                        else if (typeof object.ask_count === "string")
                            message.ask_count = parseInt(object.ask_count, 10);
                        else if (typeof object.ask_count === "number")
                            message.ask_count = object.ask_count;
                        else if (typeof object.ask_count === "object")
                            message.ask_count = new $util.LongBits(object.ask_count.low >>> 0, object.ask_count.high >>> 0).toNumber(true);
                    if (object.min_count != null)
                        if ($util.Long)
                            (message.min_count = $util.Long.fromValue(object.min_count)).unsigned = true;
                        else if (typeof object.min_count === "string")
                            message.min_count = parseInt(object.min_count, 10);
                        else if (typeof object.min_count === "number")
                            message.min_count = object.min_count;
                        else if (typeof object.min_count === "object")
                            message.min_count = new $util.LongBits(object.min_count.low >>> 0, object.min_count.high >>> 0).toNumber(true);
                    if (object.request_id != null)
                        if ($util.Long)
                            (message.request_id = $util.Long.fromValue(object.request_id)).unsigned = true;
                        else if (typeof object.request_id === "string")
                            message.request_id = parseInt(object.request_id, 10);
                        else if (typeof object.request_id === "number")
                            message.request_id = object.request_id;
                        else if (typeof object.request_id === "object")
                            message.request_id = new $util.LongBits(object.request_id.low >>> 0, object.request_id.high >>> 0).toNumber(true);
                    if (object.ans_count != null)
                        if ($util.Long)
                            (message.ans_count = $util.Long.fromValue(object.ans_count)).unsigned = true;
                        else if (typeof object.ans_count === "string")
                            message.ans_count = parseInt(object.ans_count, 10);
                        else if (typeof object.ans_count === "number")
                            message.ans_count = object.ans_count;
                        else if (typeof object.ans_count === "object")
                            message.ans_count = new $util.LongBits(object.ans_count.low >>> 0, object.ans_count.high >>> 0).toNumber(true);
                    if (object.request_time != null)
                        if ($util.Long)
                            (message.request_time = $util.Long.fromValue(object.request_time)).unsigned = false;
                        else if (typeof object.request_time === "string")
                            message.request_time = parseInt(object.request_time, 10);
                        else if (typeof object.request_time === "number")
                            message.request_time = object.request_time;
                        else if (typeof object.request_time === "object")
                            message.request_time = new $util.LongBits(object.request_time.low >>> 0, object.request_time.high >>> 0).toNumber();
                    if (object.resolve_time != null)
                        if ($util.Long)
                            (message.resolve_time = $util.Long.fromValue(object.resolve_time)).unsigned = false;
                        else if (typeof object.resolve_time === "string")
                            message.resolve_time = parseInt(object.resolve_time, 10);
                        else if (typeof object.resolve_time === "number")
                            message.resolve_time = object.resolve_time;
                        else if (typeof object.resolve_time === "object")
                            message.resolve_time = new $util.LongBits(object.resolve_time.low >>> 0, object.resolve_time.high >>> 0).toNumber();
                    switch (object.resolve_status) {
                    case "RESOLVE_STATUS_OPEN_UNSPECIFIED":
                    case 0:
                        message.resolve_status = 0;
                        break;
                    case "RESOLVE_STATUS_SUCCESS":
                    case 1:
                        message.resolve_status = 1;
                        break;
                    case "RESOLVE_STATUS_FAILURE":
                    case 2:
                        message.resolve_status = 2;
                        break;
                    case "RESOLVE_STATUS_EXPIRED":
                    case 3:
                        message.resolve_status = 3;
                        break;
                    }
                    if (object.result != null)
                        if (typeof object.result === "string")
                            $util.base64.decode(object.result, message.result = $util.newBuffer($util.base64.length(object.result)), 0);
                        else if (object.result.length)
                            message.result = object.result;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Result message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.Result
                 * @static
                 * @param {oracle.v1.Result} message Result
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Result.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.client_id = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.oracle_script_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.oracle_script_id = options.longs === String ? "0" : 0;
                        if (options.bytes === String)
                            object.calldata = "";
                        else {
                            object.calldata = [];
                            if (options.bytes !== Array)
                                object.calldata = $util.newBuffer(object.calldata);
                        }
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.ask_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.ask_count = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.min_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.min_count = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.request_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.request_id = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.ans_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.ans_count = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.request_time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.request_time = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.resolve_time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.resolve_time = options.longs === String ? "0" : 0;
                        object.resolve_status = options.enums === String ? "RESOLVE_STATUS_OPEN_UNSPECIFIED" : 0;
                        if (options.bytes === String)
                            object.result = "";
                        else {
                            object.result = [];
                            if (options.bytes !== Array)
                                object.result = $util.newBuffer(object.result);
                        }
                    }
                    if (message.client_id != null && message.hasOwnProperty("client_id"))
                        object.client_id = message.client_id;
                    if (message.oracle_script_id != null && message.hasOwnProperty("oracle_script_id"))
                        if (typeof message.oracle_script_id === "number")
                            object.oracle_script_id = options.longs === String ? String(message.oracle_script_id) : message.oracle_script_id;
                        else
                            object.oracle_script_id = options.longs === String ? $util.Long.prototype.toString.call(message.oracle_script_id) : options.longs === Number ? new $util.LongBits(message.oracle_script_id.low >>> 0, message.oracle_script_id.high >>> 0).toNumber(true) : message.oracle_script_id;
                    if (message.calldata != null && message.hasOwnProperty("calldata"))
                        object.calldata = options.bytes === String ? $util.base64.encode(message.calldata, 0, message.calldata.length) : options.bytes === Array ? Array.prototype.slice.call(message.calldata) : message.calldata;
                    if (message.ask_count != null && message.hasOwnProperty("ask_count"))
                        if (typeof message.ask_count === "number")
                            object.ask_count = options.longs === String ? String(message.ask_count) : message.ask_count;
                        else
                            object.ask_count = options.longs === String ? $util.Long.prototype.toString.call(message.ask_count) : options.longs === Number ? new $util.LongBits(message.ask_count.low >>> 0, message.ask_count.high >>> 0).toNumber(true) : message.ask_count;
                    if (message.min_count != null && message.hasOwnProperty("min_count"))
                        if (typeof message.min_count === "number")
                            object.min_count = options.longs === String ? String(message.min_count) : message.min_count;
                        else
                            object.min_count = options.longs === String ? $util.Long.prototype.toString.call(message.min_count) : options.longs === Number ? new $util.LongBits(message.min_count.low >>> 0, message.min_count.high >>> 0).toNumber(true) : message.min_count;
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        if (typeof message.request_id === "number")
                            object.request_id = options.longs === String ? String(message.request_id) : message.request_id;
                        else
                            object.request_id = options.longs === String ? $util.Long.prototype.toString.call(message.request_id) : options.longs === Number ? new $util.LongBits(message.request_id.low >>> 0, message.request_id.high >>> 0).toNumber(true) : message.request_id;
                    if (message.ans_count != null && message.hasOwnProperty("ans_count"))
                        if (typeof message.ans_count === "number")
                            object.ans_count = options.longs === String ? String(message.ans_count) : message.ans_count;
                        else
                            object.ans_count = options.longs === String ? $util.Long.prototype.toString.call(message.ans_count) : options.longs === Number ? new $util.LongBits(message.ans_count.low >>> 0, message.ans_count.high >>> 0).toNumber(true) : message.ans_count;
                    if (message.request_time != null && message.hasOwnProperty("request_time"))
                        if (typeof message.request_time === "number")
                            object.request_time = options.longs === String ? String(message.request_time) : message.request_time;
                        else
                            object.request_time = options.longs === String ? $util.Long.prototype.toString.call(message.request_time) : options.longs === Number ? new $util.LongBits(message.request_time.low >>> 0, message.request_time.high >>> 0).toNumber() : message.request_time;
                    if (message.resolve_time != null && message.hasOwnProperty("resolve_time"))
                        if (typeof message.resolve_time === "number")
                            object.resolve_time = options.longs === String ? String(message.resolve_time) : message.resolve_time;
                        else
                            object.resolve_time = options.longs === String ? $util.Long.prototype.toString.call(message.resolve_time) : options.longs === Number ? new $util.LongBits(message.resolve_time.low >>> 0, message.resolve_time.high >>> 0).toNumber() : message.resolve_time;
                    if (message.resolve_status != null && message.hasOwnProperty("resolve_status"))
                        object.resolve_status = options.enums === String ? $root.oracle.v1.ResolveStatus[message.resolve_status] : message.resolve_status;
                    if (message.result != null && message.hasOwnProperty("result"))
                        object.result = options.bytes === String ? $util.base64.encode(message.result, 0, message.result.length) : options.bytes === Array ? Array.prototype.slice.call(message.result) : message.result;
                    return object;
                };
    
                /**
                 * Converts this Result to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.Result
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Result.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Result;
            })();
    
            v1.ValidatorStatus = (function() {
    
                /**
                 * Properties of a ValidatorStatus.
                 * @memberof oracle.v1
                 * @interface IValidatorStatus
                 * @property {boolean|null} [is_active] ValidatorStatus is_active
                 * @property {google.protobuf.ITimestamp|null} [since] ValidatorStatus since
                 */
    
                /**
                 * Constructs a new ValidatorStatus.
                 * @memberof oracle.v1
                 * @classdesc Represents a ValidatorStatus.
                 * @implements IValidatorStatus
                 * @constructor
                 * @param {oracle.v1.IValidatorStatus=} [properties] Properties to set
                 */
                function ValidatorStatus(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ValidatorStatus is_active.
                 * @member {boolean} is_active
                 * @memberof oracle.v1.ValidatorStatus
                 * @instance
                 */
                ValidatorStatus.prototype.is_active = false;
    
                /**
                 * ValidatorStatus since.
                 * @member {google.protobuf.ITimestamp|null|undefined} since
                 * @memberof oracle.v1.ValidatorStatus
                 * @instance
                 */
                ValidatorStatus.prototype.since = null;
    
                /**
                 * Encodes the specified ValidatorStatus message. Does not implicitly {@link oracle.v1.ValidatorStatus.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.ValidatorStatus
                 * @static
                 * @param {oracle.v1.IValidatorStatus} message ValidatorStatus message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorStatus.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.is_active != null && Object.hasOwnProperty.call(message, "is_active"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.is_active);
                    if (message.since != null && Object.hasOwnProperty.call(message, "since"))
                        $root.google.protobuf.Timestamp.encode(message.since, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ValidatorStatus message, length delimited. Does not implicitly {@link oracle.v1.ValidatorStatus.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.ValidatorStatus
                 * @static
                 * @param {oracle.v1.IValidatorStatus} message ValidatorStatus message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorStatus.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ValidatorStatus message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.ValidatorStatus
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.ValidatorStatus} ValidatorStatus
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorStatus.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.ValidatorStatus();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.is_active = reader.bool();
                            break;
                        case 2:
                            message.since = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ValidatorStatus message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.ValidatorStatus
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.ValidatorStatus} ValidatorStatus
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorStatus.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ValidatorStatus message.
                 * @function verify
                 * @memberof oracle.v1.ValidatorStatus
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ValidatorStatus.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.is_active != null && message.hasOwnProperty("is_active"))
                        if (typeof message.is_active !== "boolean")
                            return "is_active: boolean expected";
                    if (message.since != null && message.hasOwnProperty("since")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.since);
                        if (error)
                            return "since." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ValidatorStatus message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.ValidatorStatus
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.ValidatorStatus} ValidatorStatus
                 */
                ValidatorStatus.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.ValidatorStatus)
                        return object;
                    var message = new $root.oracle.v1.ValidatorStatus();
                    if (object.is_active != null)
                        message.is_active = Boolean(object.is_active);
                    if (object.since != null) {
                        if (typeof object.since !== "object")
                            throw TypeError(".oracle.v1.ValidatorStatus.since: object expected");
                        message.since = $root.google.protobuf.Timestamp.fromObject(object.since);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ValidatorStatus message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.ValidatorStatus
                 * @static
                 * @param {oracle.v1.ValidatorStatus} message ValidatorStatus
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ValidatorStatus.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.is_active = false;
                        object.since = null;
                    }
                    if (message.is_active != null && message.hasOwnProperty("is_active"))
                        object.is_active = message.is_active;
                    if (message.since != null && message.hasOwnProperty("since"))
                        object.since = $root.google.protobuf.Timestamp.toObject(message.since, options);
                    return object;
                };
    
                /**
                 * Converts this ValidatorStatus to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.ValidatorStatus
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ValidatorStatus.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ValidatorStatus;
            })();
    
            v1.ActiveValidator = (function() {
    
                /**
                 * Properties of an ActiveValidator.
                 * @memberof oracle.v1
                 * @interface IActiveValidator
                 * @property {string|null} [address] ActiveValidator address
                 * @property {Long|null} [power] ActiveValidator power
                 */
    
                /**
                 * Constructs a new ActiveValidator.
                 * @memberof oracle.v1
                 * @classdesc Represents an ActiveValidator.
                 * @implements IActiveValidator
                 * @constructor
                 * @param {oracle.v1.IActiveValidator=} [properties] Properties to set
                 */
                function ActiveValidator(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ActiveValidator address.
                 * @member {string} address
                 * @memberof oracle.v1.ActiveValidator
                 * @instance
                 */
                ActiveValidator.prototype.address = "";
    
                /**
                 * ActiveValidator power.
                 * @member {Long} power
                 * @memberof oracle.v1.ActiveValidator
                 * @instance
                 */
                ActiveValidator.prototype.power = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified ActiveValidator message. Does not implicitly {@link oracle.v1.ActiveValidator.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.ActiveValidator
                 * @static
                 * @param {oracle.v1.IActiveValidator} message ActiveValidator message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ActiveValidator.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    if (message.power != null && Object.hasOwnProperty.call(message, "power"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.power);
                    return writer;
                };
    
                /**
                 * Encodes the specified ActiveValidator message, length delimited. Does not implicitly {@link oracle.v1.ActiveValidator.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.ActiveValidator
                 * @static
                 * @param {oracle.v1.IActiveValidator} message ActiveValidator message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ActiveValidator.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an ActiveValidator message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.ActiveValidator
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.ActiveValidator} ActiveValidator
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ActiveValidator.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.ActiveValidator();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        case 2:
                            message.power = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an ActiveValidator message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.ActiveValidator
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.ActiveValidator} ActiveValidator
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ActiveValidator.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an ActiveValidator message.
                 * @function verify
                 * @memberof oracle.v1.ActiveValidator
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ActiveValidator.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    if (message.power != null && message.hasOwnProperty("power"))
                        if (!$util.isInteger(message.power) && !(message.power && $util.isInteger(message.power.low) && $util.isInteger(message.power.high)))
                            return "power: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates an ActiveValidator message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.ActiveValidator
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.ActiveValidator} ActiveValidator
                 */
                ActiveValidator.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.ActiveValidator)
                        return object;
                    var message = new $root.oracle.v1.ActiveValidator();
                    if (object.address != null)
                        message.address = String(object.address);
                    if (object.power != null)
                        if ($util.Long)
                            (message.power = $util.Long.fromValue(object.power)).unsigned = true;
                        else if (typeof object.power === "string")
                            message.power = parseInt(object.power, 10);
                        else if (typeof object.power === "number")
                            message.power = object.power;
                        else if (typeof object.power === "object")
                            message.power = new $util.LongBits(object.power.low >>> 0, object.power.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from an ActiveValidator message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.ActiveValidator
                 * @static
                 * @param {oracle.v1.ActiveValidator} message ActiveValidator
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ActiveValidator.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.address = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.power = options.longs === String ? "0" : 0;
                    }
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    if (message.power != null && message.hasOwnProperty("power"))
                        if (typeof message.power === "number")
                            object.power = options.longs === String ? String(message.power) : message.power;
                        else
                            object.power = options.longs === String ? $util.Long.prototype.toString.call(message.power) : options.longs === Number ? new $util.LongBits(message.power.low >>> 0, message.power.high >>> 0).toNumber(true) : message.power;
                    return object;
                };
    
                /**
                 * Converts this ActiveValidator to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.ActiveValidator
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ActiveValidator.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ActiveValidator;
            })();
    
            v1.Params = (function() {
    
                /**
                 * Properties of a Params.
                 * @memberof oracle.v1
                 * @interface IParams
                 * @property {Long|null} [max_raw_request_count] Params max_raw_request_count
                 * @property {Long|null} [max_ask_count] Params max_ask_count
                 * @property {Long|null} [max_calldata_size] Params max_calldata_size
                 * @property {Long|null} [max_report_data_size] Params max_report_data_size
                 * @property {Long|null} [expiration_block_count] Params expiration_block_count
                 * @property {Long|null} [base_owasm_gas] Params base_owasm_gas
                 * @property {Long|null} [per_validator_request_gas] Params per_validator_request_gas
                 * @property {Long|null} [sampling_try_count] Params sampling_try_count
                 * @property {Long|null} [oracle_reward_percentage] Params oracle_reward_percentage
                 * @property {Long|null} [inactive_penalty_duration] Params inactive_penalty_duration
                 * @property {boolean|null} [ibc_request_enabled] Params ibc_request_enabled
                 */
    
                /**
                 * Constructs a new Params.
                 * @memberof oracle.v1
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {oracle.v1.IParams=} [properties] Properties to set
                 */
                function Params(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Params max_raw_request_count.
                 * @member {Long} max_raw_request_count
                 * @memberof oracle.v1.Params
                 * @instance
                 */
                Params.prototype.max_raw_request_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Params max_ask_count.
                 * @member {Long} max_ask_count
                 * @memberof oracle.v1.Params
                 * @instance
                 */
                Params.prototype.max_ask_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Params max_calldata_size.
                 * @member {Long} max_calldata_size
                 * @memberof oracle.v1.Params
                 * @instance
                 */
                Params.prototype.max_calldata_size = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Params max_report_data_size.
                 * @member {Long} max_report_data_size
                 * @memberof oracle.v1.Params
                 * @instance
                 */
                Params.prototype.max_report_data_size = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Params expiration_block_count.
                 * @member {Long} expiration_block_count
                 * @memberof oracle.v1.Params
                 * @instance
                 */
                Params.prototype.expiration_block_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Params base_owasm_gas.
                 * @member {Long} base_owasm_gas
                 * @memberof oracle.v1.Params
                 * @instance
                 */
                Params.prototype.base_owasm_gas = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Params per_validator_request_gas.
                 * @member {Long} per_validator_request_gas
                 * @memberof oracle.v1.Params
                 * @instance
                 */
                Params.prototype.per_validator_request_gas = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Params sampling_try_count.
                 * @member {Long} sampling_try_count
                 * @memberof oracle.v1.Params
                 * @instance
                 */
                Params.prototype.sampling_try_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Params oracle_reward_percentage.
                 * @member {Long} oracle_reward_percentage
                 * @memberof oracle.v1.Params
                 * @instance
                 */
                Params.prototype.oracle_reward_percentage = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Params inactive_penalty_duration.
                 * @member {Long} inactive_penalty_duration
                 * @memberof oracle.v1.Params
                 * @instance
                 */
                Params.prototype.inactive_penalty_duration = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Params ibc_request_enabled.
                 * @member {boolean} ibc_request_enabled
                 * @memberof oracle.v1.Params
                 * @instance
                 */
                Params.prototype.ibc_request_enabled = false;
    
                /**
                 * Encodes the specified Params message. Does not implicitly {@link oracle.v1.Params.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.Params
                 * @static
                 * @param {oracle.v1.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.max_raw_request_count != null && Object.hasOwnProperty.call(message, "max_raw_request_count"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.max_raw_request_count);
                    if (message.max_ask_count != null && Object.hasOwnProperty.call(message, "max_ask_count"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.max_ask_count);
                    if (message.max_calldata_size != null && Object.hasOwnProperty.call(message, "max_calldata_size"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.max_calldata_size);
                    if (message.max_report_data_size != null && Object.hasOwnProperty.call(message, "max_report_data_size"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.max_report_data_size);
                    if (message.expiration_block_count != null && Object.hasOwnProperty.call(message, "expiration_block_count"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.expiration_block_count);
                    if (message.base_owasm_gas != null && Object.hasOwnProperty.call(message, "base_owasm_gas"))
                        writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.base_owasm_gas);
                    if (message.per_validator_request_gas != null && Object.hasOwnProperty.call(message, "per_validator_request_gas"))
                        writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.per_validator_request_gas);
                    if (message.sampling_try_count != null && Object.hasOwnProperty.call(message, "sampling_try_count"))
                        writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.sampling_try_count);
                    if (message.oracle_reward_percentage != null && Object.hasOwnProperty.call(message, "oracle_reward_percentage"))
                        writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.oracle_reward_percentage);
                    if (message.inactive_penalty_duration != null && Object.hasOwnProperty.call(message, "inactive_penalty_duration"))
                        writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.inactive_penalty_duration);
                    if (message.ibc_request_enabled != null && Object.hasOwnProperty.call(message, "ibc_request_enabled"))
                        writer.uint32(/* id 11, wireType 0 =*/88).bool(message.ibc_request_enabled);
                    return writer;
                };
    
                /**
                 * Encodes the specified Params message, length delimited. Does not implicitly {@link oracle.v1.Params.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.Params
                 * @static
                 * @param {oracle.v1.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.Params();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.max_raw_request_count = reader.uint64();
                            break;
                        case 2:
                            message.max_ask_count = reader.uint64();
                            break;
                        case 3:
                            message.max_calldata_size = reader.uint64();
                            break;
                        case 4:
                            message.max_report_data_size = reader.uint64();
                            break;
                        case 5:
                            message.expiration_block_count = reader.uint64();
                            break;
                        case 6:
                            message.base_owasm_gas = reader.uint64();
                            break;
                        case 7:
                            message.per_validator_request_gas = reader.uint64();
                            break;
                        case 8:
                            message.sampling_try_count = reader.uint64();
                            break;
                        case 9:
                            message.oracle_reward_percentage = reader.uint64();
                            break;
                        case 10:
                            message.inactive_penalty_duration = reader.uint64();
                            break;
                        case 11:
                            message.ibc_request_enabled = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Params message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Params message.
                 * @function verify
                 * @memberof oracle.v1.Params
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Params.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.max_raw_request_count != null && message.hasOwnProperty("max_raw_request_count"))
                        if (!$util.isInteger(message.max_raw_request_count) && !(message.max_raw_request_count && $util.isInteger(message.max_raw_request_count.low) && $util.isInteger(message.max_raw_request_count.high)))
                            return "max_raw_request_count: integer|Long expected";
                    if (message.max_ask_count != null && message.hasOwnProperty("max_ask_count"))
                        if (!$util.isInteger(message.max_ask_count) && !(message.max_ask_count && $util.isInteger(message.max_ask_count.low) && $util.isInteger(message.max_ask_count.high)))
                            return "max_ask_count: integer|Long expected";
                    if (message.max_calldata_size != null && message.hasOwnProperty("max_calldata_size"))
                        if (!$util.isInteger(message.max_calldata_size) && !(message.max_calldata_size && $util.isInteger(message.max_calldata_size.low) && $util.isInteger(message.max_calldata_size.high)))
                            return "max_calldata_size: integer|Long expected";
                    if (message.max_report_data_size != null && message.hasOwnProperty("max_report_data_size"))
                        if (!$util.isInteger(message.max_report_data_size) && !(message.max_report_data_size && $util.isInteger(message.max_report_data_size.low) && $util.isInteger(message.max_report_data_size.high)))
                            return "max_report_data_size: integer|Long expected";
                    if (message.expiration_block_count != null && message.hasOwnProperty("expiration_block_count"))
                        if (!$util.isInteger(message.expiration_block_count) && !(message.expiration_block_count && $util.isInteger(message.expiration_block_count.low) && $util.isInteger(message.expiration_block_count.high)))
                            return "expiration_block_count: integer|Long expected";
                    if (message.base_owasm_gas != null && message.hasOwnProperty("base_owasm_gas"))
                        if (!$util.isInteger(message.base_owasm_gas) && !(message.base_owasm_gas && $util.isInteger(message.base_owasm_gas.low) && $util.isInteger(message.base_owasm_gas.high)))
                            return "base_owasm_gas: integer|Long expected";
                    if (message.per_validator_request_gas != null && message.hasOwnProperty("per_validator_request_gas"))
                        if (!$util.isInteger(message.per_validator_request_gas) && !(message.per_validator_request_gas && $util.isInteger(message.per_validator_request_gas.low) && $util.isInteger(message.per_validator_request_gas.high)))
                            return "per_validator_request_gas: integer|Long expected";
                    if (message.sampling_try_count != null && message.hasOwnProperty("sampling_try_count"))
                        if (!$util.isInteger(message.sampling_try_count) && !(message.sampling_try_count && $util.isInteger(message.sampling_try_count.low) && $util.isInteger(message.sampling_try_count.high)))
                            return "sampling_try_count: integer|Long expected";
                    if (message.oracle_reward_percentage != null && message.hasOwnProperty("oracle_reward_percentage"))
                        if (!$util.isInteger(message.oracle_reward_percentage) && !(message.oracle_reward_percentage && $util.isInteger(message.oracle_reward_percentage.low) && $util.isInteger(message.oracle_reward_percentage.high)))
                            return "oracle_reward_percentage: integer|Long expected";
                    if (message.inactive_penalty_duration != null && message.hasOwnProperty("inactive_penalty_duration"))
                        if (!$util.isInteger(message.inactive_penalty_duration) && !(message.inactive_penalty_duration && $util.isInteger(message.inactive_penalty_duration.low) && $util.isInteger(message.inactive_penalty_duration.high)))
                            return "inactive_penalty_duration: integer|Long expected";
                    if (message.ibc_request_enabled != null && message.hasOwnProperty("ibc_request_enabled"))
                        if (typeof message.ibc_request_enabled !== "boolean")
                            return "ibc_request_enabled: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Params message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.Params
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.Params} Params
                 */
                Params.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.Params)
                        return object;
                    var message = new $root.oracle.v1.Params();
                    if (object.max_raw_request_count != null)
                        if ($util.Long)
                            (message.max_raw_request_count = $util.Long.fromValue(object.max_raw_request_count)).unsigned = true;
                        else if (typeof object.max_raw_request_count === "string")
                            message.max_raw_request_count = parseInt(object.max_raw_request_count, 10);
                        else if (typeof object.max_raw_request_count === "number")
                            message.max_raw_request_count = object.max_raw_request_count;
                        else if (typeof object.max_raw_request_count === "object")
                            message.max_raw_request_count = new $util.LongBits(object.max_raw_request_count.low >>> 0, object.max_raw_request_count.high >>> 0).toNumber(true);
                    if (object.max_ask_count != null)
                        if ($util.Long)
                            (message.max_ask_count = $util.Long.fromValue(object.max_ask_count)).unsigned = true;
                        else if (typeof object.max_ask_count === "string")
                            message.max_ask_count = parseInt(object.max_ask_count, 10);
                        else if (typeof object.max_ask_count === "number")
                            message.max_ask_count = object.max_ask_count;
                        else if (typeof object.max_ask_count === "object")
                            message.max_ask_count = new $util.LongBits(object.max_ask_count.low >>> 0, object.max_ask_count.high >>> 0).toNumber(true);
                    if (object.max_calldata_size != null)
                        if ($util.Long)
                            (message.max_calldata_size = $util.Long.fromValue(object.max_calldata_size)).unsigned = true;
                        else if (typeof object.max_calldata_size === "string")
                            message.max_calldata_size = parseInt(object.max_calldata_size, 10);
                        else if (typeof object.max_calldata_size === "number")
                            message.max_calldata_size = object.max_calldata_size;
                        else if (typeof object.max_calldata_size === "object")
                            message.max_calldata_size = new $util.LongBits(object.max_calldata_size.low >>> 0, object.max_calldata_size.high >>> 0).toNumber(true);
                    if (object.max_report_data_size != null)
                        if ($util.Long)
                            (message.max_report_data_size = $util.Long.fromValue(object.max_report_data_size)).unsigned = true;
                        else if (typeof object.max_report_data_size === "string")
                            message.max_report_data_size = parseInt(object.max_report_data_size, 10);
                        else if (typeof object.max_report_data_size === "number")
                            message.max_report_data_size = object.max_report_data_size;
                        else if (typeof object.max_report_data_size === "object")
                            message.max_report_data_size = new $util.LongBits(object.max_report_data_size.low >>> 0, object.max_report_data_size.high >>> 0).toNumber(true);
                    if (object.expiration_block_count != null)
                        if ($util.Long)
                            (message.expiration_block_count = $util.Long.fromValue(object.expiration_block_count)).unsigned = true;
                        else if (typeof object.expiration_block_count === "string")
                            message.expiration_block_count = parseInt(object.expiration_block_count, 10);
                        else if (typeof object.expiration_block_count === "number")
                            message.expiration_block_count = object.expiration_block_count;
                        else if (typeof object.expiration_block_count === "object")
                            message.expiration_block_count = new $util.LongBits(object.expiration_block_count.low >>> 0, object.expiration_block_count.high >>> 0).toNumber(true);
                    if (object.base_owasm_gas != null)
                        if ($util.Long)
                            (message.base_owasm_gas = $util.Long.fromValue(object.base_owasm_gas)).unsigned = true;
                        else if (typeof object.base_owasm_gas === "string")
                            message.base_owasm_gas = parseInt(object.base_owasm_gas, 10);
                        else if (typeof object.base_owasm_gas === "number")
                            message.base_owasm_gas = object.base_owasm_gas;
                        else if (typeof object.base_owasm_gas === "object")
                            message.base_owasm_gas = new $util.LongBits(object.base_owasm_gas.low >>> 0, object.base_owasm_gas.high >>> 0).toNumber(true);
                    if (object.per_validator_request_gas != null)
                        if ($util.Long)
                            (message.per_validator_request_gas = $util.Long.fromValue(object.per_validator_request_gas)).unsigned = true;
                        else if (typeof object.per_validator_request_gas === "string")
                            message.per_validator_request_gas = parseInt(object.per_validator_request_gas, 10);
                        else if (typeof object.per_validator_request_gas === "number")
                            message.per_validator_request_gas = object.per_validator_request_gas;
                        else if (typeof object.per_validator_request_gas === "object")
                            message.per_validator_request_gas = new $util.LongBits(object.per_validator_request_gas.low >>> 0, object.per_validator_request_gas.high >>> 0).toNumber(true);
                    if (object.sampling_try_count != null)
                        if ($util.Long)
                            (message.sampling_try_count = $util.Long.fromValue(object.sampling_try_count)).unsigned = true;
                        else if (typeof object.sampling_try_count === "string")
                            message.sampling_try_count = parseInt(object.sampling_try_count, 10);
                        else if (typeof object.sampling_try_count === "number")
                            message.sampling_try_count = object.sampling_try_count;
                        else if (typeof object.sampling_try_count === "object")
                            message.sampling_try_count = new $util.LongBits(object.sampling_try_count.low >>> 0, object.sampling_try_count.high >>> 0).toNumber(true);
                    if (object.oracle_reward_percentage != null)
                        if ($util.Long)
                            (message.oracle_reward_percentage = $util.Long.fromValue(object.oracle_reward_percentage)).unsigned = true;
                        else if (typeof object.oracle_reward_percentage === "string")
                            message.oracle_reward_percentage = parseInt(object.oracle_reward_percentage, 10);
                        else if (typeof object.oracle_reward_percentage === "number")
                            message.oracle_reward_percentage = object.oracle_reward_percentage;
                        else if (typeof object.oracle_reward_percentage === "object")
                            message.oracle_reward_percentage = new $util.LongBits(object.oracle_reward_percentage.low >>> 0, object.oracle_reward_percentage.high >>> 0).toNumber(true);
                    if (object.inactive_penalty_duration != null)
                        if ($util.Long)
                            (message.inactive_penalty_duration = $util.Long.fromValue(object.inactive_penalty_duration)).unsigned = true;
                        else if (typeof object.inactive_penalty_duration === "string")
                            message.inactive_penalty_duration = parseInt(object.inactive_penalty_duration, 10);
                        else if (typeof object.inactive_penalty_duration === "number")
                            message.inactive_penalty_duration = object.inactive_penalty_duration;
                        else if (typeof object.inactive_penalty_duration === "object")
                            message.inactive_penalty_duration = new $util.LongBits(object.inactive_penalty_duration.low >>> 0, object.inactive_penalty_duration.high >>> 0).toNumber(true);
                    if (object.ibc_request_enabled != null)
                        message.ibc_request_enabled = Boolean(object.ibc_request_enabled);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Params message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.Params
                 * @static
                 * @param {oracle.v1.Params} message Params
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Params.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.max_raw_request_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.max_raw_request_count = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.max_ask_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.max_ask_count = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.max_calldata_size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.max_calldata_size = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.max_report_data_size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.max_report_data_size = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.expiration_block_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.expiration_block_count = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.base_owasm_gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.base_owasm_gas = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.per_validator_request_gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.per_validator_request_gas = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.sampling_try_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.sampling_try_count = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.oracle_reward_percentage = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.oracle_reward_percentage = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.inactive_penalty_duration = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.inactive_penalty_duration = options.longs === String ? "0" : 0;
                        object.ibc_request_enabled = false;
                    }
                    if (message.max_raw_request_count != null && message.hasOwnProperty("max_raw_request_count"))
                        if (typeof message.max_raw_request_count === "number")
                            object.max_raw_request_count = options.longs === String ? String(message.max_raw_request_count) : message.max_raw_request_count;
                        else
                            object.max_raw_request_count = options.longs === String ? $util.Long.prototype.toString.call(message.max_raw_request_count) : options.longs === Number ? new $util.LongBits(message.max_raw_request_count.low >>> 0, message.max_raw_request_count.high >>> 0).toNumber(true) : message.max_raw_request_count;
                    if (message.max_ask_count != null && message.hasOwnProperty("max_ask_count"))
                        if (typeof message.max_ask_count === "number")
                            object.max_ask_count = options.longs === String ? String(message.max_ask_count) : message.max_ask_count;
                        else
                            object.max_ask_count = options.longs === String ? $util.Long.prototype.toString.call(message.max_ask_count) : options.longs === Number ? new $util.LongBits(message.max_ask_count.low >>> 0, message.max_ask_count.high >>> 0).toNumber(true) : message.max_ask_count;
                    if (message.max_calldata_size != null && message.hasOwnProperty("max_calldata_size"))
                        if (typeof message.max_calldata_size === "number")
                            object.max_calldata_size = options.longs === String ? String(message.max_calldata_size) : message.max_calldata_size;
                        else
                            object.max_calldata_size = options.longs === String ? $util.Long.prototype.toString.call(message.max_calldata_size) : options.longs === Number ? new $util.LongBits(message.max_calldata_size.low >>> 0, message.max_calldata_size.high >>> 0).toNumber(true) : message.max_calldata_size;
                    if (message.max_report_data_size != null && message.hasOwnProperty("max_report_data_size"))
                        if (typeof message.max_report_data_size === "number")
                            object.max_report_data_size = options.longs === String ? String(message.max_report_data_size) : message.max_report_data_size;
                        else
                            object.max_report_data_size = options.longs === String ? $util.Long.prototype.toString.call(message.max_report_data_size) : options.longs === Number ? new $util.LongBits(message.max_report_data_size.low >>> 0, message.max_report_data_size.high >>> 0).toNumber(true) : message.max_report_data_size;
                    if (message.expiration_block_count != null && message.hasOwnProperty("expiration_block_count"))
                        if (typeof message.expiration_block_count === "number")
                            object.expiration_block_count = options.longs === String ? String(message.expiration_block_count) : message.expiration_block_count;
                        else
                            object.expiration_block_count = options.longs === String ? $util.Long.prototype.toString.call(message.expiration_block_count) : options.longs === Number ? new $util.LongBits(message.expiration_block_count.low >>> 0, message.expiration_block_count.high >>> 0).toNumber(true) : message.expiration_block_count;
                    if (message.base_owasm_gas != null && message.hasOwnProperty("base_owasm_gas"))
                        if (typeof message.base_owasm_gas === "number")
                            object.base_owasm_gas = options.longs === String ? String(message.base_owasm_gas) : message.base_owasm_gas;
                        else
                            object.base_owasm_gas = options.longs === String ? $util.Long.prototype.toString.call(message.base_owasm_gas) : options.longs === Number ? new $util.LongBits(message.base_owasm_gas.low >>> 0, message.base_owasm_gas.high >>> 0).toNumber(true) : message.base_owasm_gas;
                    if (message.per_validator_request_gas != null && message.hasOwnProperty("per_validator_request_gas"))
                        if (typeof message.per_validator_request_gas === "number")
                            object.per_validator_request_gas = options.longs === String ? String(message.per_validator_request_gas) : message.per_validator_request_gas;
                        else
                            object.per_validator_request_gas = options.longs === String ? $util.Long.prototype.toString.call(message.per_validator_request_gas) : options.longs === Number ? new $util.LongBits(message.per_validator_request_gas.low >>> 0, message.per_validator_request_gas.high >>> 0).toNumber(true) : message.per_validator_request_gas;
                    if (message.sampling_try_count != null && message.hasOwnProperty("sampling_try_count"))
                        if (typeof message.sampling_try_count === "number")
                            object.sampling_try_count = options.longs === String ? String(message.sampling_try_count) : message.sampling_try_count;
                        else
                            object.sampling_try_count = options.longs === String ? $util.Long.prototype.toString.call(message.sampling_try_count) : options.longs === Number ? new $util.LongBits(message.sampling_try_count.low >>> 0, message.sampling_try_count.high >>> 0).toNumber(true) : message.sampling_try_count;
                    if (message.oracle_reward_percentage != null && message.hasOwnProperty("oracle_reward_percentage"))
                        if (typeof message.oracle_reward_percentage === "number")
                            object.oracle_reward_percentage = options.longs === String ? String(message.oracle_reward_percentage) : message.oracle_reward_percentage;
                        else
                            object.oracle_reward_percentage = options.longs === String ? $util.Long.prototype.toString.call(message.oracle_reward_percentage) : options.longs === Number ? new $util.LongBits(message.oracle_reward_percentage.low >>> 0, message.oracle_reward_percentage.high >>> 0).toNumber(true) : message.oracle_reward_percentage;
                    if (message.inactive_penalty_duration != null && message.hasOwnProperty("inactive_penalty_duration"))
                        if (typeof message.inactive_penalty_duration === "number")
                            object.inactive_penalty_duration = options.longs === String ? String(message.inactive_penalty_duration) : message.inactive_penalty_duration;
                        else
                            object.inactive_penalty_duration = options.longs === String ? $util.Long.prototype.toString.call(message.inactive_penalty_duration) : options.longs === Number ? new $util.LongBits(message.inactive_penalty_duration.low >>> 0, message.inactive_penalty_duration.high >>> 0).toNumber(true) : message.inactive_penalty_duration;
                    if (message.ibc_request_enabled != null && message.hasOwnProperty("ibc_request_enabled"))
                        object.ibc_request_enabled = message.ibc_request_enabled;
                    return object;
                };
    
                /**
                 * Converts this Params to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.Params
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Params.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Params;
            })();
    
            v1.PendingResolveList = (function() {
    
                /**
                 * Properties of a PendingResolveList.
                 * @memberof oracle.v1
                 * @interface IPendingResolveList
                 * @property {Array.<Long>|null} [request_ids] PendingResolveList request_ids
                 */
    
                /**
                 * Constructs a new PendingResolveList.
                 * @memberof oracle.v1
                 * @classdesc Represents a PendingResolveList.
                 * @implements IPendingResolveList
                 * @constructor
                 * @param {oracle.v1.IPendingResolveList=} [properties] Properties to set
                 */
                function PendingResolveList(properties) {
                    this.request_ids = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PendingResolveList request_ids.
                 * @member {Array.<Long>} request_ids
                 * @memberof oracle.v1.PendingResolveList
                 * @instance
                 */
                PendingResolveList.prototype.request_ids = $util.emptyArray;
    
                /**
                 * Encodes the specified PendingResolveList message. Does not implicitly {@link oracle.v1.PendingResolveList.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.PendingResolveList
                 * @static
                 * @param {oracle.v1.IPendingResolveList} message PendingResolveList message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PendingResolveList.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request_ids != null && message.request_ids.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (var i = 0; i < message.request_ids.length; ++i)
                            writer.uint64(message.request_ids[i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified PendingResolveList message, length delimited. Does not implicitly {@link oracle.v1.PendingResolveList.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.PendingResolveList
                 * @static
                 * @param {oracle.v1.IPendingResolveList} message PendingResolveList message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PendingResolveList.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PendingResolveList message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.PendingResolveList
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.PendingResolveList} PendingResolveList
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PendingResolveList.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.PendingResolveList();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.request_ids && message.request_ids.length))
                                message.request_ids = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.request_ids.push(reader.uint64());
                            } else
                                message.request_ids.push(reader.uint64());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PendingResolveList message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.PendingResolveList
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.PendingResolveList} PendingResolveList
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PendingResolveList.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PendingResolveList message.
                 * @function verify
                 * @memberof oracle.v1.PendingResolveList
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PendingResolveList.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request_ids != null && message.hasOwnProperty("request_ids")) {
                        if (!Array.isArray(message.request_ids))
                            return "request_ids: array expected";
                        for (var i = 0; i < message.request_ids.length; ++i)
                            if (!$util.isInteger(message.request_ids[i]) && !(message.request_ids[i] && $util.isInteger(message.request_ids[i].low) && $util.isInteger(message.request_ids[i].high)))
                                return "request_ids: integer|Long[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a PendingResolveList message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.PendingResolveList
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.PendingResolveList} PendingResolveList
                 */
                PendingResolveList.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.PendingResolveList)
                        return object;
                    var message = new $root.oracle.v1.PendingResolveList();
                    if (object.request_ids) {
                        if (!Array.isArray(object.request_ids))
                            throw TypeError(".oracle.v1.PendingResolveList.request_ids: array expected");
                        message.request_ids = [];
                        for (var i = 0; i < object.request_ids.length; ++i)
                            if ($util.Long)
                                (message.request_ids[i] = $util.Long.fromValue(object.request_ids[i])).unsigned = true;
                            else if (typeof object.request_ids[i] === "string")
                                message.request_ids[i] = parseInt(object.request_ids[i], 10);
                            else if (typeof object.request_ids[i] === "number")
                                message.request_ids[i] = object.request_ids[i];
                            else if (typeof object.request_ids[i] === "object")
                                message.request_ids[i] = new $util.LongBits(object.request_ids[i].low >>> 0, object.request_ids[i].high >>> 0).toNumber(true);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a PendingResolveList message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.PendingResolveList
                 * @static
                 * @param {oracle.v1.PendingResolveList} message PendingResolveList
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PendingResolveList.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.request_ids = [];
                    if (message.request_ids && message.request_ids.length) {
                        object.request_ids = [];
                        for (var j = 0; j < message.request_ids.length; ++j)
                            if (typeof message.request_ids[j] === "number")
                                object.request_ids[j] = options.longs === String ? String(message.request_ids[j]) : message.request_ids[j];
                            else
                                object.request_ids[j] = options.longs === String ? $util.Long.prototype.toString.call(message.request_ids[j]) : options.longs === Number ? new $util.LongBits(message.request_ids[j].low >>> 0, message.request_ids[j].high >>> 0).toNumber(true) : message.request_ids[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this PendingResolveList to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.PendingResolveList
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PendingResolveList.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return PendingResolveList;
            })();
    
            v1.IBCChannel = (function() {
    
                /**
                 * Properties of a IBCChannel.
                 * @memberof oracle.v1
                 * @interface IIBCChannel
                 * @property {string|null} [port_id] IBCChannel port_id
                 * @property {string|null} [channel_id] IBCChannel channel_id
                 */
    
                /**
                 * Constructs a new IBCChannel.
                 * @memberof oracle.v1
                 * @classdesc Represents a IBCChannel.
                 * @implements IIBCChannel
                 * @constructor
                 * @param {oracle.v1.IIBCChannel=} [properties] Properties to set
                 */
                function IBCChannel(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * IBCChannel port_id.
                 * @member {string} port_id
                 * @memberof oracle.v1.IBCChannel
                 * @instance
                 */
                IBCChannel.prototype.port_id = "";
    
                /**
                 * IBCChannel channel_id.
                 * @member {string} channel_id
                 * @memberof oracle.v1.IBCChannel
                 * @instance
                 */
                IBCChannel.prototype.channel_id = "";
    
                /**
                 * Encodes the specified IBCChannel message. Does not implicitly {@link oracle.v1.IBCChannel.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.IBCChannel
                 * @static
                 * @param {oracle.v1.IIBCChannel} message IBCChannel message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                IBCChannel.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                    if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                    return writer;
                };
    
                /**
                 * Encodes the specified IBCChannel message, length delimited. Does not implicitly {@link oracle.v1.IBCChannel.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.IBCChannel
                 * @static
                 * @param {oracle.v1.IIBCChannel} message IBCChannel message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                IBCChannel.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a IBCChannel message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.IBCChannel
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.IBCChannel} IBCChannel
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                IBCChannel.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.IBCChannel();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.port_id = reader.string();
                            break;
                        case 2:
                            message.channel_id = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a IBCChannel message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.IBCChannel
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.IBCChannel} IBCChannel
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                IBCChannel.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a IBCChannel message.
                 * @function verify
                 * @memberof oracle.v1.IBCChannel
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                IBCChannel.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.port_id != null && message.hasOwnProperty("port_id"))
                        if (!$util.isString(message.port_id))
                            return "port_id: string expected";
                    if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                        if (!$util.isString(message.channel_id))
                            return "channel_id: string expected";
                    return null;
                };
    
                /**
                 * Creates a IBCChannel message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.IBCChannel
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.IBCChannel} IBCChannel
                 */
                IBCChannel.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.IBCChannel)
                        return object;
                    var message = new $root.oracle.v1.IBCChannel();
                    if (object.port_id != null)
                        message.port_id = String(object.port_id);
                    if (object.channel_id != null)
                        message.channel_id = String(object.channel_id);
                    return message;
                };
    
                /**
                 * Creates a plain object from a IBCChannel message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.IBCChannel
                 * @static
                 * @param {oracle.v1.IBCChannel} message IBCChannel
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                IBCChannel.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.port_id = "";
                        object.channel_id = "";
                    }
                    if (message.port_id != null && message.hasOwnProperty("port_id"))
                        object.port_id = message.port_id;
                    if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                        object.channel_id = message.channel_id;
                    return object;
                };
    
                /**
                 * Converts this IBCChannel to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.IBCChannel
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                IBCChannel.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return IBCChannel;
            })();
    
            v1.RequestVerification = (function() {
    
                /**
                 * Properties of a RequestVerification.
                 * @memberof oracle.v1
                 * @interface IRequestVerification
                 * @property {string|null} [chain_id] RequestVerification chain_id
                 * @property {string|null} [validator] RequestVerification validator
                 * @property {Long|null} [request_id] RequestVerification request_id
                 * @property {Long|null} [external_id] RequestVerification external_id
                 */
    
                /**
                 * Constructs a new RequestVerification.
                 * @memberof oracle.v1
                 * @classdesc Represents a RequestVerification.
                 * @implements IRequestVerification
                 * @constructor
                 * @param {oracle.v1.IRequestVerification=} [properties] Properties to set
                 */
                function RequestVerification(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RequestVerification chain_id.
                 * @member {string} chain_id
                 * @memberof oracle.v1.RequestVerification
                 * @instance
                 */
                RequestVerification.prototype.chain_id = "";
    
                /**
                 * RequestVerification validator.
                 * @member {string} validator
                 * @memberof oracle.v1.RequestVerification
                 * @instance
                 */
                RequestVerification.prototype.validator = "";
    
                /**
                 * RequestVerification request_id.
                 * @member {Long} request_id
                 * @memberof oracle.v1.RequestVerification
                 * @instance
                 */
                RequestVerification.prototype.request_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * RequestVerification external_id.
                 * @member {Long} external_id
                 * @memberof oracle.v1.RequestVerification
                 * @instance
                 */
                RequestVerification.prototype.external_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified RequestVerification message. Does not implicitly {@link oracle.v1.RequestVerification.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.RequestVerification
                 * @static
                 * @param {oracle.v1.IRequestVerification} message RequestVerification message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestVerification.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.chain_id);
                    if (message.validator != null && Object.hasOwnProperty.call(message, "validator"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.validator);
                    if (message.request_id != null && Object.hasOwnProperty.call(message, "request_id"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.request_id);
                    if (message.external_id != null && Object.hasOwnProperty.call(message, "external_id"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.external_id);
                    return writer;
                };
    
                /**
                 * Encodes the specified RequestVerification message, length delimited. Does not implicitly {@link oracle.v1.RequestVerification.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.RequestVerification
                 * @static
                 * @param {oracle.v1.IRequestVerification} message RequestVerification message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestVerification.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RequestVerification message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.RequestVerification
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.RequestVerification} RequestVerification
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestVerification.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.RequestVerification();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.chain_id = reader.string();
                            break;
                        case 2:
                            message.validator = reader.string();
                            break;
                        case 3:
                            message.request_id = reader.uint64();
                            break;
                        case 4:
                            message.external_id = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RequestVerification message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.RequestVerification
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.RequestVerification} RequestVerification
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestVerification.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RequestVerification message.
                 * @function verify
                 * @memberof oracle.v1.RequestVerification
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestVerification.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                        if (!$util.isString(message.chain_id))
                            return "chain_id: string expected";
                    if (message.validator != null && message.hasOwnProperty("validator"))
                        if (!$util.isString(message.validator))
                            return "validator: string expected";
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        if (!$util.isInteger(message.request_id) && !(message.request_id && $util.isInteger(message.request_id.low) && $util.isInteger(message.request_id.high)))
                            return "request_id: integer|Long expected";
                    if (message.external_id != null && message.hasOwnProperty("external_id"))
                        if (!$util.isInteger(message.external_id) && !(message.external_id && $util.isInteger(message.external_id.low) && $util.isInteger(message.external_id.high)))
                            return "external_id: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a RequestVerification message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.RequestVerification
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.RequestVerification} RequestVerification
                 */
                RequestVerification.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.RequestVerification)
                        return object;
                    var message = new $root.oracle.v1.RequestVerification();
                    if (object.chain_id != null)
                        message.chain_id = String(object.chain_id);
                    if (object.validator != null)
                        message.validator = String(object.validator);
                    if (object.request_id != null)
                        if ($util.Long)
                            (message.request_id = $util.Long.fromValue(object.request_id)).unsigned = true;
                        else if (typeof object.request_id === "string")
                            message.request_id = parseInt(object.request_id, 10);
                        else if (typeof object.request_id === "number")
                            message.request_id = object.request_id;
                        else if (typeof object.request_id === "object")
                            message.request_id = new $util.LongBits(object.request_id.low >>> 0, object.request_id.high >>> 0).toNumber(true);
                    if (object.external_id != null)
                        if ($util.Long)
                            (message.external_id = $util.Long.fromValue(object.external_id)).unsigned = true;
                        else if (typeof object.external_id === "string")
                            message.external_id = parseInt(object.external_id, 10);
                        else if (typeof object.external_id === "number")
                            message.external_id = object.external_id;
                        else if (typeof object.external_id === "object")
                            message.external_id = new $util.LongBits(object.external_id.low >>> 0, object.external_id.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a RequestVerification message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.RequestVerification
                 * @static
                 * @param {oracle.v1.RequestVerification} message RequestVerification
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestVerification.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.chain_id = "";
                        object.validator = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.request_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.request_id = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.external_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.external_id = options.longs === String ? "0" : 0;
                    }
                    if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                        object.chain_id = message.chain_id;
                    if (message.validator != null && message.hasOwnProperty("validator"))
                        object.validator = message.validator;
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        if (typeof message.request_id === "number")
                            object.request_id = options.longs === String ? String(message.request_id) : message.request_id;
                        else
                            object.request_id = options.longs === String ? $util.Long.prototype.toString.call(message.request_id) : options.longs === Number ? new $util.LongBits(message.request_id.low >>> 0, message.request_id.high >>> 0).toNumber(true) : message.request_id;
                    if (message.external_id != null && message.hasOwnProperty("external_id"))
                        if (typeof message.external_id === "number")
                            object.external_id = options.longs === String ? String(message.external_id) : message.external_id;
                        else
                            object.external_id = options.longs === String ? $util.Long.prototype.toString.call(message.external_id) : options.longs === Number ? new $util.LongBits(message.external_id.low >>> 0, message.external_id.high >>> 0).toNumber(true) : message.external_id;
                    return object;
                };
    
                /**
                 * Converts this RequestVerification to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.RequestVerification
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestVerification.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RequestVerification;
            })();
    
            v1.PriceResult = (function() {
    
                /**
                 * Properties of a PriceResult.
                 * @memberof oracle.v1
                 * @interface IPriceResult
                 * @property {string|null} [symbol] PriceResult symbol
                 * @property {Long|null} [multiplier] PriceResult multiplier
                 * @property {Long|null} [px] PriceResult px
                 * @property {Long|null} [request_id] PriceResult request_id
                 * @property {Long|null} [resolve_time] PriceResult resolve_time
                 */
    
                /**
                 * Constructs a new PriceResult.
                 * @memberof oracle.v1
                 * @classdesc Represents a PriceResult.
                 * @implements IPriceResult
                 * @constructor
                 * @param {oracle.v1.IPriceResult=} [properties] Properties to set
                 */
                function PriceResult(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PriceResult symbol.
                 * @member {string} symbol
                 * @memberof oracle.v1.PriceResult
                 * @instance
                 */
                PriceResult.prototype.symbol = "";
    
                /**
                 * PriceResult multiplier.
                 * @member {Long} multiplier
                 * @memberof oracle.v1.PriceResult
                 * @instance
                 */
                PriceResult.prototype.multiplier = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * PriceResult px.
                 * @member {Long} px
                 * @memberof oracle.v1.PriceResult
                 * @instance
                 */
                PriceResult.prototype.px = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * PriceResult request_id.
                 * @member {Long} request_id
                 * @memberof oracle.v1.PriceResult
                 * @instance
                 */
                PriceResult.prototype.request_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * PriceResult resolve_time.
                 * @member {Long} resolve_time
                 * @memberof oracle.v1.PriceResult
                 * @instance
                 */
                PriceResult.prototype.resolve_time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Encodes the specified PriceResult message. Does not implicitly {@link oracle.v1.PriceResult.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.PriceResult
                 * @static
                 * @param {oracle.v1.IPriceResult} message PriceResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PriceResult.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.symbol != null && Object.hasOwnProperty.call(message, "symbol"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.symbol);
                    if (message.multiplier != null && Object.hasOwnProperty.call(message, "multiplier"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.multiplier);
                    if (message.px != null && Object.hasOwnProperty.call(message, "px"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.px);
                    if (message.request_id != null && Object.hasOwnProperty.call(message, "request_id"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.request_id);
                    if (message.resolve_time != null && Object.hasOwnProperty.call(message, "resolve_time"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.resolve_time);
                    return writer;
                };
    
                /**
                 * Encodes the specified PriceResult message, length delimited. Does not implicitly {@link oracle.v1.PriceResult.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.PriceResult
                 * @static
                 * @param {oracle.v1.IPriceResult} message PriceResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PriceResult.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PriceResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.PriceResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.PriceResult} PriceResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PriceResult.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.PriceResult();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.symbol = reader.string();
                            break;
                        case 2:
                            message.multiplier = reader.uint64();
                            break;
                        case 3:
                            message.px = reader.uint64();
                            break;
                        case 4:
                            message.request_id = reader.uint64();
                            break;
                        case 5:
                            message.resolve_time = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PriceResult message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.PriceResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.PriceResult} PriceResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PriceResult.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PriceResult message.
                 * @function verify
                 * @memberof oracle.v1.PriceResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PriceResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.symbol != null && message.hasOwnProperty("symbol"))
                        if (!$util.isString(message.symbol))
                            return "symbol: string expected";
                    if (message.multiplier != null && message.hasOwnProperty("multiplier"))
                        if (!$util.isInteger(message.multiplier) && !(message.multiplier && $util.isInteger(message.multiplier.low) && $util.isInteger(message.multiplier.high)))
                            return "multiplier: integer|Long expected";
                    if (message.px != null && message.hasOwnProperty("px"))
                        if (!$util.isInteger(message.px) && !(message.px && $util.isInteger(message.px.low) && $util.isInteger(message.px.high)))
                            return "px: integer|Long expected";
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        if (!$util.isInteger(message.request_id) && !(message.request_id && $util.isInteger(message.request_id.low) && $util.isInteger(message.request_id.high)))
                            return "request_id: integer|Long expected";
                    if (message.resolve_time != null && message.hasOwnProperty("resolve_time"))
                        if (!$util.isInteger(message.resolve_time) && !(message.resolve_time && $util.isInteger(message.resolve_time.low) && $util.isInteger(message.resolve_time.high)))
                            return "resolve_time: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a PriceResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.PriceResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.PriceResult} PriceResult
                 */
                PriceResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.PriceResult)
                        return object;
                    var message = new $root.oracle.v1.PriceResult();
                    if (object.symbol != null)
                        message.symbol = String(object.symbol);
                    if (object.multiplier != null)
                        if ($util.Long)
                            (message.multiplier = $util.Long.fromValue(object.multiplier)).unsigned = true;
                        else if (typeof object.multiplier === "string")
                            message.multiplier = parseInt(object.multiplier, 10);
                        else if (typeof object.multiplier === "number")
                            message.multiplier = object.multiplier;
                        else if (typeof object.multiplier === "object")
                            message.multiplier = new $util.LongBits(object.multiplier.low >>> 0, object.multiplier.high >>> 0).toNumber(true);
                    if (object.px != null)
                        if ($util.Long)
                            (message.px = $util.Long.fromValue(object.px)).unsigned = true;
                        else if (typeof object.px === "string")
                            message.px = parseInt(object.px, 10);
                        else if (typeof object.px === "number")
                            message.px = object.px;
                        else if (typeof object.px === "object")
                            message.px = new $util.LongBits(object.px.low >>> 0, object.px.high >>> 0).toNumber(true);
                    if (object.request_id != null)
                        if ($util.Long)
                            (message.request_id = $util.Long.fromValue(object.request_id)).unsigned = true;
                        else if (typeof object.request_id === "string")
                            message.request_id = parseInt(object.request_id, 10);
                        else if (typeof object.request_id === "number")
                            message.request_id = object.request_id;
                        else if (typeof object.request_id === "object")
                            message.request_id = new $util.LongBits(object.request_id.low >>> 0, object.request_id.high >>> 0).toNumber(true);
                    if (object.resolve_time != null)
                        if ($util.Long)
                            (message.resolve_time = $util.Long.fromValue(object.resolve_time)).unsigned = false;
                        else if (typeof object.resolve_time === "string")
                            message.resolve_time = parseInt(object.resolve_time, 10);
                        else if (typeof object.resolve_time === "number")
                            message.resolve_time = object.resolve_time;
                        else if (typeof object.resolve_time === "object")
                            message.resolve_time = new $util.LongBits(object.resolve_time.low >>> 0, object.resolve_time.high >>> 0).toNumber();
                    return message;
                };
    
                /**
                 * Creates a plain object from a PriceResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.PriceResult
                 * @static
                 * @param {oracle.v1.PriceResult} message PriceResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PriceResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.symbol = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.multiplier = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.multiplier = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.px = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.px = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.request_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.request_id = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.resolve_time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.resolve_time = options.longs === String ? "0" : 0;
                    }
                    if (message.symbol != null && message.hasOwnProperty("symbol"))
                        object.symbol = message.symbol;
                    if (message.multiplier != null && message.hasOwnProperty("multiplier"))
                        if (typeof message.multiplier === "number")
                            object.multiplier = options.longs === String ? String(message.multiplier) : message.multiplier;
                        else
                            object.multiplier = options.longs === String ? $util.Long.prototype.toString.call(message.multiplier) : options.longs === Number ? new $util.LongBits(message.multiplier.low >>> 0, message.multiplier.high >>> 0).toNumber(true) : message.multiplier;
                    if (message.px != null && message.hasOwnProperty("px"))
                        if (typeof message.px === "number")
                            object.px = options.longs === String ? String(message.px) : message.px;
                        else
                            object.px = options.longs === String ? $util.Long.prototype.toString.call(message.px) : options.longs === Number ? new $util.LongBits(message.px.low >>> 0, message.px.high >>> 0).toNumber(true) : message.px;
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        if (typeof message.request_id === "number")
                            object.request_id = options.longs === String ? String(message.request_id) : message.request_id;
                        else
                            object.request_id = options.longs === String ? $util.Long.prototype.toString.call(message.request_id) : options.longs === Number ? new $util.LongBits(message.request_id.low >>> 0, message.request_id.high >>> 0).toNumber(true) : message.request_id;
                    if (message.resolve_time != null && message.hasOwnProperty("resolve_time"))
                        if (typeof message.resolve_time === "number")
                            object.resolve_time = options.longs === String ? String(message.resolve_time) : message.resolve_time;
                        else
                            object.resolve_time = options.longs === String ? $util.Long.prototype.toString.call(message.resolve_time) : options.longs === Number ? new $util.LongBits(message.resolve_time.low >>> 0, message.resolve_time.high >>> 0).toNumber() : message.resolve_time;
                    return object;
                };
    
                /**
                 * Converts this PriceResult to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.PriceResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PriceResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return PriceResult;
            })();
    
            v1.Query = (function() {
    
                /**
                 * Constructs a new Query service.
                 * @memberof oracle.v1
                 * @classdesc Represents a Query
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Query(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;
    
                /**
                 * Callback as used by {@link oracle.v1.Query#counts}.
                 * @memberof oracle.v1.Query
                 * @typedef CountsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.QueryCountsResponse} [response] QueryCountsResponse
                 */
    
                /**
                 * Calls Counts.
                 * @function counts
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryCountsRequest} request QueryCountsRequest message or plain object
                 * @param {oracle.v1.Query.CountsCallback} callback Node-style callback called with the error, if any, and QueryCountsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.counts = function counts(request, callback) {
                    return this.rpcCall(counts, $root.oracle.v1.QueryCountsRequest, $root.oracle.v1.QueryCountsResponse, request, callback);
                }, "name", { value: "Counts" });
    
                /**
                 * Calls Counts.
                 * @function counts
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryCountsRequest} request QueryCountsRequest message or plain object
                 * @returns {Promise<oracle.v1.QueryCountsResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link oracle.v1.Query#data}.
                 * @memberof oracle.v1.Query
                 * @typedef DataCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.QueryDataResponse} [response] QueryDataResponse
                 */
    
                /**
                 * Calls Data.
                 * @function data
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryDataRequest} request QueryDataRequest message or plain object
                 * @param {oracle.v1.Query.DataCallback} callback Node-style callback called with the error, if any, and QueryDataResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.data = function data(request, callback) {
                    return this.rpcCall(data, $root.oracle.v1.QueryDataRequest, $root.oracle.v1.QueryDataResponse, request, callback);
                }, "name", { value: "Data" });
    
                /**
                 * Calls Data.
                 * @function data
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryDataRequest} request QueryDataRequest message or plain object
                 * @returns {Promise<oracle.v1.QueryDataResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link oracle.v1.Query#dataSource}.
                 * @memberof oracle.v1.Query
                 * @typedef DataSourceCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.QueryDataSourceResponse} [response] QueryDataSourceResponse
                 */
    
                /**
                 * Calls DataSource.
                 * @function dataSource
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryDataSourceRequest} request QueryDataSourceRequest message or plain object
                 * @param {oracle.v1.Query.DataSourceCallback} callback Node-style callback called with the error, if any, and QueryDataSourceResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.dataSource = function dataSource(request, callback) {
                    return this.rpcCall(dataSource, $root.oracle.v1.QueryDataSourceRequest, $root.oracle.v1.QueryDataSourceResponse, request, callback);
                }, "name", { value: "DataSource" });
    
                /**
                 * Calls DataSource.
                 * @function dataSource
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryDataSourceRequest} request QueryDataSourceRequest message or plain object
                 * @returns {Promise<oracle.v1.QueryDataSourceResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link oracle.v1.Query#oracleScript}.
                 * @memberof oracle.v1.Query
                 * @typedef OracleScriptCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.QueryOracleScriptResponse} [response] QueryOracleScriptResponse
                 */
    
                /**
                 * Calls OracleScript.
                 * @function oracleScript
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryOracleScriptRequest} request QueryOracleScriptRequest message or plain object
                 * @param {oracle.v1.Query.OracleScriptCallback} callback Node-style callback called with the error, if any, and QueryOracleScriptResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.oracleScript = function oracleScript(request, callback) {
                    return this.rpcCall(oracleScript, $root.oracle.v1.QueryOracleScriptRequest, $root.oracle.v1.QueryOracleScriptResponse, request, callback);
                }, "name", { value: "OracleScript" });
    
                /**
                 * Calls OracleScript.
                 * @function oracleScript
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryOracleScriptRequest} request QueryOracleScriptRequest message or plain object
                 * @returns {Promise<oracle.v1.QueryOracleScriptResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link oracle.v1.Query#request}.
                 * @memberof oracle.v1.Query
                 * @typedef RequestCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.QueryRequestResponse} [response] QueryRequestResponse
                 */
    
                /**
                 * Calls Request.
                 * @function request
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryRequestRequest} request QueryRequestRequest message or plain object
                 * @param {oracle.v1.Query.RequestCallback} callback Node-style callback called with the error, if any, and QueryRequestResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.request = function request(request, callback) {
                    return this.rpcCall(request, $root.oracle.v1.QueryRequestRequest, $root.oracle.v1.QueryRequestResponse, request, callback);
                }, "name", { value: "Request" });
    
                /**
                 * Calls Request.
                 * @function request
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryRequestRequest} request QueryRequestRequest message or plain object
                 * @returns {Promise<oracle.v1.QueryRequestResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link oracle.v1.Query#pendingRequests}.
                 * @memberof oracle.v1.Query
                 * @typedef PendingRequestsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.QueryPendingRequestsResponse} [response] QueryPendingRequestsResponse
                 */
    
                /**
                 * Calls PendingRequests.
                 * @function pendingRequests
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryPendingRequestsRequest} request QueryPendingRequestsRequest message or plain object
                 * @param {oracle.v1.Query.PendingRequestsCallback} callback Node-style callback called with the error, if any, and QueryPendingRequestsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.pendingRequests = function pendingRequests(request, callback) {
                    return this.rpcCall(pendingRequests, $root.oracle.v1.QueryPendingRequestsRequest, $root.oracle.v1.QueryPendingRequestsResponse, request, callback);
                }, "name", { value: "PendingRequests" });
    
                /**
                 * Calls PendingRequests.
                 * @function pendingRequests
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryPendingRequestsRequest} request QueryPendingRequestsRequest message or plain object
                 * @returns {Promise<oracle.v1.QueryPendingRequestsResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link oracle.v1.Query#validator}.
                 * @memberof oracle.v1.Query
                 * @typedef ValidatorCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.QueryValidatorResponse} [response] QueryValidatorResponse
                 */
    
                /**
                 * Calls Validator.
                 * @function validator
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryValidatorRequest} request QueryValidatorRequest message or plain object
                 * @param {oracle.v1.Query.ValidatorCallback} callback Node-style callback called with the error, if any, and QueryValidatorResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.validator = function validator(request, callback) {
                    return this.rpcCall(validator, $root.oracle.v1.QueryValidatorRequest, $root.oracle.v1.QueryValidatorResponse, request, callback);
                }, "name", { value: "Validator" });
    
                /**
                 * Calls Validator.
                 * @function validator
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryValidatorRequest} request QueryValidatorRequest message or plain object
                 * @returns {Promise<oracle.v1.QueryValidatorResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link oracle.v1.Query#isReporter}.
                 * @memberof oracle.v1.Query
                 * @typedef IsReporterCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.QueryIsReporterResponse} [response] QueryIsReporterResponse
                 */
    
                /**
                 * Calls IsReporter.
                 * @function isReporter
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryIsReporterRequest} request QueryIsReporterRequest message or plain object
                 * @param {oracle.v1.Query.IsReporterCallback} callback Node-style callback called with the error, if any, and QueryIsReporterResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.isReporter = function isReporter(request, callback) {
                    return this.rpcCall(isReporter, $root.oracle.v1.QueryIsReporterRequest, $root.oracle.v1.QueryIsReporterResponse, request, callback);
                }, "name", { value: "IsReporter" });
    
                /**
                 * Calls IsReporter.
                 * @function isReporter
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryIsReporterRequest} request QueryIsReporterRequest message or plain object
                 * @returns {Promise<oracle.v1.QueryIsReporterResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link oracle.v1.Query#reporters}.
                 * @memberof oracle.v1.Query
                 * @typedef ReportersCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.QueryReportersResponse} [response] QueryReportersResponse
                 */
    
                /**
                 * Calls Reporters.
                 * @function reporters
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryReportersRequest} request QueryReportersRequest message or plain object
                 * @param {oracle.v1.Query.ReportersCallback} callback Node-style callback called with the error, if any, and QueryReportersResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.reporters = function reporters(request, callback) {
                    return this.rpcCall(reporters, $root.oracle.v1.QueryReportersRequest, $root.oracle.v1.QueryReportersResponse, request, callback);
                }, "name", { value: "Reporters" });
    
                /**
                 * Calls Reporters.
                 * @function reporters
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryReportersRequest} request QueryReportersRequest message or plain object
                 * @returns {Promise<oracle.v1.QueryReportersResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link oracle.v1.Query#activeValidators}.
                 * @memberof oracle.v1.Query
                 * @typedef ActiveValidatorsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.QueryActiveValidatorsResponse} [response] QueryActiveValidatorsResponse
                 */
    
                /**
                 * Calls ActiveValidators.
                 * @function activeValidators
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryActiveValidatorsRequest} request QueryActiveValidatorsRequest message or plain object
                 * @param {oracle.v1.Query.ActiveValidatorsCallback} callback Node-style callback called with the error, if any, and QueryActiveValidatorsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.activeValidators = function activeValidators(request, callback) {
                    return this.rpcCall(activeValidators, $root.oracle.v1.QueryActiveValidatorsRequest, $root.oracle.v1.QueryActiveValidatorsResponse, request, callback);
                }, "name", { value: "ActiveValidators" });
    
                /**
                 * Calls ActiveValidators.
                 * @function activeValidators
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryActiveValidatorsRequest} request QueryActiveValidatorsRequest message or plain object
                 * @returns {Promise<oracle.v1.QueryActiveValidatorsResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link oracle.v1.Query#params}.
                 * @memberof oracle.v1.Query
                 * @typedef ParamsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.QueryParamsResponse} [response] QueryParamsResponse
                 */
    
                /**
                 * Calls Params.
                 * @function params
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryParamsRequest} request QueryParamsRequest message or plain object
                 * @param {oracle.v1.Query.ParamsCallback} callback Node-style callback called with the error, if any, and QueryParamsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.params = function params(request, callback) {
                    return this.rpcCall(params, $root.oracle.v1.QueryParamsRequest, $root.oracle.v1.QueryParamsResponse, request, callback);
                }, "name", { value: "Params" });
    
                /**
                 * Calls Params.
                 * @function params
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryParamsRequest} request QueryParamsRequest message or plain object
                 * @returns {Promise<oracle.v1.QueryParamsResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link oracle.v1.Query#requestSearch}.
                 * @memberof oracle.v1.Query
                 * @typedef RequestSearchCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.QueryRequestSearchResponse} [response] QueryRequestSearchResponse
                 */
    
                /**
                 * Calls RequestSearch.
                 * @function requestSearch
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryRequestSearchRequest} request QueryRequestSearchRequest message or plain object
                 * @param {oracle.v1.Query.RequestSearchCallback} callback Node-style callback called with the error, if any, and QueryRequestSearchResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.requestSearch = function requestSearch(request, callback) {
                    return this.rpcCall(requestSearch, $root.oracle.v1.QueryRequestSearchRequest, $root.oracle.v1.QueryRequestSearchResponse, request, callback);
                }, "name", { value: "RequestSearch" });
    
                /**
                 * Calls RequestSearch.
                 * @function requestSearch
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryRequestSearchRequest} request QueryRequestSearchRequest message or plain object
                 * @returns {Promise<oracle.v1.QueryRequestSearchResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link oracle.v1.Query#requestPrice}.
                 * @memberof oracle.v1.Query
                 * @typedef RequestPriceCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.QueryRequestPriceResponse} [response] QueryRequestPriceResponse
                 */
    
                /**
                 * Calls RequestPrice.
                 * @function requestPrice
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryRequestPriceRequest} request QueryRequestPriceRequest message or plain object
                 * @param {oracle.v1.Query.RequestPriceCallback} callback Node-style callback called with the error, if any, and QueryRequestPriceResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.requestPrice = function requestPrice(request, callback) {
                    return this.rpcCall(requestPrice, $root.oracle.v1.QueryRequestPriceRequest, $root.oracle.v1.QueryRequestPriceResponse, request, callback);
                }, "name", { value: "RequestPrice" });
    
                /**
                 * Calls RequestPrice.
                 * @function requestPrice
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryRequestPriceRequest} request QueryRequestPriceRequest message or plain object
                 * @returns {Promise<oracle.v1.QueryRequestPriceResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link oracle.v1.Query#requestVerification}.
                 * @memberof oracle.v1.Query
                 * @typedef RequestVerificationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.QueryRequestVerificationResponse} [response] QueryRequestVerificationResponse
                 */
    
                /**
                 * Calls RequestVerification.
                 * @function requestVerification
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryRequestVerificationRequest} request QueryRequestVerificationRequest message or plain object
                 * @param {oracle.v1.Query.RequestVerificationCallback} callback Node-style callback called with the error, if any, and QueryRequestVerificationResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.requestVerification = function requestVerification(request, callback) {
                    return this.rpcCall(requestVerification, $root.oracle.v1.QueryRequestVerificationRequest, $root.oracle.v1.QueryRequestVerificationResponse, request, callback);
                }, "name", { value: "RequestVerification" });
    
                /**
                 * Calls RequestVerification.
                 * @function requestVerification
                 * @memberof oracle.v1.Query
                 * @instance
                 * @param {oracle.v1.IQueryRequestVerificationRequest} request QueryRequestVerificationRequest message or plain object
                 * @returns {Promise<oracle.v1.QueryRequestVerificationResponse>} Promise
                 * @variation 2
                 */
    
                return Query;
            })();
    
            v1.QueryCountsRequest = (function() {
    
                /**
                 * Properties of a QueryCountsRequest.
                 * @memberof oracle.v1
                 * @interface IQueryCountsRequest
                 */
    
                /**
                 * Constructs a new QueryCountsRequest.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryCountsRequest.
                 * @implements IQueryCountsRequest
                 * @constructor
                 * @param {oracle.v1.IQueryCountsRequest=} [properties] Properties to set
                 */
                function QueryCountsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified QueryCountsRequest message. Does not implicitly {@link oracle.v1.QueryCountsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryCountsRequest
                 * @static
                 * @param {oracle.v1.IQueryCountsRequest} message QueryCountsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCountsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryCountsRequest message, length delimited. Does not implicitly {@link oracle.v1.QueryCountsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryCountsRequest
                 * @static
                 * @param {oracle.v1.IQueryCountsRequest} message QueryCountsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCountsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryCountsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryCountsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryCountsRequest} QueryCountsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCountsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryCountsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryCountsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryCountsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryCountsRequest} QueryCountsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCountsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryCountsRequest message.
                 * @function verify
                 * @memberof oracle.v1.QueryCountsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryCountsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a QueryCountsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryCountsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryCountsRequest} QueryCountsRequest
                 */
                QueryCountsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryCountsRequest)
                        return object;
                    return new $root.oracle.v1.QueryCountsRequest();
                };
    
                /**
                 * Creates a plain object from a QueryCountsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryCountsRequest
                 * @static
                 * @param {oracle.v1.QueryCountsRequest} message QueryCountsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryCountsRequest.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this QueryCountsRequest to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryCountsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryCountsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryCountsRequest;
            })();
    
            v1.QueryCountsResponse = (function() {
    
                /**
                 * Properties of a QueryCountsResponse.
                 * @memberof oracle.v1
                 * @interface IQueryCountsResponse
                 * @property {Long|null} [data_source_count] QueryCountsResponse data_source_count
                 * @property {Long|null} [oracle_script_count] QueryCountsResponse oracle_script_count
                 * @property {Long|null} [request_count] QueryCountsResponse request_count
                 */
    
                /**
                 * Constructs a new QueryCountsResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryCountsResponse.
                 * @implements IQueryCountsResponse
                 * @constructor
                 * @param {oracle.v1.IQueryCountsResponse=} [properties] Properties to set
                 */
                function QueryCountsResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryCountsResponse data_source_count.
                 * @member {Long} data_source_count
                 * @memberof oracle.v1.QueryCountsResponse
                 * @instance
                 */
                QueryCountsResponse.prototype.data_source_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * QueryCountsResponse oracle_script_count.
                 * @member {Long} oracle_script_count
                 * @memberof oracle.v1.QueryCountsResponse
                 * @instance
                 */
                QueryCountsResponse.prototype.oracle_script_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * QueryCountsResponse request_count.
                 * @member {Long} request_count
                 * @memberof oracle.v1.QueryCountsResponse
                 * @instance
                 */
                QueryCountsResponse.prototype.request_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified QueryCountsResponse message. Does not implicitly {@link oracle.v1.QueryCountsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryCountsResponse
                 * @static
                 * @param {oracle.v1.IQueryCountsResponse} message QueryCountsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCountsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.data_source_count != null && Object.hasOwnProperty.call(message, "data_source_count"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.data_source_count);
                    if (message.oracle_script_count != null && Object.hasOwnProperty.call(message, "oracle_script_count"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.oracle_script_count);
                    if (message.request_count != null && Object.hasOwnProperty.call(message, "request_count"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.request_count);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryCountsResponse message, length delimited. Does not implicitly {@link oracle.v1.QueryCountsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryCountsResponse
                 * @static
                 * @param {oracle.v1.IQueryCountsResponse} message QueryCountsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryCountsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryCountsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryCountsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryCountsResponse} QueryCountsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCountsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryCountsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.data_source_count = reader.uint64();
                            break;
                        case 2:
                            message.oracle_script_count = reader.uint64();
                            break;
                        case 3:
                            message.request_count = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryCountsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryCountsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryCountsResponse} QueryCountsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryCountsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryCountsResponse message.
                 * @function verify
                 * @memberof oracle.v1.QueryCountsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryCountsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.data_source_count != null && message.hasOwnProperty("data_source_count"))
                        if (!$util.isInteger(message.data_source_count) && !(message.data_source_count && $util.isInteger(message.data_source_count.low) && $util.isInteger(message.data_source_count.high)))
                            return "data_source_count: integer|Long expected";
                    if (message.oracle_script_count != null && message.hasOwnProperty("oracle_script_count"))
                        if (!$util.isInteger(message.oracle_script_count) && !(message.oracle_script_count && $util.isInteger(message.oracle_script_count.low) && $util.isInteger(message.oracle_script_count.high)))
                            return "oracle_script_count: integer|Long expected";
                    if (message.request_count != null && message.hasOwnProperty("request_count"))
                        if (!$util.isInteger(message.request_count) && !(message.request_count && $util.isInteger(message.request_count.low) && $util.isInteger(message.request_count.high)))
                            return "request_count: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a QueryCountsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryCountsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryCountsResponse} QueryCountsResponse
                 */
                QueryCountsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryCountsResponse)
                        return object;
                    var message = new $root.oracle.v1.QueryCountsResponse();
                    if (object.data_source_count != null)
                        if ($util.Long)
                            (message.data_source_count = $util.Long.fromValue(object.data_source_count)).unsigned = true;
                        else if (typeof object.data_source_count === "string")
                            message.data_source_count = parseInt(object.data_source_count, 10);
                        else if (typeof object.data_source_count === "number")
                            message.data_source_count = object.data_source_count;
                        else if (typeof object.data_source_count === "object")
                            message.data_source_count = new $util.LongBits(object.data_source_count.low >>> 0, object.data_source_count.high >>> 0).toNumber(true);
                    if (object.oracle_script_count != null)
                        if ($util.Long)
                            (message.oracle_script_count = $util.Long.fromValue(object.oracle_script_count)).unsigned = true;
                        else if (typeof object.oracle_script_count === "string")
                            message.oracle_script_count = parseInt(object.oracle_script_count, 10);
                        else if (typeof object.oracle_script_count === "number")
                            message.oracle_script_count = object.oracle_script_count;
                        else if (typeof object.oracle_script_count === "object")
                            message.oracle_script_count = new $util.LongBits(object.oracle_script_count.low >>> 0, object.oracle_script_count.high >>> 0).toNumber(true);
                    if (object.request_count != null)
                        if ($util.Long)
                            (message.request_count = $util.Long.fromValue(object.request_count)).unsigned = true;
                        else if (typeof object.request_count === "string")
                            message.request_count = parseInt(object.request_count, 10);
                        else if (typeof object.request_count === "number")
                            message.request_count = object.request_count;
                        else if (typeof object.request_count === "object")
                            message.request_count = new $util.LongBits(object.request_count.low >>> 0, object.request_count.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryCountsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryCountsResponse
                 * @static
                 * @param {oracle.v1.QueryCountsResponse} message QueryCountsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryCountsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.data_source_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.data_source_count = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.oracle_script_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.oracle_script_count = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.request_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.request_count = options.longs === String ? "0" : 0;
                    }
                    if (message.data_source_count != null && message.hasOwnProperty("data_source_count"))
                        if (typeof message.data_source_count === "number")
                            object.data_source_count = options.longs === String ? String(message.data_source_count) : message.data_source_count;
                        else
                            object.data_source_count = options.longs === String ? $util.Long.prototype.toString.call(message.data_source_count) : options.longs === Number ? new $util.LongBits(message.data_source_count.low >>> 0, message.data_source_count.high >>> 0).toNumber(true) : message.data_source_count;
                    if (message.oracle_script_count != null && message.hasOwnProperty("oracle_script_count"))
                        if (typeof message.oracle_script_count === "number")
                            object.oracle_script_count = options.longs === String ? String(message.oracle_script_count) : message.oracle_script_count;
                        else
                            object.oracle_script_count = options.longs === String ? $util.Long.prototype.toString.call(message.oracle_script_count) : options.longs === Number ? new $util.LongBits(message.oracle_script_count.low >>> 0, message.oracle_script_count.high >>> 0).toNumber(true) : message.oracle_script_count;
                    if (message.request_count != null && message.hasOwnProperty("request_count"))
                        if (typeof message.request_count === "number")
                            object.request_count = options.longs === String ? String(message.request_count) : message.request_count;
                        else
                            object.request_count = options.longs === String ? $util.Long.prototype.toString.call(message.request_count) : options.longs === Number ? new $util.LongBits(message.request_count.low >>> 0, message.request_count.high >>> 0).toNumber(true) : message.request_count;
                    return object;
                };
    
                /**
                 * Converts this QueryCountsResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryCountsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryCountsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryCountsResponse;
            })();
    
            v1.QueryDataRequest = (function() {
    
                /**
                 * Properties of a QueryDataRequest.
                 * @memberof oracle.v1
                 * @interface IQueryDataRequest
                 * @property {string|null} [data_hash] QueryDataRequest data_hash
                 */
    
                /**
                 * Constructs a new QueryDataRequest.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryDataRequest.
                 * @implements IQueryDataRequest
                 * @constructor
                 * @param {oracle.v1.IQueryDataRequest=} [properties] Properties to set
                 */
                function QueryDataRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryDataRequest data_hash.
                 * @member {string} data_hash
                 * @memberof oracle.v1.QueryDataRequest
                 * @instance
                 */
                QueryDataRequest.prototype.data_hash = "";
    
                /**
                 * Encodes the specified QueryDataRequest message. Does not implicitly {@link oracle.v1.QueryDataRequest.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryDataRequest
                 * @static
                 * @param {oracle.v1.IQueryDataRequest} message QueryDataRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDataRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.data_hash != null && Object.hasOwnProperty.call(message, "data_hash"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.data_hash);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryDataRequest message, length delimited. Does not implicitly {@link oracle.v1.QueryDataRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryDataRequest
                 * @static
                 * @param {oracle.v1.IQueryDataRequest} message QueryDataRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDataRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryDataRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryDataRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryDataRequest} QueryDataRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDataRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryDataRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.data_hash = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryDataRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryDataRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryDataRequest} QueryDataRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDataRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryDataRequest message.
                 * @function verify
                 * @memberof oracle.v1.QueryDataRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryDataRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.data_hash != null && message.hasOwnProperty("data_hash"))
                        if (!$util.isString(message.data_hash))
                            return "data_hash: string expected";
                    return null;
                };
    
                /**
                 * Creates a QueryDataRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryDataRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryDataRequest} QueryDataRequest
                 */
                QueryDataRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryDataRequest)
                        return object;
                    var message = new $root.oracle.v1.QueryDataRequest();
                    if (object.data_hash != null)
                        message.data_hash = String(object.data_hash);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryDataRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryDataRequest
                 * @static
                 * @param {oracle.v1.QueryDataRequest} message QueryDataRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryDataRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.data_hash = "";
                    if (message.data_hash != null && message.hasOwnProperty("data_hash"))
                        object.data_hash = message.data_hash;
                    return object;
                };
    
                /**
                 * Converts this QueryDataRequest to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryDataRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryDataRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryDataRequest;
            })();
    
            v1.QueryDataResponse = (function() {
    
                /**
                 * Properties of a QueryDataResponse.
                 * @memberof oracle.v1
                 * @interface IQueryDataResponse
                 * @property {Uint8Array|null} [data] QueryDataResponse data
                 */
    
                /**
                 * Constructs a new QueryDataResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryDataResponse.
                 * @implements IQueryDataResponse
                 * @constructor
                 * @param {oracle.v1.IQueryDataResponse=} [properties] Properties to set
                 */
                function QueryDataResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryDataResponse data.
                 * @member {Uint8Array} data
                 * @memberof oracle.v1.QueryDataResponse
                 * @instance
                 */
                QueryDataResponse.prototype.data = $util.newBuffer([]);
    
                /**
                 * Encodes the specified QueryDataResponse message. Does not implicitly {@link oracle.v1.QueryDataResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryDataResponse
                 * @static
                 * @param {oracle.v1.IQueryDataResponse} message QueryDataResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDataResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryDataResponse message, length delimited. Does not implicitly {@link oracle.v1.QueryDataResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryDataResponse
                 * @static
                 * @param {oracle.v1.IQueryDataResponse} message QueryDataResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDataResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryDataResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryDataResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryDataResponse} QueryDataResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDataResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryDataResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.data = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryDataResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryDataResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryDataResponse} QueryDataResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDataResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryDataResponse message.
                 * @function verify
                 * @memberof oracle.v1.QueryDataResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryDataResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a QueryDataResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryDataResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryDataResponse} QueryDataResponse
                 */
                QueryDataResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryDataResponse)
                        return object;
                    var message = new $root.oracle.v1.QueryDataResponse();
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryDataResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryDataResponse
                 * @static
                 * @param {oracle.v1.QueryDataResponse} message QueryDataResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryDataResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    return object;
                };
    
                /**
                 * Converts this QueryDataResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryDataResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryDataResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryDataResponse;
            })();
    
            v1.QueryDataSourceRequest = (function() {
    
                /**
                 * Properties of a QueryDataSourceRequest.
                 * @memberof oracle.v1
                 * @interface IQueryDataSourceRequest
                 * @property {Long|null} [data_source_id] QueryDataSourceRequest data_source_id
                 */
    
                /**
                 * Constructs a new QueryDataSourceRequest.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryDataSourceRequest.
                 * @implements IQueryDataSourceRequest
                 * @constructor
                 * @param {oracle.v1.IQueryDataSourceRequest=} [properties] Properties to set
                 */
                function QueryDataSourceRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryDataSourceRequest data_source_id.
                 * @member {Long} data_source_id
                 * @memberof oracle.v1.QueryDataSourceRequest
                 * @instance
                 */
                QueryDataSourceRequest.prototype.data_source_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified QueryDataSourceRequest message. Does not implicitly {@link oracle.v1.QueryDataSourceRequest.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryDataSourceRequest
                 * @static
                 * @param {oracle.v1.IQueryDataSourceRequest} message QueryDataSourceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDataSourceRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.data_source_id != null && Object.hasOwnProperty.call(message, "data_source_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.data_source_id);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryDataSourceRequest message, length delimited. Does not implicitly {@link oracle.v1.QueryDataSourceRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryDataSourceRequest
                 * @static
                 * @param {oracle.v1.IQueryDataSourceRequest} message QueryDataSourceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDataSourceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryDataSourceRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryDataSourceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryDataSourceRequest} QueryDataSourceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDataSourceRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryDataSourceRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.data_source_id = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryDataSourceRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryDataSourceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryDataSourceRequest} QueryDataSourceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDataSourceRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryDataSourceRequest message.
                 * @function verify
                 * @memberof oracle.v1.QueryDataSourceRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryDataSourceRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.data_source_id != null && message.hasOwnProperty("data_source_id"))
                        if (!$util.isInteger(message.data_source_id) && !(message.data_source_id && $util.isInteger(message.data_source_id.low) && $util.isInteger(message.data_source_id.high)))
                            return "data_source_id: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a QueryDataSourceRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryDataSourceRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryDataSourceRequest} QueryDataSourceRequest
                 */
                QueryDataSourceRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryDataSourceRequest)
                        return object;
                    var message = new $root.oracle.v1.QueryDataSourceRequest();
                    if (object.data_source_id != null)
                        if ($util.Long)
                            (message.data_source_id = $util.Long.fromValue(object.data_source_id)).unsigned = true;
                        else if (typeof object.data_source_id === "string")
                            message.data_source_id = parseInt(object.data_source_id, 10);
                        else if (typeof object.data_source_id === "number")
                            message.data_source_id = object.data_source_id;
                        else if (typeof object.data_source_id === "object")
                            message.data_source_id = new $util.LongBits(object.data_source_id.low >>> 0, object.data_source_id.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryDataSourceRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryDataSourceRequest
                 * @static
                 * @param {oracle.v1.QueryDataSourceRequest} message QueryDataSourceRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryDataSourceRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.data_source_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.data_source_id = options.longs === String ? "0" : 0;
                    if (message.data_source_id != null && message.hasOwnProperty("data_source_id"))
                        if (typeof message.data_source_id === "number")
                            object.data_source_id = options.longs === String ? String(message.data_source_id) : message.data_source_id;
                        else
                            object.data_source_id = options.longs === String ? $util.Long.prototype.toString.call(message.data_source_id) : options.longs === Number ? new $util.LongBits(message.data_source_id.low >>> 0, message.data_source_id.high >>> 0).toNumber(true) : message.data_source_id;
                    return object;
                };
    
                /**
                 * Converts this QueryDataSourceRequest to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryDataSourceRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryDataSourceRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryDataSourceRequest;
            })();
    
            v1.QueryDataSourceResponse = (function() {
    
                /**
                 * Properties of a QueryDataSourceResponse.
                 * @memberof oracle.v1
                 * @interface IQueryDataSourceResponse
                 * @property {oracle.v1.IDataSource|null} [data_source] QueryDataSourceResponse data_source
                 */
    
                /**
                 * Constructs a new QueryDataSourceResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryDataSourceResponse.
                 * @implements IQueryDataSourceResponse
                 * @constructor
                 * @param {oracle.v1.IQueryDataSourceResponse=} [properties] Properties to set
                 */
                function QueryDataSourceResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryDataSourceResponse data_source.
                 * @member {oracle.v1.IDataSource|null|undefined} data_source
                 * @memberof oracle.v1.QueryDataSourceResponse
                 * @instance
                 */
                QueryDataSourceResponse.prototype.data_source = null;
    
                /**
                 * Encodes the specified QueryDataSourceResponse message. Does not implicitly {@link oracle.v1.QueryDataSourceResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryDataSourceResponse
                 * @static
                 * @param {oracle.v1.IQueryDataSourceResponse} message QueryDataSourceResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDataSourceResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.data_source != null && Object.hasOwnProperty.call(message, "data_source"))
                        $root.oracle.v1.DataSource.encode(message.data_source, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryDataSourceResponse message, length delimited. Does not implicitly {@link oracle.v1.QueryDataSourceResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryDataSourceResponse
                 * @static
                 * @param {oracle.v1.IQueryDataSourceResponse} message QueryDataSourceResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryDataSourceResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryDataSourceResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryDataSourceResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryDataSourceResponse} QueryDataSourceResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDataSourceResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryDataSourceResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.data_source = $root.oracle.v1.DataSource.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryDataSourceResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryDataSourceResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryDataSourceResponse} QueryDataSourceResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryDataSourceResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryDataSourceResponse message.
                 * @function verify
                 * @memberof oracle.v1.QueryDataSourceResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryDataSourceResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.data_source != null && message.hasOwnProperty("data_source")) {
                        var error = $root.oracle.v1.DataSource.verify(message.data_source);
                        if (error)
                            return "data_source." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryDataSourceResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryDataSourceResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryDataSourceResponse} QueryDataSourceResponse
                 */
                QueryDataSourceResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryDataSourceResponse)
                        return object;
                    var message = new $root.oracle.v1.QueryDataSourceResponse();
                    if (object.data_source != null) {
                        if (typeof object.data_source !== "object")
                            throw TypeError(".oracle.v1.QueryDataSourceResponse.data_source: object expected");
                        message.data_source = $root.oracle.v1.DataSource.fromObject(object.data_source);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryDataSourceResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryDataSourceResponse
                 * @static
                 * @param {oracle.v1.QueryDataSourceResponse} message QueryDataSourceResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryDataSourceResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.data_source = null;
                    if (message.data_source != null && message.hasOwnProperty("data_source"))
                        object.data_source = $root.oracle.v1.DataSource.toObject(message.data_source, options);
                    return object;
                };
    
                /**
                 * Converts this QueryDataSourceResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryDataSourceResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryDataSourceResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryDataSourceResponse;
            })();
    
            v1.QueryOracleScriptRequest = (function() {
    
                /**
                 * Properties of a QueryOracleScriptRequest.
                 * @memberof oracle.v1
                 * @interface IQueryOracleScriptRequest
                 * @property {Long|null} [oracle_script_id] QueryOracleScriptRequest oracle_script_id
                 */
    
                /**
                 * Constructs a new QueryOracleScriptRequest.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryOracleScriptRequest.
                 * @implements IQueryOracleScriptRequest
                 * @constructor
                 * @param {oracle.v1.IQueryOracleScriptRequest=} [properties] Properties to set
                 */
                function QueryOracleScriptRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryOracleScriptRequest oracle_script_id.
                 * @member {Long} oracle_script_id
                 * @memberof oracle.v1.QueryOracleScriptRequest
                 * @instance
                 */
                QueryOracleScriptRequest.prototype.oracle_script_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified QueryOracleScriptRequest message. Does not implicitly {@link oracle.v1.QueryOracleScriptRequest.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryOracleScriptRequest
                 * @static
                 * @param {oracle.v1.IQueryOracleScriptRequest} message QueryOracleScriptRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryOracleScriptRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.oracle_script_id != null && Object.hasOwnProperty.call(message, "oracle_script_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.oracle_script_id);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryOracleScriptRequest message, length delimited. Does not implicitly {@link oracle.v1.QueryOracleScriptRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryOracleScriptRequest
                 * @static
                 * @param {oracle.v1.IQueryOracleScriptRequest} message QueryOracleScriptRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryOracleScriptRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryOracleScriptRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryOracleScriptRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryOracleScriptRequest} QueryOracleScriptRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryOracleScriptRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryOracleScriptRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.oracle_script_id = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryOracleScriptRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryOracleScriptRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryOracleScriptRequest} QueryOracleScriptRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryOracleScriptRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryOracleScriptRequest message.
                 * @function verify
                 * @memberof oracle.v1.QueryOracleScriptRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryOracleScriptRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.oracle_script_id != null && message.hasOwnProperty("oracle_script_id"))
                        if (!$util.isInteger(message.oracle_script_id) && !(message.oracle_script_id && $util.isInteger(message.oracle_script_id.low) && $util.isInteger(message.oracle_script_id.high)))
                            return "oracle_script_id: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a QueryOracleScriptRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryOracleScriptRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryOracleScriptRequest} QueryOracleScriptRequest
                 */
                QueryOracleScriptRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryOracleScriptRequest)
                        return object;
                    var message = new $root.oracle.v1.QueryOracleScriptRequest();
                    if (object.oracle_script_id != null)
                        if ($util.Long)
                            (message.oracle_script_id = $util.Long.fromValue(object.oracle_script_id)).unsigned = true;
                        else if (typeof object.oracle_script_id === "string")
                            message.oracle_script_id = parseInt(object.oracle_script_id, 10);
                        else if (typeof object.oracle_script_id === "number")
                            message.oracle_script_id = object.oracle_script_id;
                        else if (typeof object.oracle_script_id === "object")
                            message.oracle_script_id = new $util.LongBits(object.oracle_script_id.low >>> 0, object.oracle_script_id.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryOracleScriptRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryOracleScriptRequest
                 * @static
                 * @param {oracle.v1.QueryOracleScriptRequest} message QueryOracleScriptRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryOracleScriptRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.oracle_script_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.oracle_script_id = options.longs === String ? "0" : 0;
                    if (message.oracle_script_id != null && message.hasOwnProperty("oracle_script_id"))
                        if (typeof message.oracle_script_id === "number")
                            object.oracle_script_id = options.longs === String ? String(message.oracle_script_id) : message.oracle_script_id;
                        else
                            object.oracle_script_id = options.longs === String ? $util.Long.prototype.toString.call(message.oracle_script_id) : options.longs === Number ? new $util.LongBits(message.oracle_script_id.low >>> 0, message.oracle_script_id.high >>> 0).toNumber(true) : message.oracle_script_id;
                    return object;
                };
    
                /**
                 * Converts this QueryOracleScriptRequest to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryOracleScriptRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryOracleScriptRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryOracleScriptRequest;
            })();
    
            v1.QueryOracleScriptResponse = (function() {
    
                /**
                 * Properties of a QueryOracleScriptResponse.
                 * @memberof oracle.v1
                 * @interface IQueryOracleScriptResponse
                 * @property {oracle.v1.IOracleScript|null} [oracle_script] QueryOracleScriptResponse oracle_script
                 */
    
                /**
                 * Constructs a new QueryOracleScriptResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryOracleScriptResponse.
                 * @implements IQueryOracleScriptResponse
                 * @constructor
                 * @param {oracle.v1.IQueryOracleScriptResponse=} [properties] Properties to set
                 */
                function QueryOracleScriptResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryOracleScriptResponse oracle_script.
                 * @member {oracle.v1.IOracleScript|null|undefined} oracle_script
                 * @memberof oracle.v1.QueryOracleScriptResponse
                 * @instance
                 */
                QueryOracleScriptResponse.prototype.oracle_script = null;
    
                /**
                 * Encodes the specified QueryOracleScriptResponse message. Does not implicitly {@link oracle.v1.QueryOracleScriptResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryOracleScriptResponse
                 * @static
                 * @param {oracle.v1.IQueryOracleScriptResponse} message QueryOracleScriptResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryOracleScriptResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.oracle_script != null && Object.hasOwnProperty.call(message, "oracle_script"))
                        $root.oracle.v1.OracleScript.encode(message.oracle_script, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryOracleScriptResponse message, length delimited. Does not implicitly {@link oracle.v1.QueryOracleScriptResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryOracleScriptResponse
                 * @static
                 * @param {oracle.v1.IQueryOracleScriptResponse} message QueryOracleScriptResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryOracleScriptResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryOracleScriptResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryOracleScriptResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryOracleScriptResponse} QueryOracleScriptResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryOracleScriptResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryOracleScriptResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.oracle_script = $root.oracle.v1.OracleScript.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryOracleScriptResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryOracleScriptResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryOracleScriptResponse} QueryOracleScriptResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryOracleScriptResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryOracleScriptResponse message.
                 * @function verify
                 * @memberof oracle.v1.QueryOracleScriptResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryOracleScriptResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.oracle_script != null && message.hasOwnProperty("oracle_script")) {
                        var error = $root.oracle.v1.OracleScript.verify(message.oracle_script);
                        if (error)
                            return "oracle_script." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryOracleScriptResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryOracleScriptResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryOracleScriptResponse} QueryOracleScriptResponse
                 */
                QueryOracleScriptResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryOracleScriptResponse)
                        return object;
                    var message = new $root.oracle.v1.QueryOracleScriptResponse();
                    if (object.oracle_script != null) {
                        if (typeof object.oracle_script !== "object")
                            throw TypeError(".oracle.v1.QueryOracleScriptResponse.oracle_script: object expected");
                        message.oracle_script = $root.oracle.v1.OracleScript.fromObject(object.oracle_script);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryOracleScriptResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryOracleScriptResponse
                 * @static
                 * @param {oracle.v1.QueryOracleScriptResponse} message QueryOracleScriptResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryOracleScriptResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.oracle_script = null;
                    if (message.oracle_script != null && message.hasOwnProperty("oracle_script"))
                        object.oracle_script = $root.oracle.v1.OracleScript.toObject(message.oracle_script, options);
                    return object;
                };
    
                /**
                 * Converts this QueryOracleScriptResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryOracleScriptResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryOracleScriptResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryOracleScriptResponse;
            })();
    
            v1.QueryRequestRequest = (function() {
    
                /**
                 * Properties of a QueryRequestRequest.
                 * @memberof oracle.v1
                 * @interface IQueryRequestRequest
                 * @property {Long|null} [request_id] QueryRequestRequest request_id
                 */
    
                /**
                 * Constructs a new QueryRequestRequest.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryRequestRequest.
                 * @implements IQueryRequestRequest
                 * @constructor
                 * @param {oracle.v1.IQueryRequestRequest=} [properties] Properties to set
                 */
                function QueryRequestRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryRequestRequest request_id.
                 * @member {Long} request_id
                 * @memberof oracle.v1.QueryRequestRequest
                 * @instance
                 */
                QueryRequestRequest.prototype.request_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified QueryRequestRequest message. Does not implicitly {@link oracle.v1.QueryRequestRequest.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryRequestRequest
                 * @static
                 * @param {oracle.v1.IQueryRequestRequest} message QueryRequestRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRequestRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request_id != null && Object.hasOwnProperty.call(message, "request_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.request_id);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryRequestRequest message, length delimited. Does not implicitly {@link oracle.v1.QueryRequestRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryRequestRequest
                 * @static
                 * @param {oracle.v1.IQueryRequestRequest} message QueryRequestRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRequestRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryRequestRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryRequestRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryRequestRequest} QueryRequestRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRequestRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryRequestRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.request_id = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryRequestRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryRequestRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryRequestRequest} QueryRequestRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRequestRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryRequestRequest message.
                 * @function verify
                 * @memberof oracle.v1.QueryRequestRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryRequestRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        if (!$util.isInteger(message.request_id) && !(message.request_id && $util.isInteger(message.request_id.low) && $util.isInteger(message.request_id.high)))
                            return "request_id: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a QueryRequestRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryRequestRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryRequestRequest} QueryRequestRequest
                 */
                QueryRequestRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryRequestRequest)
                        return object;
                    var message = new $root.oracle.v1.QueryRequestRequest();
                    if (object.request_id != null)
                        if ($util.Long)
                            (message.request_id = $util.Long.fromValue(object.request_id)).unsigned = true;
                        else if (typeof object.request_id === "string")
                            message.request_id = parseInt(object.request_id, 10);
                        else if (typeof object.request_id === "number")
                            message.request_id = object.request_id;
                        else if (typeof object.request_id === "object")
                            message.request_id = new $util.LongBits(object.request_id.low >>> 0, object.request_id.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryRequestRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryRequestRequest
                 * @static
                 * @param {oracle.v1.QueryRequestRequest} message QueryRequestRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryRequestRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.request_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.request_id = options.longs === String ? "0" : 0;
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        if (typeof message.request_id === "number")
                            object.request_id = options.longs === String ? String(message.request_id) : message.request_id;
                        else
                            object.request_id = options.longs === String ? $util.Long.prototype.toString.call(message.request_id) : options.longs === Number ? new $util.LongBits(message.request_id.low >>> 0, message.request_id.high >>> 0).toNumber(true) : message.request_id;
                    return object;
                };
    
                /**
                 * Converts this QueryRequestRequest to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryRequestRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryRequestRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryRequestRequest;
            })();
    
            v1.QueryRequestResponse = (function() {
    
                /**
                 * Properties of a QueryRequestResponse.
                 * @memberof oracle.v1
                 * @interface IQueryRequestResponse
                 * @property {oracle.v1.IRequest|null} [request] QueryRequestResponse request
                 * @property {Array.<oracle.v1.IReport>|null} [reports] QueryRequestResponse reports
                 * @property {oracle.v1.IResult|null} [result] QueryRequestResponse result
                 */
    
                /**
                 * Constructs a new QueryRequestResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryRequestResponse.
                 * @implements IQueryRequestResponse
                 * @constructor
                 * @param {oracle.v1.IQueryRequestResponse=} [properties] Properties to set
                 */
                function QueryRequestResponse(properties) {
                    this.reports = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryRequestResponse request.
                 * @member {oracle.v1.IRequest|null|undefined} request
                 * @memberof oracle.v1.QueryRequestResponse
                 * @instance
                 */
                QueryRequestResponse.prototype.request = null;
    
                /**
                 * QueryRequestResponse reports.
                 * @member {Array.<oracle.v1.IReport>} reports
                 * @memberof oracle.v1.QueryRequestResponse
                 * @instance
                 */
                QueryRequestResponse.prototype.reports = $util.emptyArray;
    
                /**
                 * QueryRequestResponse result.
                 * @member {oracle.v1.IResult|null|undefined} result
                 * @memberof oracle.v1.QueryRequestResponse
                 * @instance
                 */
                QueryRequestResponse.prototype.result = null;
    
                /**
                 * Encodes the specified QueryRequestResponse message. Does not implicitly {@link oracle.v1.QueryRequestResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryRequestResponse
                 * @static
                 * @param {oracle.v1.IQueryRequestResponse} message QueryRequestResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRequestResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && Object.hasOwnProperty.call(message, "request"))
                        $root.oracle.v1.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.reports != null && message.reports.length)
                        for (var i = 0; i < message.reports.length; ++i)
                            $root.oracle.v1.Report.encode(message.reports[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                        $root.oracle.v1.Result.encode(message.result, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryRequestResponse message, length delimited. Does not implicitly {@link oracle.v1.QueryRequestResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryRequestResponse
                 * @static
                 * @param {oracle.v1.IQueryRequestResponse} message QueryRequestResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRequestResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryRequestResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryRequestResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryRequestResponse} QueryRequestResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRequestResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryRequestResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.request = $root.oracle.v1.Request.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.reports && message.reports.length))
                                message.reports = [];
                            message.reports.push($root.oracle.v1.Report.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.result = $root.oracle.v1.Result.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryRequestResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryRequestResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryRequestResponse} QueryRequestResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRequestResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryRequestResponse message.
                 * @function verify
                 * @memberof oracle.v1.QueryRequestResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryRequestResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.oracle.v1.Request.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.reports != null && message.hasOwnProperty("reports")) {
                        if (!Array.isArray(message.reports))
                            return "reports: array expected";
                        for (var i = 0; i < message.reports.length; ++i) {
                            var error = $root.oracle.v1.Report.verify(message.reports[i]);
                            if (error)
                                return "reports." + error;
                        }
                    }
                    if (message.result != null && message.hasOwnProperty("result")) {
                        var error = $root.oracle.v1.Result.verify(message.result);
                        if (error)
                            return "result." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryRequestResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryRequestResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryRequestResponse} QueryRequestResponse
                 */
                QueryRequestResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryRequestResponse)
                        return object;
                    var message = new $root.oracle.v1.QueryRequestResponse();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".oracle.v1.QueryRequestResponse.request: object expected");
                        message.request = $root.oracle.v1.Request.fromObject(object.request);
                    }
                    if (object.reports) {
                        if (!Array.isArray(object.reports))
                            throw TypeError(".oracle.v1.QueryRequestResponse.reports: array expected");
                        message.reports = [];
                        for (var i = 0; i < object.reports.length; ++i) {
                            if (typeof object.reports[i] !== "object")
                                throw TypeError(".oracle.v1.QueryRequestResponse.reports: object expected");
                            message.reports[i] = $root.oracle.v1.Report.fromObject(object.reports[i]);
                        }
                    }
                    if (object.result != null) {
                        if (typeof object.result !== "object")
                            throw TypeError(".oracle.v1.QueryRequestResponse.result: object expected");
                        message.result = $root.oracle.v1.Result.fromObject(object.result);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryRequestResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryRequestResponse
                 * @static
                 * @param {oracle.v1.QueryRequestResponse} message QueryRequestResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryRequestResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.reports = [];
                    if (options.defaults) {
                        object.request = null;
                        object.result = null;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.oracle.v1.Request.toObject(message.request, options);
                    if (message.reports && message.reports.length) {
                        object.reports = [];
                        for (var j = 0; j < message.reports.length; ++j)
                            object.reports[j] = $root.oracle.v1.Report.toObject(message.reports[j], options);
                    }
                    if (message.result != null && message.hasOwnProperty("result"))
                        object.result = $root.oracle.v1.Result.toObject(message.result, options);
                    return object;
                };
    
                /**
                 * Converts this QueryRequestResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryRequestResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryRequestResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryRequestResponse;
            })();
    
            v1.QueryPendingRequestsRequest = (function() {
    
                /**
                 * Properties of a QueryPendingRequestsRequest.
                 * @memberof oracle.v1
                 * @interface IQueryPendingRequestsRequest
                 * @property {string|null} [validator_address] QueryPendingRequestsRequest validator_address
                 */
    
                /**
                 * Constructs a new QueryPendingRequestsRequest.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryPendingRequestsRequest.
                 * @implements IQueryPendingRequestsRequest
                 * @constructor
                 * @param {oracle.v1.IQueryPendingRequestsRequest=} [properties] Properties to set
                 */
                function QueryPendingRequestsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryPendingRequestsRequest validator_address.
                 * @member {string} validator_address
                 * @memberof oracle.v1.QueryPendingRequestsRequest
                 * @instance
                 */
                QueryPendingRequestsRequest.prototype.validator_address = "";
    
                /**
                 * Encodes the specified QueryPendingRequestsRequest message. Does not implicitly {@link oracle.v1.QueryPendingRequestsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryPendingRequestsRequest
                 * @static
                 * @param {oracle.v1.IQueryPendingRequestsRequest} message QueryPendingRequestsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPendingRequestsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.validator_address != null && Object.hasOwnProperty.call(message, "validator_address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.validator_address);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryPendingRequestsRequest message, length delimited. Does not implicitly {@link oracle.v1.QueryPendingRequestsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryPendingRequestsRequest
                 * @static
                 * @param {oracle.v1.IQueryPendingRequestsRequest} message QueryPendingRequestsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPendingRequestsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryPendingRequestsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryPendingRequestsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryPendingRequestsRequest} QueryPendingRequestsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPendingRequestsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryPendingRequestsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.validator_address = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryPendingRequestsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryPendingRequestsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryPendingRequestsRequest} QueryPendingRequestsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPendingRequestsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryPendingRequestsRequest message.
                 * @function verify
                 * @memberof oracle.v1.QueryPendingRequestsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryPendingRequestsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                        if (!$util.isString(message.validator_address))
                            return "validator_address: string expected";
                    return null;
                };
    
                /**
                 * Creates a QueryPendingRequestsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryPendingRequestsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryPendingRequestsRequest} QueryPendingRequestsRequest
                 */
                QueryPendingRequestsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryPendingRequestsRequest)
                        return object;
                    var message = new $root.oracle.v1.QueryPendingRequestsRequest();
                    if (object.validator_address != null)
                        message.validator_address = String(object.validator_address);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryPendingRequestsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryPendingRequestsRequest
                 * @static
                 * @param {oracle.v1.QueryPendingRequestsRequest} message QueryPendingRequestsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryPendingRequestsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.validator_address = "";
                    if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                        object.validator_address = message.validator_address;
                    return object;
                };
    
                /**
                 * Converts this QueryPendingRequestsRequest to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryPendingRequestsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryPendingRequestsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryPendingRequestsRequest;
            })();
    
            v1.QueryPendingRequestsResponse = (function() {
    
                /**
                 * Properties of a QueryPendingRequestsResponse.
                 * @memberof oracle.v1
                 * @interface IQueryPendingRequestsResponse
                 * @property {Array.<Long>|null} [request_ids] QueryPendingRequestsResponse request_ids
                 */
    
                /**
                 * Constructs a new QueryPendingRequestsResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryPendingRequestsResponse.
                 * @implements IQueryPendingRequestsResponse
                 * @constructor
                 * @param {oracle.v1.IQueryPendingRequestsResponse=} [properties] Properties to set
                 */
                function QueryPendingRequestsResponse(properties) {
                    this.request_ids = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryPendingRequestsResponse request_ids.
                 * @member {Array.<Long>} request_ids
                 * @memberof oracle.v1.QueryPendingRequestsResponse
                 * @instance
                 */
                QueryPendingRequestsResponse.prototype.request_ids = $util.emptyArray;
    
                /**
                 * Encodes the specified QueryPendingRequestsResponse message. Does not implicitly {@link oracle.v1.QueryPendingRequestsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryPendingRequestsResponse
                 * @static
                 * @param {oracle.v1.IQueryPendingRequestsResponse} message QueryPendingRequestsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPendingRequestsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request_ids != null && message.request_ids.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (var i = 0; i < message.request_ids.length; ++i)
                            writer.uint64(message.request_ids[i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryPendingRequestsResponse message, length delimited. Does not implicitly {@link oracle.v1.QueryPendingRequestsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryPendingRequestsResponse
                 * @static
                 * @param {oracle.v1.IQueryPendingRequestsResponse} message QueryPendingRequestsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPendingRequestsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryPendingRequestsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryPendingRequestsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryPendingRequestsResponse} QueryPendingRequestsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPendingRequestsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryPendingRequestsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.request_ids && message.request_ids.length))
                                message.request_ids = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.request_ids.push(reader.uint64());
                            } else
                                message.request_ids.push(reader.uint64());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryPendingRequestsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryPendingRequestsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryPendingRequestsResponse} QueryPendingRequestsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPendingRequestsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryPendingRequestsResponse message.
                 * @function verify
                 * @memberof oracle.v1.QueryPendingRequestsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryPendingRequestsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request_ids != null && message.hasOwnProperty("request_ids")) {
                        if (!Array.isArray(message.request_ids))
                            return "request_ids: array expected";
                        for (var i = 0; i < message.request_ids.length; ++i)
                            if (!$util.isInteger(message.request_ids[i]) && !(message.request_ids[i] && $util.isInteger(message.request_ids[i].low) && $util.isInteger(message.request_ids[i].high)))
                                return "request_ids: integer|Long[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryPendingRequestsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryPendingRequestsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryPendingRequestsResponse} QueryPendingRequestsResponse
                 */
                QueryPendingRequestsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryPendingRequestsResponse)
                        return object;
                    var message = new $root.oracle.v1.QueryPendingRequestsResponse();
                    if (object.request_ids) {
                        if (!Array.isArray(object.request_ids))
                            throw TypeError(".oracle.v1.QueryPendingRequestsResponse.request_ids: array expected");
                        message.request_ids = [];
                        for (var i = 0; i < object.request_ids.length; ++i)
                            if ($util.Long)
                                (message.request_ids[i] = $util.Long.fromValue(object.request_ids[i])).unsigned = true;
                            else if (typeof object.request_ids[i] === "string")
                                message.request_ids[i] = parseInt(object.request_ids[i], 10);
                            else if (typeof object.request_ids[i] === "number")
                                message.request_ids[i] = object.request_ids[i];
                            else if (typeof object.request_ids[i] === "object")
                                message.request_ids[i] = new $util.LongBits(object.request_ids[i].low >>> 0, object.request_ids[i].high >>> 0).toNumber(true);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryPendingRequestsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryPendingRequestsResponse
                 * @static
                 * @param {oracle.v1.QueryPendingRequestsResponse} message QueryPendingRequestsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryPendingRequestsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.request_ids = [];
                    if (message.request_ids && message.request_ids.length) {
                        object.request_ids = [];
                        for (var j = 0; j < message.request_ids.length; ++j)
                            if (typeof message.request_ids[j] === "number")
                                object.request_ids[j] = options.longs === String ? String(message.request_ids[j]) : message.request_ids[j];
                            else
                                object.request_ids[j] = options.longs === String ? $util.Long.prototype.toString.call(message.request_ids[j]) : options.longs === Number ? new $util.LongBits(message.request_ids[j].low >>> 0, message.request_ids[j].high >>> 0).toNumber(true) : message.request_ids[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this QueryPendingRequestsResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryPendingRequestsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryPendingRequestsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryPendingRequestsResponse;
            })();
    
            v1.QueryParamsRequest = (function() {
    
                /**
                 * Properties of a QueryParamsRequest.
                 * @memberof oracle.v1
                 * @interface IQueryParamsRequest
                 */
    
                /**
                 * Constructs a new QueryParamsRequest.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryParamsRequest.
                 * @implements IQueryParamsRequest
                 * @constructor
                 * @param {oracle.v1.IQueryParamsRequest=} [properties] Properties to set
                 */
                function QueryParamsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified QueryParamsRequest message. Does not implicitly {@link oracle.v1.QueryParamsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryParamsRequest
                 * @static
                 * @param {oracle.v1.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryParamsRequest message, length delimited. Does not implicitly {@link oracle.v1.QueryParamsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryParamsRequest
                 * @static
                 * @param {oracle.v1.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryParamsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryParamsRequest message.
                 * @function verify
                 * @memberof oracle.v1.QueryParamsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryParamsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a QueryParamsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryParamsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryParamsRequest} QueryParamsRequest
                 */
                QueryParamsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryParamsRequest)
                        return object;
                    return new $root.oracle.v1.QueryParamsRequest();
                };
    
                /**
                 * Creates a plain object from a QueryParamsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryParamsRequest
                 * @static
                 * @param {oracle.v1.QueryParamsRequest} message QueryParamsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryParamsRequest.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this QueryParamsRequest to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryParamsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryParamsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryParamsRequest;
            })();
    
            v1.QueryParamsResponse = (function() {
    
                /**
                 * Properties of a QueryParamsResponse.
                 * @memberof oracle.v1
                 * @interface IQueryParamsResponse
                 * @property {oracle.v1.IParams|null} [params] QueryParamsResponse params
                 */
    
                /**
                 * Constructs a new QueryParamsResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryParamsResponse.
                 * @implements IQueryParamsResponse
                 * @constructor
                 * @param {oracle.v1.IQueryParamsResponse=} [properties] Properties to set
                 */
                function QueryParamsResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryParamsResponse params.
                 * @member {oracle.v1.IParams|null|undefined} params
                 * @memberof oracle.v1.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.params = null;
    
                /**
                 * Encodes the specified QueryParamsResponse message. Does not implicitly {@link oracle.v1.QueryParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryParamsResponse
                 * @static
                 * @param {oracle.v1.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.oracle.v1.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryParamsResponse message, length delimited. Does not implicitly {@link oracle.v1.QueryParamsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryParamsResponse
                 * @static
                 * @param {oracle.v1.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryParamsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.params = $root.oracle.v1.Params.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryParamsResponse message.
                 * @function verify
                 * @memberof oracle.v1.QueryParamsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryParamsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        var error = $root.oracle.v1.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryParamsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryParamsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryParamsResponse} QueryParamsResponse
                 */
                QueryParamsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryParamsResponse)
                        return object;
                    var message = new $root.oracle.v1.QueryParamsResponse();
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".oracle.v1.QueryParamsResponse.params: object expected");
                        message.params = $root.oracle.v1.Params.fromObject(object.params);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryParamsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryParamsResponse
                 * @static
                 * @param {oracle.v1.QueryParamsResponse} message QueryParamsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryParamsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.params = null;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.oracle.v1.Params.toObject(message.params, options);
                    return object;
                };
    
                /**
                 * Converts this QueryParamsResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryParamsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryParamsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryParamsResponse;
            })();
    
            v1.QueryValidatorRequest = (function() {
    
                /**
                 * Properties of a QueryValidatorRequest.
                 * @memberof oracle.v1
                 * @interface IQueryValidatorRequest
                 * @property {string|null} [validator_address] QueryValidatorRequest validator_address
                 */
    
                /**
                 * Constructs a new QueryValidatorRequest.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryValidatorRequest.
                 * @implements IQueryValidatorRequest
                 * @constructor
                 * @param {oracle.v1.IQueryValidatorRequest=} [properties] Properties to set
                 */
                function QueryValidatorRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryValidatorRequest validator_address.
                 * @member {string} validator_address
                 * @memberof oracle.v1.QueryValidatorRequest
                 * @instance
                 */
                QueryValidatorRequest.prototype.validator_address = "";
    
                /**
                 * Encodes the specified QueryValidatorRequest message. Does not implicitly {@link oracle.v1.QueryValidatorRequest.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryValidatorRequest
                 * @static
                 * @param {oracle.v1.IQueryValidatorRequest} message QueryValidatorRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.validator_address != null && Object.hasOwnProperty.call(message, "validator_address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.validator_address);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryValidatorRequest message, length delimited. Does not implicitly {@link oracle.v1.QueryValidatorRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryValidatorRequest
                 * @static
                 * @param {oracle.v1.IQueryValidatorRequest} message QueryValidatorRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryValidatorRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryValidatorRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryValidatorRequest} QueryValidatorRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryValidatorRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.validator_address = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryValidatorRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryValidatorRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryValidatorRequest} QueryValidatorRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryValidatorRequest message.
                 * @function verify
                 * @memberof oracle.v1.QueryValidatorRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryValidatorRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                        if (!$util.isString(message.validator_address))
                            return "validator_address: string expected";
                    return null;
                };
    
                /**
                 * Creates a QueryValidatorRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryValidatorRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryValidatorRequest} QueryValidatorRequest
                 */
                QueryValidatorRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryValidatorRequest)
                        return object;
                    var message = new $root.oracle.v1.QueryValidatorRequest();
                    if (object.validator_address != null)
                        message.validator_address = String(object.validator_address);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryValidatorRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryValidatorRequest
                 * @static
                 * @param {oracle.v1.QueryValidatorRequest} message QueryValidatorRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryValidatorRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.validator_address = "";
                    if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                        object.validator_address = message.validator_address;
                    return object;
                };
    
                /**
                 * Converts this QueryValidatorRequest to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryValidatorRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryValidatorRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryValidatorRequest;
            })();
    
            v1.QueryValidatorResponse = (function() {
    
                /**
                 * Properties of a QueryValidatorResponse.
                 * @memberof oracle.v1
                 * @interface IQueryValidatorResponse
                 * @property {oracle.v1.IValidatorStatus|null} [status] QueryValidatorResponse status
                 */
    
                /**
                 * Constructs a new QueryValidatorResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryValidatorResponse.
                 * @implements IQueryValidatorResponse
                 * @constructor
                 * @param {oracle.v1.IQueryValidatorResponse=} [properties] Properties to set
                 */
                function QueryValidatorResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryValidatorResponse status.
                 * @member {oracle.v1.IValidatorStatus|null|undefined} status
                 * @memberof oracle.v1.QueryValidatorResponse
                 * @instance
                 */
                QueryValidatorResponse.prototype.status = null;
    
                /**
                 * Encodes the specified QueryValidatorResponse message. Does not implicitly {@link oracle.v1.QueryValidatorResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryValidatorResponse
                 * @static
                 * @param {oracle.v1.IQueryValidatorResponse} message QueryValidatorResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                        $root.oracle.v1.ValidatorStatus.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryValidatorResponse message, length delimited. Does not implicitly {@link oracle.v1.QueryValidatorResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryValidatorResponse
                 * @static
                 * @param {oracle.v1.IQueryValidatorResponse} message QueryValidatorResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryValidatorResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryValidatorResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryValidatorResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryValidatorResponse} QueryValidatorResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryValidatorResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.status = $root.oracle.v1.ValidatorStatus.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryValidatorResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryValidatorResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryValidatorResponse} QueryValidatorResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryValidatorResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryValidatorResponse message.
                 * @function verify
                 * @memberof oracle.v1.QueryValidatorResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryValidatorResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        var error = $root.oracle.v1.ValidatorStatus.verify(message.status);
                        if (error)
                            return "status." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryValidatorResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryValidatorResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryValidatorResponse} QueryValidatorResponse
                 */
                QueryValidatorResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryValidatorResponse)
                        return object;
                    var message = new $root.oracle.v1.QueryValidatorResponse();
                    if (object.status != null) {
                        if (typeof object.status !== "object")
                            throw TypeError(".oracle.v1.QueryValidatorResponse.status: object expected");
                        message.status = $root.oracle.v1.ValidatorStatus.fromObject(object.status);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryValidatorResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryValidatorResponse
                 * @static
                 * @param {oracle.v1.QueryValidatorResponse} message QueryValidatorResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryValidatorResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.status = null;
                    if (message.status != null && message.hasOwnProperty("status"))
                        object.status = $root.oracle.v1.ValidatorStatus.toObject(message.status, options);
                    return object;
                };
    
                /**
                 * Converts this QueryValidatorResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryValidatorResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryValidatorResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryValidatorResponse;
            })();
    
            v1.QueryIsReporterRequest = (function() {
    
                /**
                 * Properties of a QueryIsReporterRequest.
                 * @memberof oracle.v1
                 * @interface IQueryIsReporterRequest
                 * @property {string|null} [validator_address] QueryIsReporterRequest validator_address
                 * @property {string|null} [reporter_address] QueryIsReporterRequest reporter_address
                 */
    
                /**
                 * Constructs a new QueryIsReporterRequest.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryIsReporterRequest.
                 * @implements IQueryIsReporterRequest
                 * @constructor
                 * @param {oracle.v1.IQueryIsReporterRequest=} [properties] Properties to set
                 */
                function QueryIsReporterRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryIsReporterRequest validator_address.
                 * @member {string} validator_address
                 * @memberof oracle.v1.QueryIsReporterRequest
                 * @instance
                 */
                QueryIsReporterRequest.prototype.validator_address = "";
    
                /**
                 * QueryIsReporterRequest reporter_address.
                 * @member {string} reporter_address
                 * @memberof oracle.v1.QueryIsReporterRequest
                 * @instance
                 */
                QueryIsReporterRequest.prototype.reporter_address = "";
    
                /**
                 * Encodes the specified QueryIsReporterRequest message. Does not implicitly {@link oracle.v1.QueryIsReporterRequest.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryIsReporterRequest
                 * @static
                 * @param {oracle.v1.IQueryIsReporterRequest} message QueryIsReporterRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryIsReporterRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.validator_address != null && Object.hasOwnProperty.call(message, "validator_address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.validator_address);
                    if (message.reporter_address != null && Object.hasOwnProperty.call(message, "reporter_address"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.reporter_address);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryIsReporterRequest message, length delimited. Does not implicitly {@link oracle.v1.QueryIsReporterRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryIsReporterRequest
                 * @static
                 * @param {oracle.v1.IQueryIsReporterRequest} message QueryIsReporterRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryIsReporterRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryIsReporterRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryIsReporterRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryIsReporterRequest} QueryIsReporterRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryIsReporterRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryIsReporterRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.validator_address = reader.string();
                            break;
                        case 2:
                            message.reporter_address = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryIsReporterRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryIsReporterRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryIsReporterRequest} QueryIsReporterRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryIsReporterRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryIsReporterRequest message.
                 * @function verify
                 * @memberof oracle.v1.QueryIsReporterRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryIsReporterRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                        if (!$util.isString(message.validator_address))
                            return "validator_address: string expected";
                    if (message.reporter_address != null && message.hasOwnProperty("reporter_address"))
                        if (!$util.isString(message.reporter_address))
                            return "reporter_address: string expected";
                    return null;
                };
    
                /**
                 * Creates a QueryIsReporterRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryIsReporterRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryIsReporterRequest} QueryIsReporterRequest
                 */
                QueryIsReporterRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryIsReporterRequest)
                        return object;
                    var message = new $root.oracle.v1.QueryIsReporterRequest();
                    if (object.validator_address != null)
                        message.validator_address = String(object.validator_address);
                    if (object.reporter_address != null)
                        message.reporter_address = String(object.reporter_address);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryIsReporterRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryIsReporterRequest
                 * @static
                 * @param {oracle.v1.QueryIsReporterRequest} message QueryIsReporterRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryIsReporterRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.validator_address = "";
                        object.reporter_address = "";
                    }
                    if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                        object.validator_address = message.validator_address;
                    if (message.reporter_address != null && message.hasOwnProperty("reporter_address"))
                        object.reporter_address = message.reporter_address;
                    return object;
                };
    
                /**
                 * Converts this QueryIsReporterRequest to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryIsReporterRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryIsReporterRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryIsReporterRequest;
            })();
    
            v1.QueryIsReporterResponse = (function() {
    
                /**
                 * Properties of a QueryIsReporterResponse.
                 * @memberof oracle.v1
                 * @interface IQueryIsReporterResponse
                 * @property {boolean|null} [is_reporter] QueryIsReporterResponse is_reporter
                 */
    
                /**
                 * Constructs a new QueryIsReporterResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryIsReporterResponse.
                 * @implements IQueryIsReporterResponse
                 * @constructor
                 * @param {oracle.v1.IQueryIsReporterResponse=} [properties] Properties to set
                 */
                function QueryIsReporterResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryIsReporterResponse is_reporter.
                 * @member {boolean} is_reporter
                 * @memberof oracle.v1.QueryIsReporterResponse
                 * @instance
                 */
                QueryIsReporterResponse.prototype.is_reporter = false;
    
                /**
                 * Encodes the specified QueryIsReporterResponse message. Does not implicitly {@link oracle.v1.QueryIsReporterResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryIsReporterResponse
                 * @static
                 * @param {oracle.v1.IQueryIsReporterResponse} message QueryIsReporterResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryIsReporterResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.is_reporter != null && Object.hasOwnProperty.call(message, "is_reporter"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.is_reporter);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryIsReporterResponse message, length delimited. Does not implicitly {@link oracle.v1.QueryIsReporterResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryIsReporterResponse
                 * @static
                 * @param {oracle.v1.IQueryIsReporterResponse} message QueryIsReporterResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryIsReporterResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryIsReporterResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryIsReporterResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryIsReporterResponse} QueryIsReporterResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryIsReporterResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryIsReporterResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.is_reporter = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryIsReporterResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryIsReporterResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryIsReporterResponse} QueryIsReporterResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryIsReporterResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryIsReporterResponse message.
                 * @function verify
                 * @memberof oracle.v1.QueryIsReporterResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryIsReporterResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.is_reporter != null && message.hasOwnProperty("is_reporter"))
                        if (typeof message.is_reporter !== "boolean")
                            return "is_reporter: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a QueryIsReporterResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryIsReporterResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryIsReporterResponse} QueryIsReporterResponse
                 */
                QueryIsReporterResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryIsReporterResponse)
                        return object;
                    var message = new $root.oracle.v1.QueryIsReporterResponse();
                    if (object.is_reporter != null)
                        message.is_reporter = Boolean(object.is_reporter);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryIsReporterResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryIsReporterResponse
                 * @static
                 * @param {oracle.v1.QueryIsReporterResponse} message QueryIsReporterResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryIsReporterResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.is_reporter = false;
                    if (message.is_reporter != null && message.hasOwnProperty("is_reporter"))
                        object.is_reporter = message.is_reporter;
                    return object;
                };
    
                /**
                 * Converts this QueryIsReporterResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryIsReporterResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryIsReporterResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryIsReporterResponse;
            })();
    
            v1.QueryReportersRequest = (function() {
    
                /**
                 * Properties of a QueryReportersRequest.
                 * @memberof oracle.v1
                 * @interface IQueryReportersRequest
                 * @property {string|null} [validator_address] QueryReportersRequest validator_address
                 */
    
                /**
                 * Constructs a new QueryReportersRequest.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryReportersRequest.
                 * @implements IQueryReportersRequest
                 * @constructor
                 * @param {oracle.v1.IQueryReportersRequest=} [properties] Properties to set
                 */
                function QueryReportersRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryReportersRequest validator_address.
                 * @member {string} validator_address
                 * @memberof oracle.v1.QueryReportersRequest
                 * @instance
                 */
                QueryReportersRequest.prototype.validator_address = "";
    
                /**
                 * Encodes the specified QueryReportersRequest message. Does not implicitly {@link oracle.v1.QueryReportersRequest.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryReportersRequest
                 * @static
                 * @param {oracle.v1.IQueryReportersRequest} message QueryReportersRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryReportersRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.validator_address != null && Object.hasOwnProperty.call(message, "validator_address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.validator_address);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryReportersRequest message, length delimited. Does not implicitly {@link oracle.v1.QueryReportersRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryReportersRequest
                 * @static
                 * @param {oracle.v1.IQueryReportersRequest} message QueryReportersRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryReportersRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryReportersRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryReportersRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryReportersRequest} QueryReportersRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryReportersRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryReportersRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.validator_address = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryReportersRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryReportersRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryReportersRequest} QueryReportersRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryReportersRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryReportersRequest message.
                 * @function verify
                 * @memberof oracle.v1.QueryReportersRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryReportersRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                        if (!$util.isString(message.validator_address))
                            return "validator_address: string expected";
                    return null;
                };
    
                /**
                 * Creates a QueryReportersRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryReportersRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryReportersRequest} QueryReportersRequest
                 */
                QueryReportersRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryReportersRequest)
                        return object;
                    var message = new $root.oracle.v1.QueryReportersRequest();
                    if (object.validator_address != null)
                        message.validator_address = String(object.validator_address);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryReportersRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryReportersRequest
                 * @static
                 * @param {oracle.v1.QueryReportersRequest} message QueryReportersRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryReportersRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.validator_address = "";
                    if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                        object.validator_address = message.validator_address;
                    return object;
                };
    
                /**
                 * Converts this QueryReportersRequest to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryReportersRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryReportersRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryReportersRequest;
            })();
    
            v1.QueryReportersResponse = (function() {
    
                /**
                 * Properties of a QueryReportersResponse.
                 * @memberof oracle.v1
                 * @interface IQueryReportersResponse
                 * @property {Array.<string>|null} [reporter] QueryReportersResponse reporter
                 */
    
                /**
                 * Constructs a new QueryReportersResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryReportersResponse.
                 * @implements IQueryReportersResponse
                 * @constructor
                 * @param {oracle.v1.IQueryReportersResponse=} [properties] Properties to set
                 */
                function QueryReportersResponse(properties) {
                    this.reporter = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryReportersResponse reporter.
                 * @member {Array.<string>} reporter
                 * @memberof oracle.v1.QueryReportersResponse
                 * @instance
                 */
                QueryReportersResponse.prototype.reporter = $util.emptyArray;
    
                /**
                 * Encodes the specified QueryReportersResponse message. Does not implicitly {@link oracle.v1.QueryReportersResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryReportersResponse
                 * @static
                 * @param {oracle.v1.IQueryReportersResponse} message QueryReportersResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryReportersResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.reporter != null && message.reporter.length)
                        for (var i = 0; i < message.reporter.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.reporter[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryReportersResponse message, length delimited. Does not implicitly {@link oracle.v1.QueryReportersResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryReportersResponse
                 * @static
                 * @param {oracle.v1.IQueryReportersResponse} message QueryReportersResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryReportersResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryReportersResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryReportersResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryReportersResponse} QueryReportersResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryReportersResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryReportersResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.reporter && message.reporter.length))
                                message.reporter = [];
                            message.reporter.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryReportersResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryReportersResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryReportersResponse} QueryReportersResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryReportersResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryReportersResponse message.
                 * @function verify
                 * @memberof oracle.v1.QueryReportersResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryReportersResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.reporter != null && message.hasOwnProperty("reporter")) {
                        if (!Array.isArray(message.reporter))
                            return "reporter: array expected";
                        for (var i = 0; i < message.reporter.length; ++i)
                            if (!$util.isString(message.reporter[i]))
                                return "reporter: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryReportersResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryReportersResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryReportersResponse} QueryReportersResponse
                 */
                QueryReportersResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryReportersResponse)
                        return object;
                    var message = new $root.oracle.v1.QueryReportersResponse();
                    if (object.reporter) {
                        if (!Array.isArray(object.reporter))
                            throw TypeError(".oracle.v1.QueryReportersResponse.reporter: array expected");
                        message.reporter = [];
                        for (var i = 0; i < object.reporter.length; ++i)
                            message.reporter[i] = String(object.reporter[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryReportersResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryReportersResponse
                 * @static
                 * @param {oracle.v1.QueryReportersResponse} message QueryReportersResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryReportersResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.reporter = [];
                    if (message.reporter && message.reporter.length) {
                        object.reporter = [];
                        for (var j = 0; j < message.reporter.length; ++j)
                            object.reporter[j] = message.reporter[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this QueryReportersResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryReportersResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryReportersResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryReportersResponse;
            })();
    
            v1.QueryActiveValidatorsRequest = (function() {
    
                /**
                 * Properties of a QueryActiveValidatorsRequest.
                 * @memberof oracle.v1
                 * @interface IQueryActiveValidatorsRequest
                 */
    
                /**
                 * Constructs a new QueryActiveValidatorsRequest.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryActiveValidatorsRequest.
                 * @implements IQueryActiveValidatorsRequest
                 * @constructor
                 * @param {oracle.v1.IQueryActiveValidatorsRequest=} [properties] Properties to set
                 */
                function QueryActiveValidatorsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified QueryActiveValidatorsRequest message. Does not implicitly {@link oracle.v1.QueryActiveValidatorsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryActiveValidatorsRequest
                 * @static
                 * @param {oracle.v1.IQueryActiveValidatorsRequest} message QueryActiveValidatorsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryActiveValidatorsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryActiveValidatorsRequest message, length delimited. Does not implicitly {@link oracle.v1.QueryActiveValidatorsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryActiveValidatorsRequest
                 * @static
                 * @param {oracle.v1.IQueryActiveValidatorsRequest} message QueryActiveValidatorsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryActiveValidatorsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryActiveValidatorsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryActiveValidatorsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryActiveValidatorsRequest} QueryActiveValidatorsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryActiveValidatorsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryActiveValidatorsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryActiveValidatorsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryActiveValidatorsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryActiveValidatorsRequest} QueryActiveValidatorsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryActiveValidatorsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryActiveValidatorsRequest message.
                 * @function verify
                 * @memberof oracle.v1.QueryActiveValidatorsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryActiveValidatorsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a QueryActiveValidatorsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryActiveValidatorsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryActiveValidatorsRequest} QueryActiveValidatorsRequest
                 */
                QueryActiveValidatorsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryActiveValidatorsRequest)
                        return object;
                    return new $root.oracle.v1.QueryActiveValidatorsRequest();
                };
    
                /**
                 * Creates a plain object from a QueryActiveValidatorsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryActiveValidatorsRequest
                 * @static
                 * @param {oracle.v1.QueryActiveValidatorsRequest} message QueryActiveValidatorsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryActiveValidatorsRequest.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this QueryActiveValidatorsRequest to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryActiveValidatorsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryActiveValidatorsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryActiveValidatorsRequest;
            })();
    
            v1.QueryActiveValidatorsResponse = (function() {
    
                /**
                 * Properties of a QueryActiveValidatorsResponse.
                 * @memberof oracle.v1
                 * @interface IQueryActiveValidatorsResponse
                 * @property {Array.<oracle.v1.IActiveValidator>|null} [validators] QueryActiveValidatorsResponse validators
                 */
    
                /**
                 * Constructs a new QueryActiveValidatorsResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryActiveValidatorsResponse.
                 * @implements IQueryActiveValidatorsResponse
                 * @constructor
                 * @param {oracle.v1.IQueryActiveValidatorsResponse=} [properties] Properties to set
                 */
                function QueryActiveValidatorsResponse(properties) {
                    this.validators = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryActiveValidatorsResponse validators.
                 * @member {Array.<oracle.v1.IActiveValidator>} validators
                 * @memberof oracle.v1.QueryActiveValidatorsResponse
                 * @instance
                 */
                QueryActiveValidatorsResponse.prototype.validators = $util.emptyArray;
    
                /**
                 * Encodes the specified QueryActiveValidatorsResponse message. Does not implicitly {@link oracle.v1.QueryActiveValidatorsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryActiveValidatorsResponse
                 * @static
                 * @param {oracle.v1.IQueryActiveValidatorsResponse} message QueryActiveValidatorsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryActiveValidatorsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.validators != null && message.validators.length)
                        for (var i = 0; i < message.validators.length; ++i)
                            $root.oracle.v1.ActiveValidator.encode(message.validators[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryActiveValidatorsResponse message, length delimited. Does not implicitly {@link oracle.v1.QueryActiveValidatorsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryActiveValidatorsResponse
                 * @static
                 * @param {oracle.v1.IQueryActiveValidatorsResponse} message QueryActiveValidatorsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryActiveValidatorsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryActiveValidatorsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryActiveValidatorsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryActiveValidatorsResponse} QueryActiveValidatorsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryActiveValidatorsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryActiveValidatorsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.validators && message.validators.length))
                                message.validators = [];
                            message.validators.push($root.oracle.v1.ActiveValidator.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryActiveValidatorsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryActiveValidatorsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryActiveValidatorsResponse} QueryActiveValidatorsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryActiveValidatorsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryActiveValidatorsResponse message.
                 * @function verify
                 * @memberof oracle.v1.QueryActiveValidatorsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryActiveValidatorsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.validators != null && message.hasOwnProperty("validators")) {
                        if (!Array.isArray(message.validators))
                            return "validators: array expected";
                        for (var i = 0; i < message.validators.length; ++i) {
                            var error = $root.oracle.v1.ActiveValidator.verify(message.validators[i]);
                            if (error)
                                return "validators." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryActiveValidatorsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryActiveValidatorsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryActiveValidatorsResponse} QueryActiveValidatorsResponse
                 */
                QueryActiveValidatorsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryActiveValidatorsResponse)
                        return object;
                    var message = new $root.oracle.v1.QueryActiveValidatorsResponse();
                    if (object.validators) {
                        if (!Array.isArray(object.validators))
                            throw TypeError(".oracle.v1.QueryActiveValidatorsResponse.validators: array expected");
                        message.validators = [];
                        for (var i = 0; i < object.validators.length; ++i) {
                            if (typeof object.validators[i] !== "object")
                                throw TypeError(".oracle.v1.QueryActiveValidatorsResponse.validators: object expected");
                            message.validators[i] = $root.oracle.v1.ActiveValidator.fromObject(object.validators[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryActiveValidatorsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryActiveValidatorsResponse
                 * @static
                 * @param {oracle.v1.QueryActiveValidatorsResponse} message QueryActiveValidatorsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryActiveValidatorsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.validators = [];
                    if (message.validators && message.validators.length) {
                        object.validators = [];
                        for (var j = 0; j < message.validators.length; ++j)
                            object.validators[j] = $root.oracle.v1.ActiveValidator.toObject(message.validators[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this QueryActiveValidatorsResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryActiveValidatorsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryActiveValidatorsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryActiveValidatorsResponse;
            })();
    
            v1.QueryRequestSearchRequest = (function() {
    
                /**
                 * Properties of a QueryRequestSearchRequest.
                 * @memberof oracle.v1
                 * @interface IQueryRequestSearchRequest
                 * @property {Long|null} [oracle_script_id] QueryRequestSearchRequest oracle_script_id
                 * @property {string|null} [calldata] QueryRequestSearchRequest calldata
                 * @property {Long|null} [ask_count] QueryRequestSearchRequest ask_count
                 * @property {Long|null} [min_count] QueryRequestSearchRequest min_count
                 */
    
                /**
                 * Constructs a new QueryRequestSearchRequest.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryRequestSearchRequest.
                 * @implements IQueryRequestSearchRequest
                 * @constructor
                 * @param {oracle.v1.IQueryRequestSearchRequest=} [properties] Properties to set
                 */
                function QueryRequestSearchRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryRequestSearchRequest oracle_script_id.
                 * @member {Long} oracle_script_id
                 * @memberof oracle.v1.QueryRequestSearchRequest
                 * @instance
                 */
                QueryRequestSearchRequest.prototype.oracle_script_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * QueryRequestSearchRequest calldata.
                 * @member {string} calldata
                 * @memberof oracle.v1.QueryRequestSearchRequest
                 * @instance
                 */
                QueryRequestSearchRequest.prototype.calldata = "";
    
                /**
                 * QueryRequestSearchRequest ask_count.
                 * @member {Long} ask_count
                 * @memberof oracle.v1.QueryRequestSearchRequest
                 * @instance
                 */
                QueryRequestSearchRequest.prototype.ask_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * QueryRequestSearchRequest min_count.
                 * @member {Long} min_count
                 * @memberof oracle.v1.QueryRequestSearchRequest
                 * @instance
                 */
                QueryRequestSearchRequest.prototype.min_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified QueryRequestSearchRequest message. Does not implicitly {@link oracle.v1.QueryRequestSearchRequest.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryRequestSearchRequest
                 * @static
                 * @param {oracle.v1.IQueryRequestSearchRequest} message QueryRequestSearchRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRequestSearchRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.oracle_script_id != null && Object.hasOwnProperty.call(message, "oracle_script_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.oracle_script_id);
                    if (message.calldata != null && Object.hasOwnProperty.call(message, "calldata"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.calldata);
                    if (message.ask_count != null && Object.hasOwnProperty.call(message, "ask_count"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.ask_count);
                    if (message.min_count != null && Object.hasOwnProperty.call(message, "min_count"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.min_count);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryRequestSearchRequest message, length delimited. Does not implicitly {@link oracle.v1.QueryRequestSearchRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryRequestSearchRequest
                 * @static
                 * @param {oracle.v1.IQueryRequestSearchRequest} message QueryRequestSearchRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRequestSearchRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryRequestSearchRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryRequestSearchRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryRequestSearchRequest} QueryRequestSearchRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRequestSearchRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryRequestSearchRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.oracle_script_id = reader.uint64();
                            break;
                        case 2:
                            message.calldata = reader.string();
                            break;
                        case 3:
                            message.ask_count = reader.uint64();
                            break;
                        case 4:
                            message.min_count = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryRequestSearchRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryRequestSearchRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryRequestSearchRequest} QueryRequestSearchRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRequestSearchRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryRequestSearchRequest message.
                 * @function verify
                 * @memberof oracle.v1.QueryRequestSearchRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryRequestSearchRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.oracle_script_id != null && message.hasOwnProperty("oracle_script_id"))
                        if (!$util.isInteger(message.oracle_script_id) && !(message.oracle_script_id && $util.isInteger(message.oracle_script_id.low) && $util.isInteger(message.oracle_script_id.high)))
                            return "oracle_script_id: integer|Long expected";
                    if (message.calldata != null && message.hasOwnProperty("calldata"))
                        if (!$util.isString(message.calldata))
                            return "calldata: string expected";
                    if (message.ask_count != null && message.hasOwnProperty("ask_count"))
                        if (!$util.isInteger(message.ask_count) && !(message.ask_count && $util.isInteger(message.ask_count.low) && $util.isInteger(message.ask_count.high)))
                            return "ask_count: integer|Long expected";
                    if (message.min_count != null && message.hasOwnProperty("min_count"))
                        if (!$util.isInteger(message.min_count) && !(message.min_count && $util.isInteger(message.min_count.low) && $util.isInteger(message.min_count.high)))
                            return "min_count: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a QueryRequestSearchRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryRequestSearchRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryRequestSearchRequest} QueryRequestSearchRequest
                 */
                QueryRequestSearchRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryRequestSearchRequest)
                        return object;
                    var message = new $root.oracle.v1.QueryRequestSearchRequest();
                    if (object.oracle_script_id != null)
                        if ($util.Long)
                            (message.oracle_script_id = $util.Long.fromValue(object.oracle_script_id)).unsigned = true;
                        else if (typeof object.oracle_script_id === "string")
                            message.oracle_script_id = parseInt(object.oracle_script_id, 10);
                        else if (typeof object.oracle_script_id === "number")
                            message.oracle_script_id = object.oracle_script_id;
                        else if (typeof object.oracle_script_id === "object")
                            message.oracle_script_id = new $util.LongBits(object.oracle_script_id.low >>> 0, object.oracle_script_id.high >>> 0).toNumber(true);
                    if (object.calldata != null)
                        message.calldata = String(object.calldata);
                    if (object.ask_count != null)
                        if ($util.Long)
                            (message.ask_count = $util.Long.fromValue(object.ask_count)).unsigned = true;
                        else if (typeof object.ask_count === "string")
                            message.ask_count = parseInt(object.ask_count, 10);
                        else if (typeof object.ask_count === "number")
                            message.ask_count = object.ask_count;
                        else if (typeof object.ask_count === "object")
                            message.ask_count = new $util.LongBits(object.ask_count.low >>> 0, object.ask_count.high >>> 0).toNumber(true);
                    if (object.min_count != null)
                        if ($util.Long)
                            (message.min_count = $util.Long.fromValue(object.min_count)).unsigned = true;
                        else if (typeof object.min_count === "string")
                            message.min_count = parseInt(object.min_count, 10);
                        else if (typeof object.min_count === "number")
                            message.min_count = object.min_count;
                        else if (typeof object.min_count === "object")
                            message.min_count = new $util.LongBits(object.min_count.low >>> 0, object.min_count.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryRequestSearchRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryRequestSearchRequest
                 * @static
                 * @param {oracle.v1.QueryRequestSearchRequest} message QueryRequestSearchRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryRequestSearchRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.oracle_script_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.oracle_script_id = options.longs === String ? "0" : 0;
                        object.calldata = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.ask_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.ask_count = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.min_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.min_count = options.longs === String ? "0" : 0;
                    }
                    if (message.oracle_script_id != null && message.hasOwnProperty("oracle_script_id"))
                        if (typeof message.oracle_script_id === "number")
                            object.oracle_script_id = options.longs === String ? String(message.oracle_script_id) : message.oracle_script_id;
                        else
                            object.oracle_script_id = options.longs === String ? $util.Long.prototype.toString.call(message.oracle_script_id) : options.longs === Number ? new $util.LongBits(message.oracle_script_id.low >>> 0, message.oracle_script_id.high >>> 0).toNumber(true) : message.oracle_script_id;
                    if (message.calldata != null && message.hasOwnProperty("calldata"))
                        object.calldata = message.calldata;
                    if (message.ask_count != null && message.hasOwnProperty("ask_count"))
                        if (typeof message.ask_count === "number")
                            object.ask_count = options.longs === String ? String(message.ask_count) : message.ask_count;
                        else
                            object.ask_count = options.longs === String ? $util.Long.prototype.toString.call(message.ask_count) : options.longs === Number ? new $util.LongBits(message.ask_count.low >>> 0, message.ask_count.high >>> 0).toNumber(true) : message.ask_count;
                    if (message.min_count != null && message.hasOwnProperty("min_count"))
                        if (typeof message.min_count === "number")
                            object.min_count = options.longs === String ? String(message.min_count) : message.min_count;
                        else
                            object.min_count = options.longs === String ? $util.Long.prototype.toString.call(message.min_count) : options.longs === Number ? new $util.LongBits(message.min_count.low >>> 0, message.min_count.high >>> 0).toNumber(true) : message.min_count;
                    return object;
                };
    
                /**
                 * Converts this QueryRequestSearchRequest to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryRequestSearchRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryRequestSearchRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryRequestSearchRequest;
            })();
    
            v1.QueryRequestSearchResponse = (function() {
    
                /**
                 * Properties of a QueryRequestSearchResponse.
                 * @memberof oracle.v1
                 * @interface IQueryRequestSearchResponse
                 * @property {oracle.v1.IQueryRequestResponse|null} [request] QueryRequestSearchResponse request
                 */
    
                /**
                 * Constructs a new QueryRequestSearchResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryRequestSearchResponse.
                 * @implements IQueryRequestSearchResponse
                 * @constructor
                 * @param {oracle.v1.IQueryRequestSearchResponse=} [properties] Properties to set
                 */
                function QueryRequestSearchResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryRequestSearchResponse request.
                 * @member {oracle.v1.IQueryRequestResponse|null|undefined} request
                 * @memberof oracle.v1.QueryRequestSearchResponse
                 * @instance
                 */
                QueryRequestSearchResponse.prototype.request = null;
    
                /**
                 * Encodes the specified QueryRequestSearchResponse message. Does not implicitly {@link oracle.v1.QueryRequestSearchResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryRequestSearchResponse
                 * @static
                 * @param {oracle.v1.IQueryRequestSearchResponse} message QueryRequestSearchResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRequestSearchResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && Object.hasOwnProperty.call(message, "request"))
                        $root.oracle.v1.QueryRequestResponse.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryRequestSearchResponse message, length delimited. Does not implicitly {@link oracle.v1.QueryRequestSearchResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryRequestSearchResponse
                 * @static
                 * @param {oracle.v1.IQueryRequestSearchResponse} message QueryRequestSearchResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRequestSearchResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryRequestSearchResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryRequestSearchResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryRequestSearchResponse} QueryRequestSearchResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRequestSearchResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryRequestSearchResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.request = $root.oracle.v1.QueryRequestResponse.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryRequestSearchResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryRequestSearchResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryRequestSearchResponse} QueryRequestSearchResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRequestSearchResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryRequestSearchResponse message.
                 * @function verify
                 * @memberof oracle.v1.QueryRequestSearchResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryRequestSearchResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.oracle.v1.QueryRequestResponse.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryRequestSearchResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryRequestSearchResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryRequestSearchResponse} QueryRequestSearchResponse
                 */
                QueryRequestSearchResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryRequestSearchResponse)
                        return object;
                    var message = new $root.oracle.v1.QueryRequestSearchResponse();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".oracle.v1.QueryRequestSearchResponse.request: object expected");
                        message.request = $root.oracle.v1.QueryRequestResponse.fromObject(object.request);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryRequestSearchResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryRequestSearchResponse
                 * @static
                 * @param {oracle.v1.QueryRequestSearchResponse} message QueryRequestSearchResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryRequestSearchResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.request = null;
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.oracle.v1.QueryRequestResponse.toObject(message.request, options);
                    return object;
                };
    
                /**
                 * Converts this QueryRequestSearchResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryRequestSearchResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryRequestSearchResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryRequestSearchResponse;
            })();
    
            v1.QueryRequestPriceRequest = (function() {
    
                /**
                 * Properties of a QueryRequestPriceRequest.
                 * @memberof oracle.v1
                 * @interface IQueryRequestPriceRequest
                 * @property {Array.<string>|null} [symbols] QueryRequestPriceRequest symbols
                 * @property {Long|null} [ask_count] QueryRequestPriceRequest ask_count
                 * @property {Long|null} [min_count] QueryRequestPriceRequest min_count
                 */
    
                /**
                 * Constructs a new QueryRequestPriceRequest.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryRequestPriceRequest.
                 * @implements IQueryRequestPriceRequest
                 * @constructor
                 * @param {oracle.v1.IQueryRequestPriceRequest=} [properties] Properties to set
                 */
                function QueryRequestPriceRequest(properties) {
                    this.symbols = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryRequestPriceRequest symbols.
                 * @member {Array.<string>} symbols
                 * @memberof oracle.v1.QueryRequestPriceRequest
                 * @instance
                 */
                QueryRequestPriceRequest.prototype.symbols = $util.emptyArray;
    
                /**
                 * QueryRequestPriceRequest ask_count.
                 * @member {Long} ask_count
                 * @memberof oracle.v1.QueryRequestPriceRequest
                 * @instance
                 */
                QueryRequestPriceRequest.prototype.ask_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * QueryRequestPriceRequest min_count.
                 * @member {Long} min_count
                 * @memberof oracle.v1.QueryRequestPriceRequest
                 * @instance
                 */
                QueryRequestPriceRequest.prototype.min_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified QueryRequestPriceRequest message. Does not implicitly {@link oracle.v1.QueryRequestPriceRequest.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryRequestPriceRequest
                 * @static
                 * @param {oracle.v1.IQueryRequestPriceRequest} message QueryRequestPriceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRequestPriceRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.symbols != null && message.symbols.length)
                        for (var i = 0; i < message.symbols.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.symbols[i]);
                    if (message.ask_count != null && Object.hasOwnProperty.call(message, "ask_count"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.ask_count);
                    if (message.min_count != null && Object.hasOwnProperty.call(message, "min_count"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.min_count);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryRequestPriceRequest message, length delimited. Does not implicitly {@link oracle.v1.QueryRequestPriceRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryRequestPriceRequest
                 * @static
                 * @param {oracle.v1.IQueryRequestPriceRequest} message QueryRequestPriceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRequestPriceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryRequestPriceRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryRequestPriceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryRequestPriceRequest} QueryRequestPriceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRequestPriceRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryRequestPriceRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.symbols && message.symbols.length))
                                message.symbols = [];
                            message.symbols.push(reader.string());
                            break;
                        case 2:
                            message.ask_count = reader.uint64();
                            break;
                        case 3:
                            message.min_count = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryRequestPriceRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryRequestPriceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryRequestPriceRequest} QueryRequestPriceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRequestPriceRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryRequestPriceRequest message.
                 * @function verify
                 * @memberof oracle.v1.QueryRequestPriceRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryRequestPriceRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.symbols != null && message.hasOwnProperty("symbols")) {
                        if (!Array.isArray(message.symbols))
                            return "symbols: array expected";
                        for (var i = 0; i < message.symbols.length; ++i)
                            if (!$util.isString(message.symbols[i]))
                                return "symbols: string[] expected";
                    }
                    if (message.ask_count != null && message.hasOwnProperty("ask_count"))
                        if (!$util.isInteger(message.ask_count) && !(message.ask_count && $util.isInteger(message.ask_count.low) && $util.isInteger(message.ask_count.high)))
                            return "ask_count: integer|Long expected";
                    if (message.min_count != null && message.hasOwnProperty("min_count"))
                        if (!$util.isInteger(message.min_count) && !(message.min_count && $util.isInteger(message.min_count.low) && $util.isInteger(message.min_count.high)))
                            return "min_count: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a QueryRequestPriceRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryRequestPriceRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryRequestPriceRequest} QueryRequestPriceRequest
                 */
                QueryRequestPriceRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryRequestPriceRequest)
                        return object;
                    var message = new $root.oracle.v1.QueryRequestPriceRequest();
                    if (object.symbols) {
                        if (!Array.isArray(object.symbols))
                            throw TypeError(".oracle.v1.QueryRequestPriceRequest.symbols: array expected");
                        message.symbols = [];
                        for (var i = 0; i < object.symbols.length; ++i)
                            message.symbols[i] = String(object.symbols[i]);
                    }
                    if (object.ask_count != null)
                        if ($util.Long)
                            (message.ask_count = $util.Long.fromValue(object.ask_count)).unsigned = true;
                        else if (typeof object.ask_count === "string")
                            message.ask_count = parseInt(object.ask_count, 10);
                        else if (typeof object.ask_count === "number")
                            message.ask_count = object.ask_count;
                        else if (typeof object.ask_count === "object")
                            message.ask_count = new $util.LongBits(object.ask_count.low >>> 0, object.ask_count.high >>> 0).toNumber(true);
                    if (object.min_count != null)
                        if ($util.Long)
                            (message.min_count = $util.Long.fromValue(object.min_count)).unsigned = true;
                        else if (typeof object.min_count === "string")
                            message.min_count = parseInt(object.min_count, 10);
                        else if (typeof object.min_count === "number")
                            message.min_count = object.min_count;
                        else if (typeof object.min_count === "object")
                            message.min_count = new $util.LongBits(object.min_count.low >>> 0, object.min_count.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryRequestPriceRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryRequestPriceRequest
                 * @static
                 * @param {oracle.v1.QueryRequestPriceRequest} message QueryRequestPriceRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryRequestPriceRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.symbols = [];
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.ask_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.ask_count = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.min_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.min_count = options.longs === String ? "0" : 0;
                    }
                    if (message.symbols && message.symbols.length) {
                        object.symbols = [];
                        for (var j = 0; j < message.symbols.length; ++j)
                            object.symbols[j] = message.symbols[j];
                    }
                    if (message.ask_count != null && message.hasOwnProperty("ask_count"))
                        if (typeof message.ask_count === "number")
                            object.ask_count = options.longs === String ? String(message.ask_count) : message.ask_count;
                        else
                            object.ask_count = options.longs === String ? $util.Long.prototype.toString.call(message.ask_count) : options.longs === Number ? new $util.LongBits(message.ask_count.low >>> 0, message.ask_count.high >>> 0).toNumber(true) : message.ask_count;
                    if (message.min_count != null && message.hasOwnProperty("min_count"))
                        if (typeof message.min_count === "number")
                            object.min_count = options.longs === String ? String(message.min_count) : message.min_count;
                        else
                            object.min_count = options.longs === String ? $util.Long.prototype.toString.call(message.min_count) : options.longs === Number ? new $util.LongBits(message.min_count.low >>> 0, message.min_count.high >>> 0).toNumber(true) : message.min_count;
                    return object;
                };
    
                /**
                 * Converts this QueryRequestPriceRequest to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryRequestPriceRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryRequestPriceRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryRequestPriceRequest;
            })();
    
            v1.QueryRequestPriceResponse = (function() {
    
                /**
                 * Properties of a QueryRequestPriceResponse.
                 * @memberof oracle.v1
                 * @interface IQueryRequestPriceResponse
                 * @property {Array.<oracle.v1.IPriceResult>|null} [price_results] QueryRequestPriceResponse price_results
                 */
    
                /**
                 * Constructs a new QueryRequestPriceResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryRequestPriceResponse.
                 * @implements IQueryRequestPriceResponse
                 * @constructor
                 * @param {oracle.v1.IQueryRequestPriceResponse=} [properties] Properties to set
                 */
                function QueryRequestPriceResponse(properties) {
                    this.price_results = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryRequestPriceResponse price_results.
                 * @member {Array.<oracle.v1.IPriceResult>} price_results
                 * @memberof oracle.v1.QueryRequestPriceResponse
                 * @instance
                 */
                QueryRequestPriceResponse.prototype.price_results = $util.emptyArray;
    
                /**
                 * Encodes the specified QueryRequestPriceResponse message. Does not implicitly {@link oracle.v1.QueryRequestPriceResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryRequestPriceResponse
                 * @static
                 * @param {oracle.v1.IQueryRequestPriceResponse} message QueryRequestPriceResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRequestPriceResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.price_results != null && message.price_results.length)
                        for (var i = 0; i < message.price_results.length; ++i)
                            $root.oracle.v1.PriceResult.encode(message.price_results[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryRequestPriceResponse message, length delimited. Does not implicitly {@link oracle.v1.QueryRequestPriceResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryRequestPriceResponse
                 * @static
                 * @param {oracle.v1.IQueryRequestPriceResponse} message QueryRequestPriceResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRequestPriceResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryRequestPriceResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryRequestPriceResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryRequestPriceResponse} QueryRequestPriceResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRequestPriceResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryRequestPriceResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.price_results && message.price_results.length))
                                message.price_results = [];
                            message.price_results.push($root.oracle.v1.PriceResult.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryRequestPriceResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryRequestPriceResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryRequestPriceResponse} QueryRequestPriceResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRequestPriceResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryRequestPriceResponse message.
                 * @function verify
                 * @memberof oracle.v1.QueryRequestPriceResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryRequestPriceResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.price_results != null && message.hasOwnProperty("price_results")) {
                        if (!Array.isArray(message.price_results))
                            return "price_results: array expected";
                        for (var i = 0; i < message.price_results.length; ++i) {
                            var error = $root.oracle.v1.PriceResult.verify(message.price_results[i]);
                            if (error)
                                return "price_results." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryRequestPriceResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryRequestPriceResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryRequestPriceResponse} QueryRequestPriceResponse
                 */
                QueryRequestPriceResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryRequestPriceResponse)
                        return object;
                    var message = new $root.oracle.v1.QueryRequestPriceResponse();
                    if (object.price_results) {
                        if (!Array.isArray(object.price_results))
                            throw TypeError(".oracle.v1.QueryRequestPriceResponse.price_results: array expected");
                        message.price_results = [];
                        for (var i = 0; i < object.price_results.length; ++i) {
                            if (typeof object.price_results[i] !== "object")
                                throw TypeError(".oracle.v1.QueryRequestPriceResponse.price_results: object expected");
                            message.price_results[i] = $root.oracle.v1.PriceResult.fromObject(object.price_results[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryRequestPriceResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryRequestPriceResponse
                 * @static
                 * @param {oracle.v1.QueryRequestPriceResponse} message QueryRequestPriceResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryRequestPriceResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.price_results = [];
                    if (message.price_results && message.price_results.length) {
                        object.price_results = [];
                        for (var j = 0; j < message.price_results.length; ++j)
                            object.price_results[j] = $root.oracle.v1.PriceResult.toObject(message.price_results[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this QueryRequestPriceResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryRequestPriceResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryRequestPriceResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryRequestPriceResponse;
            })();
    
            v1.QueryRequestVerificationRequest = (function() {
    
                /**
                 * Properties of a QueryRequestVerificationRequest.
                 * @memberof oracle.v1
                 * @interface IQueryRequestVerificationRequest
                 * @property {string|null} [chain_id] QueryRequestVerificationRequest chain_id
                 * @property {string|null} [validator] QueryRequestVerificationRequest validator
                 * @property {Long|null} [request_id] QueryRequestVerificationRequest request_id
                 * @property {Long|null} [external_id] QueryRequestVerificationRequest external_id
                 * @property {string|null} [reporter] QueryRequestVerificationRequest reporter
                 * @property {Uint8Array|null} [signature] QueryRequestVerificationRequest signature
                 */
    
                /**
                 * Constructs a new QueryRequestVerificationRequest.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryRequestVerificationRequest.
                 * @implements IQueryRequestVerificationRequest
                 * @constructor
                 * @param {oracle.v1.IQueryRequestVerificationRequest=} [properties] Properties to set
                 */
                function QueryRequestVerificationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryRequestVerificationRequest chain_id.
                 * @member {string} chain_id
                 * @memberof oracle.v1.QueryRequestVerificationRequest
                 * @instance
                 */
                QueryRequestVerificationRequest.prototype.chain_id = "";
    
                /**
                 * QueryRequestVerificationRequest validator.
                 * @member {string} validator
                 * @memberof oracle.v1.QueryRequestVerificationRequest
                 * @instance
                 */
                QueryRequestVerificationRequest.prototype.validator = "";
    
                /**
                 * QueryRequestVerificationRequest request_id.
                 * @member {Long} request_id
                 * @memberof oracle.v1.QueryRequestVerificationRequest
                 * @instance
                 */
                QueryRequestVerificationRequest.prototype.request_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * QueryRequestVerificationRequest external_id.
                 * @member {Long} external_id
                 * @memberof oracle.v1.QueryRequestVerificationRequest
                 * @instance
                 */
                QueryRequestVerificationRequest.prototype.external_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * QueryRequestVerificationRequest reporter.
                 * @member {string} reporter
                 * @memberof oracle.v1.QueryRequestVerificationRequest
                 * @instance
                 */
                QueryRequestVerificationRequest.prototype.reporter = "";
    
                /**
                 * QueryRequestVerificationRequest signature.
                 * @member {Uint8Array} signature
                 * @memberof oracle.v1.QueryRequestVerificationRequest
                 * @instance
                 */
                QueryRequestVerificationRequest.prototype.signature = $util.newBuffer([]);
    
                /**
                 * Encodes the specified QueryRequestVerificationRequest message. Does not implicitly {@link oracle.v1.QueryRequestVerificationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryRequestVerificationRequest
                 * @static
                 * @param {oracle.v1.IQueryRequestVerificationRequest} message QueryRequestVerificationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRequestVerificationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.chain_id);
                    if (message.validator != null && Object.hasOwnProperty.call(message, "validator"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.validator);
                    if (message.request_id != null && Object.hasOwnProperty.call(message, "request_id"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.request_id);
                    if (message.external_id != null && Object.hasOwnProperty.call(message, "external_id"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.external_id);
                    if (message.reporter != null && Object.hasOwnProperty.call(message, "reporter"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.reporter);
                    if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                        writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.signature);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryRequestVerificationRequest message, length delimited. Does not implicitly {@link oracle.v1.QueryRequestVerificationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryRequestVerificationRequest
                 * @static
                 * @param {oracle.v1.IQueryRequestVerificationRequest} message QueryRequestVerificationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRequestVerificationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryRequestVerificationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryRequestVerificationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryRequestVerificationRequest} QueryRequestVerificationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRequestVerificationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryRequestVerificationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.chain_id = reader.string();
                            break;
                        case 2:
                            message.validator = reader.string();
                            break;
                        case 3:
                            message.request_id = reader.uint64();
                            break;
                        case 4:
                            message.external_id = reader.uint64();
                            break;
                        case 5:
                            message.reporter = reader.string();
                            break;
                        case 6:
                            message.signature = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryRequestVerificationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryRequestVerificationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryRequestVerificationRequest} QueryRequestVerificationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRequestVerificationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryRequestVerificationRequest message.
                 * @function verify
                 * @memberof oracle.v1.QueryRequestVerificationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryRequestVerificationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                        if (!$util.isString(message.chain_id))
                            return "chain_id: string expected";
                    if (message.validator != null && message.hasOwnProperty("validator"))
                        if (!$util.isString(message.validator))
                            return "validator: string expected";
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        if (!$util.isInteger(message.request_id) && !(message.request_id && $util.isInteger(message.request_id.low) && $util.isInteger(message.request_id.high)))
                            return "request_id: integer|Long expected";
                    if (message.external_id != null && message.hasOwnProperty("external_id"))
                        if (!$util.isInteger(message.external_id) && !(message.external_id && $util.isInteger(message.external_id.low) && $util.isInteger(message.external_id.high)))
                            return "external_id: integer|Long expected";
                    if (message.reporter != null && message.hasOwnProperty("reporter"))
                        if (!$util.isString(message.reporter))
                            return "reporter: string expected";
                    if (message.signature != null && message.hasOwnProperty("signature"))
                        if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                            return "signature: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a QueryRequestVerificationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryRequestVerificationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryRequestVerificationRequest} QueryRequestVerificationRequest
                 */
                QueryRequestVerificationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryRequestVerificationRequest)
                        return object;
                    var message = new $root.oracle.v1.QueryRequestVerificationRequest();
                    if (object.chain_id != null)
                        message.chain_id = String(object.chain_id);
                    if (object.validator != null)
                        message.validator = String(object.validator);
                    if (object.request_id != null)
                        if ($util.Long)
                            (message.request_id = $util.Long.fromValue(object.request_id)).unsigned = true;
                        else if (typeof object.request_id === "string")
                            message.request_id = parseInt(object.request_id, 10);
                        else if (typeof object.request_id === "number")
                            message.request_id = object.request_id;
                        else if (typeof object.request_id === "object")
                            message.request_id = new $util.LongBits(object.request_id.low >>> 0, object.request_id.high >>> 0).toNumber(true);
                    if (object.external_id != null)
                        if ($util.Long)
                            (message.external_id = $util.Long.fromValue(object.external_id)).unsigned = true;
                        else if (typeof object.external_id === "string")
                            message.external_id = parseInt(object.external_id, 10);
                        else if (typeof object.external_id === "number")
                            message.external_id = object.external_id;
                        else if (typeof object.external_id === "object")
                            message.external_id = new $util.LongBits(object.external_id.low >>> 0, object.external_id.high >>> 0).toNumber(true);
                    if (object.reporter != null)
                        message.reporter = String(object.reporter);
                    if (object.signature != null)
                        if (typeof object.signature === "string")
                            $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                        else if (object.signature.length)
                            message.signature = object.signature;
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryRequestVerificationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryRequestVerificationRequest
                 * @static
                 * @param {oracle.v1.QueryRequestVerificationRequest} message QueryRequestVerificationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryRequestVerificationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.chain_id = "";
                        object.validator = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.request_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.request_id = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.external_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.external_id = options.longs === String ? "0" : 0;
                        object.reporter = "";
                        if (options.bytes === String)
                            object.signature = "";
                        else {
                            object.signature = [];
                            if (options.bytes !== Array)
                                object.signature = $util.newBuffer(object.signature);
                        }
                    }
                    if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                        object.chain_id = message.chain_id;
                    if (message.validator != null && message.hasOwnProperty("validator"))
                        object.validator = message.validator;
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        if (typeof message.request_id === "number")
                            object.request_id = options.longs === String ? String(message.request_id) : message.request_id;
                        else
                            object.request_id = options.longs === String ? $util.Long.prototype.toString.call(message.request_id) : options.longs === Number ? new $util.LongBits(message.request_id.low >>> 0, message.request_id.high >>> 0).toNumber(true) : message.request_id;
                    if (message.external_id != null && message.hasOwnProperty("external_id"))
                        if (typeof message.external_id === "number")
                            object.external_id = options.longs === String ? String(message.external_id) : message.external_id;
                        else
                            object.external_id = options.longs === String ? $util.Long.prototype.toString.call(message.external_id) : options.longs === Number ? new $util.LongBits(message.external_id.low >>> 0, message.external_id.high >>> 0).toNumber(true) : message.external_id;
                    if (message.reporter != null && message.hasOwnProperty("reporter"))
                        object.reporter = message.reporter;
                    if (message.signature != null && message.hasOwnProperty("signature"))
                        object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                    return object;
                };
    
                /**
                 * Converts this QueryRequestVerificationRequest to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryRequestVerificationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryRequestVerificationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryRequestVerificationRequest;
            })();
    
            v1.QueryRequestVerificationResponse = (function() {
    
                /**
                 * Properties of a QueryRequestVerificationResponse.
                 * @memberof oracle.v1
                 * @interface IQueryRequestVerificationResponse
                 * @property {string|null} [chain_id] QueryRequestVerificationResponse chain_id
                 * @property {string|null} [validator] QueryRequestVerificationResponse validator
                 * @property {Long|null} [request_id] QueryRequestVerificationResponse request_id
                 * @property {Long|null} [external_id] QueryRequestVerificationResponse external_id
                 * @property {Long|null} [data_source_id] QueryRequestVerificationResponse data_source_id
                 */
    
                /**
                 * Constructs a new QueryRequestVerificationResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a QueryRequestVerificationResponse.
                 * @implements IQueryRequestVerificationResponse
                 * @constructor
                 * @param {oracle.v1.IQueryRequestVerificationResponse=} [properties] Properties to set
                 */
                function QueryRequestVerificationResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryRequestVerificationResponse chain_id.
                 * @member {string} chain_id
                 * @memberof oracle.v1.QueryRequestVerificationResponse
                 * @instance
                 */
                QueryRequestVerificationResponse.prototype.chain_id = "";
    
                /**
                 * QueryRequestVerificationResponse validator.
                 * @member {string} validator
                 * @memberof oracle.v1.QueryRequestVerificationResponse
                 * @instance
                 */
                QueryRequestVerificationResponse.prototype.validator = "";
    
                /**
                 * QueryRequestVerificationResponse request_id.
                 * @member {Long} request_id
                 * @memberof oracle.v1.QueryRequestVerificationResponse
                 * @instance
                 */
                QueryRequestVerificationResponse.prototype.request_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * QueryRequestVerificationResponse external_id.
                 * @member {Long} external_id
                 * @memberof oracle.v1.QueryRequestVerificationResponse
                 * @instance
                 */
                QueryRequestVerificationResponse.prototype.external_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * QueryRequestVerificationResponse data_source_id.
                 * @member {Long} data_source_id
                 * @memberof oracle.v1.QueryRequestVerificationResponse
                 * @instance
                 */
                QueryRequestVerificationResponse.prototype.data_source_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified QueryRequestVerificationResponse message. Does not implicitly {@link oracle.v1.QueryRequestVerificationResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.QueryRequestVerificationResponse
                 * @static
                 * @param {oracle.v1.IQueryRequestVerificationResponse} message QueryRequestVerificationResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRequestVerificationResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.chain_id);
                    if (message.validator != null && Object.hasOwnProperty.call(message, "validator"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.validator);
                    if (message.request_id != null && Object.hasOwnProperty.call(message, "request_id"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.request_id);
                    if (message.external_id != null && Object.hasOwnProperty.call(message, "external_id"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.external_id);
                    if (message.data_source_id != null && Object.hasOwnProperty.call(message, "data_source_id"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.data_source_id);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryRequestVerificationResponse message, length delimited. Does not implicitly {@link oracle.v1.QueryRequestVerificationResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.QueryRequestVerificationResponse
                 * @static
                 * @param {oracle.v1.IQueryRequestVerificationResponse} message QueryRequestVerificationResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRequestVerificationResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryRequestVerificationResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.QueryRequestVerificationResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.QueryRequestVerificationResponse} QueryRequestVerificationResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRequestVerificationResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.QueryRequestVerificationResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.chain_id = reader.string();
                            break;
                        case 2:
                            message.validator = reader.string();
                            break;
                        case 3:
                            message.request_id = reader.uint64();
                            break;
                        case 4:
                            message.external_id = reader.uint64();
                            break;
                        case 5:
                            message.data_source_id = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryRequestVerificationResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.QueryRequestVerificationResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.QueryRequestVerificationResponse} QueryRequestVerificationResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRequestVerificationResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryRequestVerificationResponse message.
                 * @function verify
                 * @memberof oracle.v1.QueryRequestVerificationResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryRequestVerificationResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                        if (!$util.isString(message.chain_id))
                            return "chain_id: string expected";
                    if (message.validator != null && message.hasOwnProperty("validator"))
                        if (!$util.isString(message.validator))
                            return "validator: string expected";
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        if (!$util.isInteger(message.request_id) && !(message.request_id && $util.isInteger(message.request_id.low) && $util.isInteger(message.request_id.high)))
                            return "request_id: integer|Long expected";
                    if (message.external_id != null && message.hasOwnProperty("external_id"))
                        if (!$util.isInteger(message.external_id) && !(message.external_id && $util.isInteger(message.external_id.low) && $util.isInteger(message.external_id.high)))
                            return "external_id: integer|Long expected";
                    if (message.data_source_id != null && message.hasOwnProperty("data_source_id"))
                        if (!$util.isInteger(message.data_source_id) && !(message.data_source_id && $util.isInteger(message.data_source_id.low) && $util.isInteger(message.data_source_id.high)))
                            return "data_source_id: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a QueryRequestVerificationResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.QueryRequestVerificationResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.QueryRequestVerificationResponse} QueryRequestVerificationResponse
                 */
                QueryRequestVerificationResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.QueryRequestVerificationResponse)
                        return object;
                    var message = new $root.oracle.v1.QueryRequestVerificationResponse();
                    if (object.chain_id != null)
                        message.chain_id = String(object.chain_id);
                    if (object.validator != null)
                        message.validator = String(object.validator);
                    if (object.request_id != null)
                        if ($util.Long)
                            (message.request_id = $util.Long.fromValue(object.request_id)).unsigned = true;
                        else if (typeof object.request_id === "string")
                            message.request_id = parseInt(object.request_id, 10);
                        else if (typeof object.request_id === "number")
                            message.request_id = object.request_id;
                        else if (typeof object.request_id === "object")
                            message.request_id = new $util.LongBits(object.request_id.low >>> 0, object.request_id.high >>> 0).toNumber(true);
                    if (object.external_id != null)
                        if ($util.Long)
                            (message.external_id = $util.Long.fromValue(object.external_id)).unsigned = true;
                        else if (typeof object.external_id === "string")
                            message.external_id = parseInt(object.external_id, 10);
                        else if (typeof object.external_id === "number")
                            message.external_id = object.external_id;
                        else if (typeof object.external_id === "object")
                            message.external_id = new $util.LongBits(object.external_id.low >>> 0, object.external_id.high >>> 0).toNumber(true);
                    if (object.data_source_id != null)
                        if ($util.Long)
                            (message.data_source_id = $util.Long.fromValue(object.data_source_id)).unsigned = true;
                        else if (typeof object.data_source_id === "string")
                            message.data_source_id = parseInt(object.data_source_id, 10);
                        else if (typeof object.data_source_id === "number")
                            message.data_source_id = object.data_source_id;
                        else if (typeof object.data_source_id === "object")
                            message.data_source_id = new $util.LongBits(object.data_source_id.low >>> 0, object.data_source_id.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryRequestVerificationResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.QueryRequestVerificationResponse
                 * @static
                 * @param {oracle.v1.QueryRequestVerificationResponse} message QueryRequestVerificationResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryRequestVerificationResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.chain_id = "";
                        object.validator = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.request_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.request_id = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.external_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.external_id = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.data_source_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.data_source_id = options.longs === String ? "0" : 0;
                    }
                    if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                        object.chain_id = message.chain_id;
                    if (message.validator != null && message.hasOwnProperty("validator"))
                        object.validator = message.validator;
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        if (typeof message.request_id === "number")
                            object.request_id = options.longs === String ? String(message.request_id) : message.request_id;
                        else
                            object.request_id = options.longs === String ? $util.Long.prototype.toString.call(message.request_id) : options.longs === Number ? new $util.LongBits(message.request_id.low >>> 0, message.request_id.high >>> 0).toNumber(true) : message.request_id;
                    if (message.external_id != null && message.hasOwnProperty("external_id"))
                        if (typeof message.external_id === "number")
                            object.external_id = options.longs === String ? String(message.external_id) : message.external_id;
                        else
                            object.external_id = options.longs === String ? $util.Long.prototype.toString.call(message.external_id) : options.longs === Number ? new $util.LongBits(message.external_id.low >>> 0, message.external_id.high >>> 0).toNumber(true) : message.external_id;
                    if (message.data_source_id != null && message.hasOwnProperty("data_source_id"))
                        if (typeof message.data_source_id === "number")
                            object.data_source_id = options.longs === String ? String(message.data_source_id) : message.data_source_id;
                        else
                            object.data_source_id = options.longs === String ? $util.Long.prototype.toString.call(message.data_source_id) : options.longs === Number ? new $util.LongBits(message.data_source_id.low >>> 0, message.data_source_id.high >>> 0).toNumber(true) : message.data_source_id;
                    return object;
                };
    
                /**
                 * Converts this QueryRequestVerificationResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.QueryRequestVerificationResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryRequestVerificationResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryRequestVerificationResponse;
            })();
    
            v1.Msg = (function() {
    
                /**
                 * Constructs a new Msg service.
                 * @memberof oracle.v1
                 * @classdesc Represents a Msg
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Msg(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;
    
                /**
                 * Callback as used by {@link oracle.v1.Msg#requestData}.
                 * @memberof oracle.v1.Msg
                 * @typedef RequestDataCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.MsgRequestDataResponse} [response] MsgRequestDataResponse
                 */
    
                /**
                 * Calls RequestData.
                 * @function requestData
                 * @memberof oracle.v1.Msg
                 * @instance
                 * @param {oracle.v1.IMsgRequestData} request MsgRequestData message or plain object
                 * @param {oracle.v1.Msg.RequestDataCallback} callback Node-style callback called with the error, if any, and MsgRequestDataResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.requestData = function requestData(request, callback) {
                    return this.rpcCall(requestData, $root.oracle.v1.MsgRequestData, $root.oracle.v1.MsgRequestDataResponse, request, callback);
                }, "name", { value: "RequestData" });
    
                /**
                 * Calls RequestData.
                 * @function requestData
                 * @memberof oracle.v1.Msg
                 * @instance
                 * @param {oracle.v1.IMsgRequestData} request MsgRequestData message or plain object
                 * @returns {Promise<oracle.v1.MsgRequestDataResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link oracle.v1.Msg#reportData}.
                 * @memberof oracle.v1.Msg
                 * @typedef ReportDataCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.MsgReportDataResponse} [response] MsgReportDataResponse
                 */
    
                /**
                 * Calls ReportData.
                 * @function reportData
                 * @memberof oracle.v1.Msg
                 * @instance
                 * @param {oracle.v1.IMsgReportData} request MsgReportData message or plain object
                 * @param {oracle.v1.Msg.ReportDataCallback} callback Node-style callback called with the error, if any, and MsgReportDataResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.reportData = function reportData(request, callback) {
                    return this.rpcCall(reportData, $root.oracle.v1.MsgReportData, $root.oracle.v1.MsgReportDataResponse, request, callback);
                }, "name", { value: "ReportData" });
    
                /**
                 * Calls ReportData.
                 * @function reportData
                 * @memberof oracle.v1.Msg
                 * @instance
                 * @param {oracle.v1.IMsgReportData} request MsgReportData message or plain object
                 * @returns {Promise<oracle.v1.MsgReportDataResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link oracle.v1.Msg#createDataSource}.
                 * @memberof oracle.v1.Msg
                 * @typedef CreateDataSourceCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.MsgCreateDataSourceResponse} [response] MsgCreateDataSourceResponse
                 */
    
                /**
                 * Calls CreateDataSource.
                 * @function createDataSource
                 * @memberof oracle.v1.Msg
                 * @instance
                 * @param {oracle.v1.IMsgCreateDataSource} request MsgCreateDataSource message or plain object
                 * @param {oracle.v1.Msg.CreateDataSourceCallback} callback Node-style callback called with the error, if any, and MsgCreateDataSourceResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.createDataSource = function createDataSource(request, callback) {
                    return this.rpcCall(createDataSource, $root.oracle.v1.MsgCreateDataSource, $root.oracle.v1.MsgCreateDataSourceResponse, request, callback);
                }, "name", { value: "CreateDataSource" });
    
                /**
                 * Calls CreateDataSource.
                 * @function createDataSource
                 * @memberof oracle.v1.Msg
                 * @instance
                 * @param {oracle.v1.IMsgCreateDataSource} request MsgCreateDataSource message or plain object
                 * @returns {Promise<oracle.v1.MsgCreateDataSourceResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link oracle.v1.Msg#editDataSource}.
                 * @memberof oracle.v1.Msg
                 * @typedef EditDataSourceCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.MsgEditDataSourceResponse} [response] MsgEditDataSourceResponse
                 */
    
                /**
                 * Calls EditDataSource.
                 * @function editDataSource
                 * @memberof oracle.v1.Msg
                 * @instance
                 * @param {oracle.v1.IMsgEditDataSource} request MsgEditDataSource message or plain object
                 * @param {oracle.v1.Msg.EditDataSourceCallback} callback Node-style callback called with the error, if any, and MsgEditDataSourceResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.editDataSource = function editDataSource(request, callback) {
                    return this.rpcCall(editDataSource, $root.oracle.v1.MsgEditDataSource, $root.oracle.v1.MsgEditDataSourceResponse, request, callback);
                }, "name", { value: "EditDataSource" });
    
                /**
                 * Calls EditDataSource.
                 * @function editDataSource
                 * @memberof oracle.v1.Msg
                 * @instance
                 * @param {oracle.v1.IMsgEditDataSource} request MsgEditDataSource message or plain object
                 * @returns {Promise<oracle.v1.MsgEditDataSourceResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link oracle.v1.Msg#createOracleScript}.
                 * @memberof oracle.v1.Msg
                 * @typedef CreateOracleScriptCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.MsgCreateOracleScriptResponse} [response] MsgCreateOracleScriptResponse
                 */
    
                /**
                 * Calls CreateOracleScript.
                 * @function createOracleScript
                 * @memberof oracle.v1.Msg
                 * @instance
                 * @param {oracle.v1.IMsgCreateOracleScript} request MsgCreateOracleScript message or plain object
                 * @param {oracle.v1.Msg.CreateOracleScriptCallback} callback Node-style callback called with the error, if any, and MsgCreateOracleScriptResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.createOracleScript = function createOracleScript(request, callback) {
                    return this.rpcCall(createOracleScript, $root.oracle.v1.MsgCreateOracleScript, $root.oracle.v1.MsgCreateOracleScriptResponse, request, callback);
                }, "name", { value: "CreateOracleScript" });
    
                /**
                 * Calls CreateOracleScript.
                 * @function createOracleScript
                 * @memberof oracle.v1.Msg
                 * @instance
                 * @param {oracle.v1.IMsgCreateOracleScript} request MsgCreateOracleScript message or plain object
                 * @returns {Promise<oracle.v1.MsgCreateOracleScriptResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link oracle.v1.Msg#editOracleScript}.
                 * @memberof oracle.v1.Msg
                 * @typedef EditOracleScriptCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.MsgEditOracleScriptResponse} [response] MsgEditOracleScriptResponse
                 */
    
                /**
                 * Calls EditOracleScript.
                 * @function editOracleScript
                 * @memberof oracle.v1.Msg
                 * @instance
                 * @param {oracle.v1.IMsgEditOracleScript} request MsgEditOracleScript message or plain object
                 * @param {oracle.v1.Msg.EditOracleScriptCallback} callback Node-style callback called with the error, if any, and MsgEditOracleScriptResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.editOracleScript = function editOracleScript(request, callback) {
                    return this.rpcCall(editOracleScript, $root.oracle.v1.MsgEditOracleScript, $root.oracle.v1.MsgEditOracleScriptResponse, request, callback);
                }, "name", { value: "EditOracleScript" });
    
                /**
                 * Calls EditOracleScript.
                 * @function editOracleScript
                 * @memberof oracle.v1.Msg
                 * @instance
                 * @param {oracle.v1.IMsgEditOracleScript} request MsgEditOracleScript message or plain object
                 * @returns {Promise<oracle.v1.MsgEditOracleScriptResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link oracle.v1.Msg#activate}.
                 * @memberof oracle.v1.Msg
                 * @typedef ActivateCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {oracle.v1.MsgActivateResponse} [response] MsgActivateResponse
                 */
    
                /**
                 * Calls Activate.
                 * @function activate
                 * @memberof oracle.v1.Msg
                 * @instance
                 * @param {oracle.v1.IMsgActivate} request MsgActivate message or plain object
                 * @param {oracle.v1.Msg.ActivateCallback} callback Node-style callback called with the error, if any, and MsgActivateResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.activate = function activate(request, callback) {
                    return this.rpcCall(activate, $root.oracle.v1.MsgActivate, $root.oracle.v1.MsgActivateResponse, request, callback);
                }, "name", { value: "Activate" });
    
                /**
                 * Calls Activate.
                 * @function activate
                 * @memberof oracle.v1.Msg
                 * @instance
                 * @param {oracle.v1.IMsgActivate} request MsgActivate message or plain object
                 * @returns {Promise<oracle.v1.MsgActivateResponse>} Promise
                 * @variation 2
                 */
    
                return Msg;
            })();
    
            v1.MsgRequestData = (function() {
    
                /**
                 * Properties of a MsgRequestData.
                 * @memberof oracle.v1
                 * @interface IMsgRequestData
                 * @property {Long|null} [oracle_script_id] MsgRequestData oracle_script_id
                 * @property {Uint8Array|null} [calldata] MsgRequestData calldata
                 * @property {Long|null} [ask_count] MsgRequestData ask_count
                 * @property {Long|null} [min_count] MsgRequestData min_count
                 * @property {string|null} [client_id] MsgRequestData client_id
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [fee_limit] MsgRequestData fee_limit
                 * @property {Long|null} [prepare_gas] MsgRequestData prepare_gas
                 * @property {Long|null} [execute_gas] MsgRequestData execute_gas
                 * @property {string|null} [sender] MsgRequestData sender
                 */
    
                /**
                 * Constructs a new MsgRequestData.
                 * @memberof oracle.v1
                 * @classdesc Represents a MsgRequestData.
                 * @implements IMsgRequestData
                 * @constructor
                 * @param {oracle.v1.IMsgRequestData=} [properties] Properties to set
                 */
                function MsgRequestData(properties) {
                    this.fee_limit = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MsgRequestData oracle_script_id.
                 * @member {Long} oracle_script_id
                 * @memberof oracle.v1.MsgRequestData
                 * @instance
                 */
                MsgRequestData.prototype.oracle_script_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * MsgRequestData calldata.
                 * @member {Uint8Array} calldata
                 * @memberof oracle.v1.MsgRequestData
                 * @instance
                 */
                MsgRequestData.prototype.calldata = $util.newBuffer([]);
    
                /**
                 * MsgRequestData ask_count.
                 * @member {Long} ask_count
                 * @memberof oracle.v1.MsgRequestData
                 * @instance
                 */
                MsgRequestData.prototype.ask_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * MsgRequestData min_count.
                 * @member {Long} min_count
                 * @memberof oracle.v1.MsgRequestData
                 * @instance
                 */
                MsgRequestData.prototype.min_count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * MsgRequestData client_id.
                 * @member {string} client_id
                 * @memberof oracle.v1.MsgRequestData
                 * @instance
                 */
                MsgRequestData.prototype.client_id = "";
    
                /**
                 * MsgRequestData fee_limit.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} fee_limit
                 * @memberof oracle.v1.MsgRequestData
                 * @instance
                 */
                MsgRequestData.prototype.fee_limit = $util.emptyArray;
    
                /**
                 * MsgRequestData prepare_gas.
                 * @member {Long} prepare_gas
                 * @memberof oracle.v1.MsgRequestData
                 * @instance
                 */
                MsgRequestData.prototype.prepare_gas = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * MsgRequestData execute_gas.
                 * @member {Long} execute_gas
                 * @memberof oracle.v1.MsgRequestData
                 * @instance
                 */
                MsgRequestData.prototype.execute_gas = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * MsgRequestData sender.
                 * @member {string} sender
                 * @memberof oracle.v1.MsgRequestData
                 * @instance
                 */
                MsgRequestData.prototype.sender = "";
    
                /**
                 * Encodes the specified MsgRequestData message. Does not implicitly {@link oracle.v1.MsgRequestData.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.MsgRequestData
                 * @static
                 * @param {oracle.v1.IMsgRequestData} message MsgRequestData message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgRequestData.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.oracle_script_id != null && Object.hasOwnProperty.call(message, "oracle_script_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.oracle_script_id);
                    if (message.calldata != null && Object.hasOwnProperty.call(message, "calldata"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.calldata);
                    if (message.ask_count != null && Object.hasOwnProperty.call(message, "ask_count"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.ask_count);
                    if (message.min_count != null && Object.hasOwnProperty.call(message, "min_count"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.min_count);
                    if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.client_id);
                    if (message.fee_limit != null && message.fee_limit.length)
                        for (var i = 0; i < message.fee_limit.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.fee_limit[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.prepare_gas != null && Object.hasOwnProperty.call(message, "prepare_gas"))
                        writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.prepare_gas);
                    if (message.execute_gas != null && Object.hasOwnProperty.call(message, "execute_gas"))
                        writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.execute_gas);
                    if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                        writer.uint32(/* id 9, wireType 2 =*/74).string(message.sender);
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgRequestData message, length delimited. Does not implicitly {@link oracle.v1.MsgRequestData.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.MsgRequestData
                 * @static
                 * @param {oracle.v1.IMsgRequestData} message MsgRequestData message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgRequestData.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgRequestData message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.MsgRequestData
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.MsgRequestData} MsgRequestData
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgRequestData.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.MsgRequestData();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.oracle_script_id = reader.uint64();
                            break;
                        case 2:
                            message.calldata = reader.bytes();
                            break;
                        case 3:
                            message.ask_count = reader.uint64();
                            break;
                        case 4:
                            message.min_count = reader.uint64();
                            break;
                        case 5:
                            message.client_id = reader.string();
                            break;
                        case 6:
                            if (!(message.fee_limit && message.fee_limit.length))
                                message.fee_limit = [];
                            message.fee_limit.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            message.prepare_gas = reader.uint64();
                            break;
                        case 8:
                            message.execute_gas = reader.uint64();
                            break;
                        case 9:
                            message.sender = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgRequestData message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.MsgRequestData
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.MsgRequestData} MsgRequestData
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgRequestData.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgRequestData message.
                 * @function verify
                 * @memberof oracle.v1.MsgRequestData
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgRequestData.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.oracle_script_id != null && message.hasOwnProperty("oracle_script_id"))
                        if (!$util.isInteger(message.oracle_script_id) && !(message.oracle_script_id && $util.isInteger(message.oracle_script_id.low) && $util.isInteger(message.oracle_script_id.high)))
                            return "oracle_script_id: integer|Long expected";
                    if (message.calldata != null && message.hasOwnProperty("calldata"))
                        if (!(message.calldata && typeof message.calldata.length === "number" || $util.isString(message.calldata)))
                            return "calldata: buffer expected";
                    if (message.ask_count != null && message.hasOwnProperty("ask_count"))
                        if (!$util.isInteger(message.ask_count) && !(message.ask_count && $util.isInteger(message.ask_count.low) && $util.isInteger(message.ask_count.high)))
                            return "ask_count: integer|Long expected";
                    if (message.min_count != null && message.hasOwnProperty("min_count"))
                        if (!$util.isInteger(message.min_count) && !(message.min_count && $util.isInteger(message.min_count.low) && $util.isInteger(message.min_count.high)))
                            return "min_count: integer|Long expected";
                    if (message.client_id != null && message.hasOwnProperty("client_id"))
                        if (!$util.isString(message.client_id))
                            return "client_id: string expected";
                    if (message.fee_limit != null && message.hasOwnProperty("fee_limit")) {
                        if (!Array.isArray(message.fee_limit))
                            return "fee_limit: array expected";
                        for (var i = 0; i < message.fee_limit.length; ++i) {
                            var error = $root.cosmos.base.v1beta1.Coin.verify(message.fee_limit[i]);
                            if (error)
                                return "fee_limit." + error;
                        }
                    }
                    if (message.prepare_gas != null && message.hasOwnProperty("prepare_gas"))
                        if (!$util.isInteger(message.prepare_gas) && !(message.prepare_gas && $util.isInteger(message.prepare_gas.low) && $util.isInteger(message.prepare_gas.high)))
                            return "prepare_gas: integer|Long expected";
                    if (message.execute_gas != null && message.hasOwnProperty("execute_gas"))
                        if (!$util.isInteger(message.execute_gas) && !(message.execute_gas && $util.isInteger(message.execute_gas.low) && $util.isInteger(message.execute_gas.high)))
                            return "execute_gas: integer|Long expected";
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        if (!$util.isString(message.sender))
                            return "sender: string expected";
                    return null;
                };
    
                /**
                 * Creates a MsgRequestData message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.MsgRequestData
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.MsgRequestData} MsgRequestData
                 */
                MsgRequestData.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.MsgRequestData)
                        return object;
                    var message = new $root.oracle.v1.MsgRequestData();
                    if (object.oracle_script_id != null)
                        if ($util.Long)
                            (message.oracle_script_id = $util.Long.fromValue(object.oracle_script_id)).unsigned = true;
                        else if (typeof object.oracle_script_id === "string")
                            message.oracle_script_id = parseInt(object.oracle_script_id, 10);
                        else if (typeof object.oracle_script_id === "number")
                            message.oracle_script_id = object.oracle_script_id;
                        else if (typeof object.oracle_script_id === "object")
                            message.oracle_script_id = new $util.LongBits(object.oracle_script_id.low >>> 0, object.oracle_script_id.high >>> 0).toNumber(true);
                    if (object.calldata != null)
                        if (typeof object.calldata === "string")
                            $util.base64.decode(object.calldata, message.calldata = $util.newBuffer($util.base64.length(object.calldata)), 0);
                        else if (object.calldata.length)
                            message.calldata = object.calldata;
                    if (object.ask_count != null)
                        if ($util.Long)
                            (message.ask_count = $util.Long.fromValue(object.ask_count)).unsigned = true;
                        else if (typeof object.ask_count === "string")
                            message.ask_count = parseInt(object.ask_count, 10);
                        else if (typeof object.ask_count === "number")
                            message.ask_count = object.ask_count;
                        else if (typeof object.ask_count === "object")
                            message.ask_count = new $util.LongBits(object.ask_count.low >>> 0, object.ask_count.high >>> 0).toNumber(true);
                    if (object.min_count != null)
                        if ($util.Long)
                            (message.min_count = $util.Long.fromValue(object.min_count)).unsigned = true;
                        else if (typeof object.min_count === "string")
                            message.min_count = parseInt(object.min_count, 10);
                        else if (typeof object.min_count === "number")
                            message.min_count = object.min_count;
                        else if (typeof object.min_count === "object")
                            message.min_count = new $util.LongBits(object.min_count.low >>> 0, object.min_count.high >>> 0).toNumber(true);
                    if (object.client_id != null)
                        message.client_id = String(object.client_id);
                    if (object.fee_limit) {
                        if (!Array.isArray(object.fee_limit))
                            throw TypeError(".oracle.v1.MsgRequestData.fee_limit: array expected");
                        message.fee_limit = [];
                        for (var i = 0; i < object.fee_limit.length; ++i) {
                            if (typeof object.fee_limit[i] !== "object")
                                throw TypeError(".oracle.v1.MsgRequestData.fee_limit: object expected");
                            message.fee_limit[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.fee_limit[i]);
                        }
                    }
                    if (object.prepare_gas != null)
                        if ($util.Long)
                            (message.prepare_gas = $util.Long.fromValue(object.prepare_gas)).unsigned = true;
                        else if (typeof object.prepare_gas === "string")
                            message.prepare_gas = parseInt(object.prepare_gas, 10);
                        else if (typeof object.prepare_gas === "number")
                            message.prepare_gas = object.prepare_gas;
                        else if (typeof object.prepare_gas === "object")
                            message.prepare_gas = new $util.LongBits(object.prepare_gas.low >>> 0, object.prepare_gas.high >>> 0).toNumber(true);
                    if (object.execute_gas != null)
                        if ($util.Long)
                            (message.execute_gas = $util.Long.fromValue(object.execute_gas)).unsigned = true;
                        else if (typeof object.execute_gas === "string")
                            message.execute_gas = parseInt(object.execute_gas, 10);
                        else if (typeof object.execute_gas === "number")
                            message.execute_gas = object.execute_gas;
                        else if (typeof object.execute_gas === "object")
                            message.execute_gas = new $util.LongBits(object.execute_gas.low >>> 0, object.execute_gas.high >>> 0).toNumber(true);
                    if (object.sender != null)
                        message.sender = String(object.sender);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MsgRequestData message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.MsgRequestData
                 * @static
                 * @param {oracle.v1.MsgRequestData} message MsgRequestData
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgRequestData.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.fee_limit = [];
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.oracle_script_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.oracle_script_id = options.longs === String ? "0" : 0;
                        if (options.bytes === String)
                            object.calldata = "";
                        else {
                            object.calldata = [];
                            if (options.bytes !== Array)
                                object.calldata = $util.newBuffer(object.calldata);
                        }
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.ask_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.ask_count = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.min_count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.min_count = options.longs === String ? "0" : 0;
                        object.client_id = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.prepare_gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.prepare_gas = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.execute_gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.execute_gas = options.longs === String ? "0" : 0;
                        object.sender = "";
                    }
                    if (message.oracle_script_id != null && message.hasOwnProperty("oracle_script_id"))
                        if (typeof message.oracle_script_id === "number")
                            object.oracle_script_id = options.longs === String ? String(message.oracle_script_id) : message.oracle_script_id;
                        else
                            object.oracle_script_id = options.longs === String ? $util.Long.prototype.toString.call(message.oracle_script_id) : options.longs === Number ? new $util.LongBits(message.oracle_script_id.low >>> 0, message.oracle_script_id.high >>> 0).toNumber(true) : message.oracle_script_id;
                    if (message.calldata != null && message.hasOwnProperty("calldata"))
                        object.calldata = options.bytes === String ? $util.base64.encode(message.calldata, 0, message.calldata.length) : options.bytes === Array ? Array.prototype.slice.call(message.calldata) : message.calldata;
                    if (message.ask_count != null && message.hasOwnProperty("ask_count"))
                        if (typeof message.ask_count === "number")
                            object.ask_count = options.longs === String ? String(message.ask_count) : message.ask_count;
                        else
                            object.ask_count = options.longs === String ? $util.Long.prototype.toString.call(message.ask_count) : options.longs === Number ? new $util.LongBits(message.ask_count.low >>> 0, message.ask_count.high >>> 0).toNumber(true) : message.ask_count;
                    if (message.min_count != null && message.hasOwnProperty("min_count"))
                        if (typeof message.min_count === "number")
                            object.min_count = options.longs === String ? String(message.min_count) : message.min_count;
                        else
                            object.min_count = options.longs === String ? $util.Long.prototype.toString.call(message.min_count) : options.longs === Number ? new $util.LongBits(message.min_count.low >>> 0, message.min_count.high >>> 0).toNumber(true) : message.min_count;
                    if (message.client_id != null && message.hasOwnProperty("client_id"))
                        object.client_id = message.client_id;
                    if (message.fee_limit && message.fee_limit.length) {
                        object.fee_limit = [];
                        for (var j = 0; j < message.fee_limit.length; ++j)
                            object.fee_limit[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.fee_limit[j], options);
                    }
                    if (message.prepare_gas != null && message.hasOwnProperty("prepare_gas"))
                        if (typeof message.prepare_gas === "number")
                            object.prepare_gas = options.longs === String ? String(message.prepare_gas) : message.prepare_gas;
                        else
                            object.prepare_gas = options.longs === String ? $util.Long.prototype.toString.call(message.prepare_gas) : options.longs === Number ? new $util.LongBits(message.prepare_gas.low >>> 0, message.prepare_gas.high >>> 0).toNumber(true) : message.prepare_gas;
                    if (message.execute_gas != null && message.hasOwnProperty("execute_gas"))
                        if (typeof message.execute_gas === "number")
                            object.execute_gas = options.longs === String ? String(message.execute_gas) : message.execute_gas;
                        else
                            object.execute_gas = options.longs === String ? $util.Long.prototype.toString.call(message.execute_gas) : options.longs === Number ? new $util.LongBits(message.execute_gas.low >>> 0, message.execute_gas.high >>> 0).toNumber(true) : message.execute_gas;
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        object.sender = message.sender;
                    return object;
                };
    
                /**
                 * Converts this MsgRequestData to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.MsgRequestData
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgRequestData.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgRequestData;
            })();
    
            v1.MsgRequestDataResponse = (function() {
    
                /**
                 * Properties of a MsgRequestDataResponse.
                 * @memberof oracle.v1
                 * @interface IMsgRequestDataResponse
                 */
    
                /**
                 * Constructs a new MsgRequestDataResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a MsgRequestDataResponse.
                 * @implements IMsgRequestDataResponse
                 * @constructor
                 * @param {oracle.v1.IMsgRequestDataResponse=} [properties] Properties to set
                 */
                function MsgRequestDataResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified MsgRequestDataResponse message. Does not implicitly {@link oracle.v1.MsgRequestDataResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.MsgRequestDataResponse
                 * @static
                 * @param {oracle.v1.IMsgRequestDataResponse} message MsgRequestDataResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgRequestDataResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgRequestDataResponse message, length delimited. Does not implicitly {@link oracle.v1.MsgRequestDataResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.MsgRequestDataResponse
                 * @static
                 * @param {oracle.v1.IMsgRequestDataResponse} message MsgRequestDataResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgRequestDataResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgRequestDataResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.MsgRequestDataResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.MsgRequestDataResponse} MsgRequestDataResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgRequestDataResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.MsgRequestDataResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgRequestDataResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.MsgRequestDataResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.MsgRequestDataResponse} MsgRequestDataResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgRequestDataResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgRequestDataResponse message.
                 * @function verify
                 * @memberof oracle.v1.MsgRequestDataResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgRequestDataResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a MsgRequestDataResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.MsgRequestDataResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.MsgRequestDataResponse} MsgRequestDataResponse
                 */
                MsgRequestDataResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.MsgRequestDataResponse)
                        return object;
                    return new $root.oracle.v1.MsgRequestDataResponse();
                };
    
                /**
                 * Creates a plain object from a MsgRequestDataResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.MsgRequestDataResponse
                 * @static
                 * @param {oracle.v1.MsgRequestDataResponse} message MsgRequestDataResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgRequestDataResponse.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this MsgRequestDataResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.MsgRequestDataResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgRequestDataResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgRequestDataResponse;
            })();
    
            v1.MsgReportData = (function() {
    
                /**
                 * Properties of a MsgReportData.
                 * @memberof oracle.v1
                 * @interface IMsgReportData
                 * @property {Long|null} [request_id] MsgReportData request_id
                 * @property {Array.<oracle.v1.IRawReport>|null} [raw_reports] MsgReportData raw_reports
                 * @property {string|null} [validator] MsgReportData validator
                 */
    
                /**
                 * Constructs a new MsgReportData.
                 * @memberof oracle.v1
                 * @classdesc Represents a MsgReportData.
                 * @implements IMsgReportData
                 * @constructor
                 * @param {oracle.v1.IMsgReportData=} [properties] Properties to set
                 */
                function MsgReportData(properties) {
                    this.raw_reports = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MsgReportData request_id.
                 * @member {Long} request_id
                 * @memberof oracle.v1.MsgReportData
                 * @instance
                 */
                MsgReportData.prototype.request_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * MsgReportData raw_reports.
                 * @member {Array.<oracle.v1.IRawReport>} raw_reports
                 * @memberof oracle.v1.MsgReportData
                 * @instance
                 */
                MsgReportData.prototype.raw_reports = $util.emptyArray;
    
                /**
                 * MsgReportData validator.
                 * @member {string} validator
                 * @memberof oracle.v1.MsgReportData
                 * @instance
                 */
                MsgReportData.prototype.validator = "";
    
                /**
                 * Encodes the specified MsgReportData message. Does not implicitly {@link oracle.v1.MsgReportData.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.MsgReportData
                 * @static
                 * @param {oracle.v1.IMsgReportData} message MsgReportData message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgReportData.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request_id != null && Object.hasOwnProperty.call(message, "request_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.request_id);
                    if (message.raw_reports != null && message.raw_reports.length)
                        for (var i = 0; i < message.raw_reports.length; ++i)
                            $root.oracle.v1.RawReport.encode(message.raw_reports[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.validator != null && Object.hasOwnProperty.call(message, "validator"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.validator);
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgReportData message, length delimited. Does not implicitly {@link oracle.v1.MsgReportData.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.MsgReportData
                 * @static
                 * @param {oracle.v1.IMsgReportData} message MsgReportData message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgReportData.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgReportData message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.MsgReportData
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.MsgReportData} MsgReportData
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgReportData.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.MsgReportData();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.request_id = reader.uint64();
                            break;
                        case 2:
                            if (!(message.raw_reports && message.raw_reports.length))
                                message.raw_reports = [];
                            message.raw_reports.push($root.oracle.v1.RawReport.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.validator = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgReportData message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.MsgReportData
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.MsgReportData} MsgReportData
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgReportData.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgReportData message.
                 * @function verify
                 * @memberof oracle.v1.MsgReportData
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgReportData.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        if (!$util.isInteger(message.request_id) && !(message.request_id && $util.isInteger(message.request_id.low) && $util.isInteger(message.request_id.high)))
                            return "request_id: integer|Long expected";
                    if (message.raw_reports != null && message.hasOwnProperty("raw_reports")) {
                        if (!Array.isArray(message.raw_reports))
                            return "raw_reports: array expected";
                        for (var i = 0; i < message.raw_reports.length; ++i) {
                            var error = $root.oracle.v1.RawReport.verify(message.raw_reports[i]);
                            if (error)
                                return "raw_reports." + error;
                        }
                    }
                    if (message.validator != null && message.hasOwnProperty("validator"))
                        if (!$util.isString(message.validator))
                            return "validator: string expected";
                    return null;
                };
    
                /**
                 * Creates a MsgReportData message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.MsgReportData
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.MsgReportData} MsgReportData
                 */
                MsgReportData.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.MsgReportData)
                        return object;
                    var message = new $root.oracle.v1.MsgReportData();
                    if (object.request_id != null)
                        if ($util.Long)
                            (message.request_id = $util.Long.fromValue(object.request_id)).unsigned = true;
                        else if (typeof object.request_id === "string")
                            message.request_id = parseInt(object.request_id, 10);
                        else if (typeof object.request_id === "number")
                            message.request_id = object.request_id;
                        else if (typeof object.request_id === "object")
                            message.request_id = new $util.LongBits(object.request_id.low >>> 0, object.request_id.high >>> 0).toNumber(true);
                    if (object.raw_reports) {
                        if (!Array.isArray(object.raw_reports))
                            throw TypeError(".oracle.v1.MsgReportData.raw_reports: array expected");
                        message.raw_reports = [];
                        for (var i = 0; i < object.raw_reports.length; ++i) {
                            if (typeof object.raw_reports[i] !== "object")
                                throw TypeError(".oracle.v1.MsgReportData.raw_reports: object expected");
                            message.raw_reports[i] = $root.oracle.v1.RawReport.fromObject(object.raw_reports[i]);
                        }
                    }
                    if (object.validator != null)
                        message.validator = String(object.validator);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MsgReportData message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.MsgReportData
                 * @static
                 * @param {oracle.v1.MsgReportData} message MsgReportData
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgReportData.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.raw_reports = [];
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.request_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.request_id = options.longs === String ? "0" : 0;
                        object.validator = "";
                    }
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        if (typeof message.request_id === "number")
                            object.request_id = options.longs === String ? String(message.request_id) : message.request_id;
                        else
                            object.request_id = options.longs === String ? $util.Long.prototype.toString.call(message.request_id) : options.longs === Number ? new $util.LongBits(message.request_id.low >>> 0, message.request_id.high >>> 0).toNumber(true) : message.request_id;
                    if (message.raw_reports && message.raw_reports.length) {
                        object.raw_reports = [];
                        for (var j = 0; j < message.raw_reports.length; ++j)
                            object.raw_reports[j] = $root.oracle.v1.RawReport.toObject(message.raw_reports[j], options);
                    }
                    if (message.validator != null && message.hasOwnProperty("validator"))
                        object.validator = message.validator;
                    return object;
                };
    
                /**
                 * Converts this MsgReportData to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.MsgReportData
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgReportData.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgReportData;
            })();
    
            v1.MsgReportDataResponse = (function() {
    
                /**
                 * Properties of a MsgReportDataResponse.
                 * @memberof oracle.v1
                 * @interface IMsgReportDataResponse
                 */
    
                /**
                 * Constructs a new MsgReportDataResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a MsgReportDataResponse.
                 * @implements IMsgReportDataResponse
                 * @constructor
                 * @param {oracle.v1.IMsgReportDataResponse=} [properties] Properties to set
                 */
                function MsgReportDataResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified MsgReportDataResponse message. Does not implicitly {@link oracle.v1.MsgReportDataResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.MsgReportDataResponse
                 * @static
                 * @param {oracle.v1.IMsgReportDataResponse} message MsgReportDataResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgReportDataResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgReportDataResponse message, length delimited. Does not implicitly {@link oracle.v1.MsgReportDataResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.MsgReportDataResponse
                 * @static
                 * @param {oracle.v1.IMsgReportDataResponse} message MsgReportDataResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgReportDataResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgReportDataResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.MsgReportDataResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.MsgReportDataResponse} MsgReportDataResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgReportDataResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.MsgReportDataResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgReportDataResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.MsgReportDataResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.MsgReportDataResponse} MsgReportDataResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgReportDataResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgReportDataResponse message.
                 * @function verify
                 * @memberof oracle.v1.MsgReportDataResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgReportDataResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a MsgReportDataResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.MsgReportDataResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.MsgReportDataResponse} MsgReportDataResponse
                 */
                MsgReportDataResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.MsgReportDataResponse)
                        return object;
                    return new $root.oracle.v1.MsgReportDataResponse();
                };
    
                /**
                 * Creates a plain object from a MsgReportDataResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.MsgReportDataResponse
                 * @static
                 * @param {oracle.v1.MsgReportDataResponse} message MsgReportDataResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgReportDataResponse.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this MsgReportDataResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.MsgReportDataResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgReportDataResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgReportDataResponse;
            })();
    
            v1.MsgCreateDataSource = (function() {
    
                /**
                 * Properties of a MsgCreateDataSource.
                 * @memberof oracle.v1
                 * @interface IMsgCreateDataSource
                 * @property {string|null} [name] MsgCreateDataSource name
                 * @property {string|null} [description] MsgCreateDataSource description
                 * @property {Uint8Array|null} [executable] MsgCreateDataSource executable
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [fee] MsgCreateDataSource fee
                 * @property {string|null} [treasury] MsgCreateDataSource treasury
                 * @property {string|null} [owner] MsgCreateDataSource owner
                 * @property {string|null} [sender] MsgCreateDataSource sender
                 */
    
                /**
                 * Constructs a new MsgCreateDataSource.
                 * @memberof oracle.v1
                 * @classdesc Represents a MsgCreateDataSource.
                 * @implements IMsgCreateDataSource
                 * @constructor
                 * @param {oracle.v1.IMsgCreateDataSource=} [properties] Properties to set
                 */
                function MsgCreateDataSource(properties) {
                    this.fee = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MsgCreateDataSource name.
                 * @member {string} name
                 * @memberof oracle.v1.MsgCreateDataSource
                 * @instance
                 */
                MsgCreateDataSource.prototype.name = "";
    
                /**
                 * MsgCreateDataSource description.
                 * @member {string} description
                 * @memberof oracle.v1.MsgCreateDataSource
                 * @instance
                 */
                MsgCreateDataSource.prototype.description = "";
    
                /**
                 * MsgCreateDataSource executable.
                 * @member {Uint8Array} executable
                 * @memberof oracle.v1.MsgCreateDataSource
                 * @instance
                 */
                MsgCreateDataSource.prototype.executable = $util.newBuffer([]);
    
                /**
                 * MsgCreateDataSource fee.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} fee
                 * @memberof oracle.v1.MsgCreateDataSource
                 * @instance
                 */
                MsgCreateDataSource.prototype.fee = $util.emptyArray;
    
                /**
                 * MsgCreateDataSource treasury.
                 * @member {string} treasury
                 * @memberof oracle.v1.MsgCreateDataSource
                 * @instance
                 */
                MsgCreateDataSource.prototype.treasury = "";
    
                /**
                 * MsgCreateDataSource owner.
                 * @member {string} owner
                 * @memberof oracle.v1.MsgCreateDataSource
                 * @instance
                 */
                MsgCreateDataSource.prototype.owner = "";
    
                /**
                 * MsgCreateDataSource sender.
                 * @member {string} sender
                 * @memberof oracle.v1.MsgCreateDataSource
                 * @instance
                 */
                MsgCreateDataSource.prototype.sender = "";
    
                /**
                 * Encodes the specified MsgCreateDataSource message. Does not implicitly {@link oracle.v1.MsgCreateDataSource.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.MsgCreateDataSource
                 * @static
                 * @param {oracle.v1.IMsgCreateDataSource} message MsgCreateDataSource message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgCreateDataSource.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                    if (message.executable != null && Object.hasOwnProperty.call(message, "executable"))
                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.executable);
                    if (message.fee != null && message.fee.length)
                        for (var i = 0; i < message.fee.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.fee[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.treasury != null && Object.hasOwnProperty.call(message, "treasury"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.treasury);
                    if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.owner);
                    if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.sender);
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgCreateDataSource message, length delimited. Does not implicitly {@link oracle.v1.MsgCreateDataSource.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.MsgCreateDataSource
                 * @static
                 * @param {oracle.v1.IMsgCreateDataSource} message MsgCreateDataSource message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgCreateDataSource.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgCreateDataSource message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.MsgCreateDataSource
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.MsgCreateDataSource} MsgCreateDataSource
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgCreateDataSource.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.MsgCreateDataSource();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.description = reader.string();
                            break;
                        case 3:
                            message.executable = reader.bytes();
                            break;
                        case 4:
                            if (!(message.fee && message.fee.length))
                                message.fee = [];
                            message.fee.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            message.treasury = reader.string();
                            break;
                        case 6:
                            message.owner = reader.string();
                            break;
                        case 7:
                            message.sender = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgCreateDataSource message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.MsgCreateDataSource
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.MsgCreateDataSource} MsgCreateDataSource
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgCreateDataSource.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgCreateDataSource message.
                 * @function verify
                 * @memberof oracle.v1.MsgCreateDataSource
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgCreateDataSource.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.executable != null && message.hasOwnProperty("executable"))
                        if (!(message.executable && typeof message.executable.length === "number" || $util.isString(message.executable)))
                            return "executable: buffer expected";
                    if (message.fee != null && message.hasOwnProperty("fee")) {
                        if (!Array.isArray(message.fee))
                            return "fee: array expected";
                        for (var i = 0; i < message.fee.length; ++i) {
                            var error = $root.cosmos.base.v1beta1.Coin.verify(message.fee[i]);
                            if (error)
                                return "fee." + error;
                        }
                    }
                    if (message.treasury != null && message.hasOwnProperty("treasury"))
                        if (!$util.isString(message.treasury))
                            return "treasury: string expected";
                    if (message.owner != null && message.hasOwnProperty("owner"))
                        if (!$util.isString(message.owner))
                            return "owner: string expected";
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        if (!$util.isString(message.sender))
                            return "sender: string expected";
                    return null;
                };
    
                /**
                 * Creates a MsgCreateDataSource message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.MsgCreateDataSource
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.MsgCreateDataSource} MsgCreateDataSource
                 */
                MsgCreateDataSource.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.MsgCreateDataSource)
                        return object;
                    var message = new $root.oracle.v1.MsgCreateDataSource();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.executable != null)
                        if (typeof object.executable === "string")
                            $util.base64.decode(object.executable, message.executable = $util.newBuffer($util.base64.length(object.executable)), 0);
                        else if (object.executable.length)
                            message.executable = object.executable;
                    if (object.fee) {
                        if (!Array.isArray(object.fee))
                            throw TypeError(".oracle.v1.MsgCreateDataSource.fee: array expected");
                        message.fee = [];
                        for (var i = 0; i < object.fee.length; ++i) {
                            if (typeof object.fee[i] !== "object")
                                throw TypeError(".oracle.v1.MsgCreateDataSource.fee: object expected");
                            message.fee[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.fee[i]);
                        }
                    }
                    if (object.treasury != null)
                        message.treasury = String(object.treasury);
                    if (object.owner != null)
                        message.owner = String(object.owner);
                    if (object.sender != null)
                        message.sender = String(object.sender);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MsgCreateDataSource message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.MsgCreateDataSource
                 * @static
                 * @param {oracle.v1.MsgCreateDataSource} message MsgCreateDataSource
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgCreateDataSource.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.fee = [];
                    if (options.defaults) {
                        object.name = "";
                        object.description = "";
                        if (options.bytes === String)
                            object.executable = "";
                        else {
                            object.executable = [];
                            if (options.bytes !== Array)
                                object.executable = $util.newBuffer(object.executable);
                        }
                        object.treasury = "";
                        object.owner = "";
                        object.sender = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.executable != null && message.hasOwnProperty("executable"))
                        object.executable = options.bytes === String ? $util.base64.encode(message.executable, 0, message.executable.length) : options.bytes === Array ? Array.prototype.slice.call(message.executable) : message.executable;
                    if (message.fee && message.fee.length) {
                        object.fee = [];
                        for (var j = 0; j < message.fee.length; ++j)
                            object.fee[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.fee[j], options);
                    }
                    if (message.treasury != null && message.hasOwnProperty("treasury"))
                        object.treasury = message.treasury;
                    if (message.owner != null && message.hasOwnProperty("owner"))
                        object.owner = message.owner;
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        object.sender = message.sender;
                    return object;
                };
    
                /**
                 * Converts this MsgCreateDataSource to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.MsgCreateDataSource
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgCreateDataSource.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgCreateDataSource;
            })();
    
            v1.MsgCreateDataSourceResponse = (function() {
    
                /**
                 * Properties of a MsgCreateDataSourceResponse.
                 * @memberof oracle.v1
                 * @interface IMsgCreateDataSourceResponse
                 */
    
                /**
                 * Constructs a new MsgCreateDataSourceResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a MsgCreateDataSourceResponse.
                 * @implements IMsgCreateDataSourceResponse
                 * @constructor
                 * @param {oracle.v1.IMsgCreateDataSourceResponse=} [properties] Properties to set
                 */
                function MsgCreateDataSourceResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified MsgCreateDataSourceResponse message. Does not implicitly {@link oracle.v1.MsgCreateDataSourceResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.MsgCreateDataSourceResponse
                 * @static
                 * @param {oracle.v1.IMsgCreateDataSourceResponse} message MsgCreateDataSourceResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgCreateDataSourceResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgCreateDataSourceResponse message, length delimited. Does not implicitly {@link oracle.v1.MsgCreateDataSourceResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.MsgCreateDataSourceResponse
                 * @static
                 * @param {oracle.v1.IMsgCreateDataSourceResponse} message MsgCreateDataSourceResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgCreateDataSourceResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgCreateDataSourceResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.MsgCreateDataSourceResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.MsgCreateDataSourceResponse} MsgCreateDataSourceResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgCreateDataSourceResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.MsgCreateDataSourceResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgCreateDataSourceResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.MsgCreateDataSourceResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.MsgCreateDataSourceResponse} MsgCreateDataSourceResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgCreateDataSourceResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgCreateDataSourceResponse message.
                 * @function verify
                 * @memberof oracle.v1.MsgCreateDataSourceResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgCreateDataSourceResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a MsgCreateDataSourceResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.MsgCreateDataSourceResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.MsgCreateDataSourceResponse} MsgCreateDataSourceResponse
                 */
                MsgCreateDataSourceResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.MsgCreateDataSourceResponse)
                        return object;
                    return new $root.oracle.v1.MsgCreateDataSourceResponse();
                };
    
                /**
                 * Creates a plain object from a MsgCreateDataSourceResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.MsgCreateDataSourceResponse
                 * @static
                 * @param {oracle.v1.MsgCreateDataSourceResponse} message MsgCreateDataSourceResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgCreateDataSourceResponse.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this MsgCreateDataSourceResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.MsgCreateDataSourceResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgCreateDataSourceResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgCreateDataSourceResponse;
            })();
    
            v1.MsgEditDataSource = (function() {
    
                /**
                 * Properties of a MsgEditDataSource.
                 * @memberof oracle.v1
                 * @interface IMsgEditDataSource
                 * @property {Long|null} [data_source_id] MsgEditDataSource data_source_id
                 * @property {string|null} [name] MsgEditDataSource name
                 * @property {string|null} [description] MsgEditDataSource description
                 * @property {Uint8Array|null} [executable] MsgEditDataSource executable
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [fee] MsgEditDataSource fee
                 * @property {string|null} [treasury] MsgEditDataSource treasury
                 * @property {string|null} [owner] MsgEditDataSource owner
                 * @property {string|null} [sender] MsgEditDataSource sender
                 */
    
                /**
                 * Constructs a new MsgEditDataSource.
                 * @memberof oracle.v1
                 * @classdesc Represents a MsgEditDataSource.
                 * @implements IMsgEditDataSource
                 * @constructor
                 * @param {oracle.v1.IMsgEditDataSource=} [properties] Properties to set
                 */
                function MsgEditDataSource(properties) {
                    this.fee = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MsgEditDataSource data_source_id.
                 * @member {Long} data_source_id
                 * @memberof oracle.v1.MsgEditDataSource
                 * @instance
                 */
                MsgEditDataSource.prototype.data_source_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * MsgEditDataSource name.
                 * @member {string} name
                 * @memberof oracle.v1.MsgEditDataSource
                 * @instance
                 */
                MsgEditDataSource.prototype.name = "";
    
                /**
                 * MsgEditDataSource description.
                 * @member {string} description
                 * @memberof oracle.v1.MsgEditDataSource
                 * @instance
                 */
                MsgEditDataSource.prototype.description = "";
    
                /**
                 * MsgEditDataSource executable.
                 * @member {Uint8Array} executable
                 * @memberof oracle.v1.MsgEditDataSource
                 * @instance
                 */
                MsgEditDataSource.prototype.executable = $util.newBuffer([]);
    
                /**
                 * MsgEditDataSource fee.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} fee
                 * @memberof oracle.v1.MsgEditDataSource
                 * @instance
                 */
                MsgEditDataSource.prototype.fee = $util.emptyArray;
    
                /**
                 * MsgEditDataSource treasury.
                 * @member {string} treasury
                 * @memberof oracle.v1.MsgEditDataSource
                 * @instance
                 */
                MsgEditDataSource.prototype.treasury = "";
    
                /**
                 * MsgEditDataSource owner.
                 * @member {string} owner
                 * @memberof oracle.v1.MsgEditDataSource
                 * @instance
                 */
                MsgEditDataSource.prototype.owner = "";
    
                /**
                 * MsgEditDataSource sender.
                 * @member {string} sender
                 * @memberof oracle.v1.MsgEditDataSource
                 * @instance
                 */
                MsgEditDataSource.prototype.sender = "";
    
                /**
                 * Encodes the specified MsgEditDataSource message. Does not implicitly {@link oracle.v1.MsgEditDataSource.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.MsgEditDataSource
                 * @static
                 * @param {oracle.v1.IMsgEditDataSource} message MsgEditDataSource message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgEditDataSource.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.data_source_id != null && Object.hasOwnProperty.call(message, "data_source_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.data_source_id);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                    if (message.executable != null && Object.hasOwnProperty.call(message, "executable"))
                        writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.executable);
                    if (message.fee != null && message.fee.length)
                        for (var i = 0; i < message.fee.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.fee[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.treasury != null && Object.hasOwnProperty.call(message, "treasury"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.treasury);
                    if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.owner);
                    if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.sender);
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgEditDataSource message, length delimited. Does not implicitly {@link oracle.v1.MsgEditDataSource.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.MsgEditDataSource
                 * @static
                 * @param {oracle.v1.IMsgEditDataSource} message MsgEditDataSource message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgEditDataSource.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgEditDataSource message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.MsgEditDataSource
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.MsgEditDataSource} MsgEditDataSource
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgEditDataSource.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.MsgEditDataSource();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.data_source_id = reader.uint64();
                            break;
                        case 2:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.description = reader.string();
                            break;
                        case 4:
                            message.executable = reader.bytes();
                            break;
                        case 5:
                            if (!(message.fee && message.fee.length))
                                message.fee = [];
                            message.fee.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            message.treasury = reader.string();
                            break;
                        case 7:
                            message.owner = reader.string();
                            break;
                        case 8:
                            message.sender = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgEditDataSource message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.MsgEditDataSource
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.MsgEditDataSource} MsgEditDataSource
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgEditDataSource.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgEditDataSource message.
                 * @function verify
                 * @memberof oracle.v1.MsgEditDataSource
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgEditDataSource.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.data_source_id != null && message.hasOwnProperty("data_source_id"))
                        if (!$util.isInteger(message.data_source_id) && !(message.data_source_id && $util.isInteger(message.data_source_id.low) && $util.isInteger(message.data_source_id.high)))
                            return "data_source_id: integer|Long expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.executable != null && message.hasOwnProperty("executable"))
                        if (!(message.executable && typeof message.executable.length === "number" || $util.isString(message.executable)))
                            return "executable: buffer expected";
                    if (message.fee != null && message.hasOwnProperty("fee")) {
                        if (!Array.isArray(message.fee))
                            return "fee: array expected";
                        for (var i = 0; i < message.fee.length; ++i) {
                            var error = $root.cosmos.base.v1beta1.Coin.verify(message.fee[i]);
                            if (error)
                                return "fee." + error;
                        }
                    }
                    if (message.treasury != null && message.hasOwnProperty("treasury"))
                        if (!$util.isString(message.treasury))
                            return "treasury: string expected";
                    if (message.owner != null && message.hasOwnProperty("owner"))
                        if (!$util.isString(message.owner))
                            return "owner: string expected";
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        if (!$util.isString(message.sender))
                            return "sender: string expected";
                    return null;
                };
    
                /**
                 * Creates a MsgEditDataSource message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.MsgEditDataSource
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.MsgEditDataSource} MsgEditDataSource
                 */
                MsgEditDataSource.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.MsgEditDataSource)
                        return object;
                    var message = new $root.oracle.v1.MsgEditDataSource();
                    if (object.data_source_id != null)
                        if ($util.Long)
                            (message.data_source_id = $util.Long.fromValue(object.data_source_id)).unsigned = true;
                        else if (typeof object.data_source_id === "string")
                            message.data_source_id = parseInt(object.data_source_id, 10);
                        else if (typeof object.data_source_id === "number")
                            message.data_source_id = object.data_source_id;
                        else if (typeof object.data_source_id === "object")
                            message.data_source_id = new $util.LongBits(object.data_source_id.low >>> 0, object.data_source_id.high >>> 0).toNumber(true);
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.executable != null)
                        if (typeof object.executable === "string")
                            $util.base64.decode(object.executable, message.executable = $util.newBuffer($util.base64.length(object.executable)), 0);
                        else if (object.executable.length)
                            message.executable = object.executable;
                    if (object.fee) {
                        if (!Array.isArray(object.fee))
                            throw TypeError(".oracle.v1.MsgEditDataSource.fee: array expected");
                        message.fee = [];
                        for (var i = 0; i < object.fee.length; ++i) {
                            if (typeof object.fee[i] !== "object")
                                throw TypeError(".oracle.v1.MsgEditDataSource.fee: object expected");
                            message.fee[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.fee[i]);
                        }
                    }
                    if (object.treasury != null)
                        message.treasury = String(object.treasury);
                    if (object.owner != null)
                        message.owner = String(object.owner);
                    if (object.sender != null)
                        message.sender = String(object.sender);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MsgEditDataSource message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.MsgEditDataSource
                 * @static
                 * @param {oracle.v1.MsgEditDataSource} message MsgEditDataSource
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgEditDataSource.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.fee = [];
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.data_source_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.data_source_id = options.longs === String ? "0" : 0;
                        object.name = "";
                        object.description = "";
                        if (options.bytes === String)
                            object.executable = "";
                        else {
                            object.executable = [];
                            if (options.bytes !== Array)
                                object.executable = $util.newBuffer(object.executable);
                        }
                        object.treasury = "";
                        object.owner = "";
                        object.sender = "";
                    }
                    if (message.data_source_id != null && message.hasOwnProperty("data_source_id"))
                        if (typeof message.data_source_id === "number")
                            object.data_source_id = options.longs === String ? String(message.data_source_id) : message.data_source_id;
                        else
                            object.data_source_id = options.longs === String ? $util.Long.prototype.toString.call(message.data_source_id) : options.longs === Number ? new $util.LongBits(message.data_source_id.low >>> 0, message.data_source_id.high >>> 0).toNumber(true) : message.data_source_id;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.executable != null && message.hasOwnProperty("executable"))
                        object.executable = options.bytes === String ? $util.base64.encode(message.executable, 0, message.executable.length) : options.bytes === Array ? Array.prototype.slice.call(message.executable) : message.executable;
                    if (message.fee && message.fee.length) {
                        object.fee = [];
                        for (var j = 0; j < message.fee.length; ++j)
                            object.fee[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.fee[j], options);
                    }
                    if (message.treasury != null && message.hasOwnProperty("treasury"))
                        object.treasury = message.treasury;
                    if (message.owner != null && message.hasOwnProperty("owner"))
                        object.owner = message.owner;
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        object.sender = message.sender;
                    return object;
                };
    
                /**
                 * Converts this MsgEditDataSource to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.MsgEditDataSource
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgEditDataSource.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgEditDataSource;
            })();
    
            v1.MsgEditDataSourceResponse = (function() {
    
                /**
                 * Properties of a MsgEditDataSourceResponse.
                 * @memberof oracle.v1
                 * @interface IMsgEditDataSourceResponse
                 */
    
                /**
                 * Constructs a new MsgEditDataSourceResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a MsgEditDataSourceResponse.
                 * @implements IMsgEditDataSourceResponse
                 * @constructor
                 * @param {oracle.v1.IMsgEditDataSourceResponse=} [properties] Properties to set
                 */
                function MsgEditDataSourceResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified MsgEditDataSourceResponse message. Does not implicitly {@link oracle.v1.MsgEditDataSourceResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.MsgEditDataSourceResponse
                 * @static
                 * @param {oracle.v1.IMsgEditDataSourceResponse} message MsgEditDataSourceResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgEditDataSourceResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgEditDataSourceResponse message, length delimited. Does not implicitly {@link oracle.v1.MsgEditDataSourceResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.MsgEditDataSourceResponse
                 * @static
                 * @param {oracle.v1.IMsgEditDataSourceResponse} message MsgEditDataSourceResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgEditDataSourceResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgEditDataSourceResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.MsgEditDataSourceResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.MsgEditDataSourceResponse} MsgEditDataSourceResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgEditDataSourceResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.MsgEditDataSourceResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgEditDataSourceResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.MsgEditDataSourceResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.MsgEditDataSourceResponse} MsgEditDataSourceResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgEditDataSourceResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgEditDataSourceResponse message.
                 * @function verify
                 * @memberof oracle.v1.MsgEditDataSourceResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgEditDataSourceResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a MsgEditDataSourceResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.MsgEditDataSourceResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.MsgEditDataSourceResponse} MsgEditDataSourceResponse
                 */
                MsgEditDataSourceResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.MsgEditDataSourceResponse)
                        return object;
                    return new $root.oracle.v1.MsgEditDataSourceResponse();
                };
    
                /**
                 * Creates a plain object from a MsgEditDataSourceResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.MsgEditDataSourceResponse
                 * @static
                 * @param {oracle.v1.MsgEditDataSourceResponse} message MsgEditDataSourceResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgEditDataSourceResponse.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this MsgEditDataSourceResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.MsgEditDataSourceResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgEditDataSourceResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgEditDataSourceResponse;
            })();
    
            v1.MsgCreateOracleScript = (function() {
    
                /**
                 * Properties of a MsgCreateOracleScript.
                 * @memberof oracle.v1
                 * @interface IMsgCreateOracleScript
                 * @property {string|null} [name] MsgCreateOracleScript name
                 * @property {string|null} [description] MsgCreateOracleScript description
                 * @property {string|null} [schema] MsgCreateOracleScript schema
                 * @property {string|null} [source_code_url] MsgCreateOracleScript source_code_url
                 * @property {Uint8Array|null} [code] MsgCreateOracleScript code
                 * @property {string|null} [owner] MsgCreateOracleScript owner
                 * @property {string|null} [sender] MsgCreateOracleScript sender
                 */
    
                /**
                 * Constructs a new MsgCreateOracleScript.
                 * @memberof oracle.v1
                 * @classdesc Represents a MsgCreateOracleScript.
                 * @implements IMsgCreateOracleScript
                 * @constructor
                 * @param {oracle.v1.IMsgCreateOracleScript=} [properties] Properties to set
                 */
                function MsgCreateOracleScript(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MsgCreateOracleScript name.
                 * @member {string} name
                 * @memberof oracle.v1.MsgCreateOracleScript
                 * @instance
                 */
                MsgCreateOracleScript.prototype.name = "";
    
                /**
                 * MsgCreateOracleScript description.
                 * @member {string} description
                 * @memberof oracle.v1.MsgCreateOracleScript
                 * @instance
                 */
                MsgCreateOracleScript.prototype.description = "";
    
                /**
                 * MsgCreateOracleScript schema.
                 * @member {string} schema
                 * @memberof oracle.v1.MsgCreateOracleScript
                 * @instance
                 */
                MsgCreateOracleScript.prototype.schema = "";
    
                /**
                 * MsgCreateOracleScript source_code_url.
                 * @member {string} source_code_url
                 * @memberof oracle.v1.MsgCreateOracleScript
                 * @instance
                 */
                MsgCreateOracleScript.prototype.source_code_url = "";
    
                /**
                 * MsgCreateOracleScript code.
                 * @member {Uint8Array} code
                 * @memberof oracle.v1.MsgCreateOracleScript
                 * @instance
                 */
                MsgCreateOracleScript.prototype.code = $util.newBuffer([]);
    
                /**
                 * MsgCreateOracleScript owner.
                 * @member {string} owner
                 * @memberof oracle.v1.MsgCreateOracleScript
                 * @instance
                 */
                MsgCreateOracleScript.prototype.owner = "";
    
                /**
                 * MsgCreateOracleScript sender.
                 * @member {string} sender
                 * @memberof oracle.v1.MsgCreateOracleScript
                 * @instance
                 */
                MsgCreateOracleScript.prototype.sender = "";
    
                /**
                 * Encodes the specified MsgCreateOracleScript message. Does not implicitly {@link oracle.v1.MsgCreateOracleScript.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.MsgCreateOracleScript
                 * @static
                 * @param {oracle.v1.IMsgCreateOracleScript} message MsgCreateOracleScript message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgCreateOracleScript.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                    if (message.schema != null && Object.hasOwnProperty.call(message, "schema"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.schema);
                    if (message.source_code_url != null && Object.hasOwnProperty.call(message, "source_code_url"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.source_code_url);
                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                        writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.code);
                    if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.owner);
                    if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.sender);
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgCreateOracleScript message, length delimited. Does not implicitly {@link oracle.v1.MsgCreateOracleScript.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.MsgCreateOracleScript
                 * @static
                 * @param {oracle.v1.IMsgCreateOracleScript} message MsgCreateOracleScript message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgCreateOracleScript.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgCreateOracleScript message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.MsgCreateOracleScript
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.MsgCreateOracleScript} MsgCreateOracleScript
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgCreateOracleScript.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.MsgCreateOracleScript();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.description = reader.string();
                            break;
                        case 3:
                            message.schema = reader.string();
                            break;
                        case 4:
                            message.source_code_url = reader.string();
                            break;
                        case 5:
                            message.code = reader.bytes();
                            break;
                        case 6:
                            message.owner = reader.string();
                            break;
                        case 7:
                            message.sender = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgCreateOracleScript message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.MsgCreateOracleScript
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.MsgCreateOracleScript} MsgCreateOracleScript
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgCreateOracleScript.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgCreateOracleScript message.
                 * @function verify
                 * @memberof oracle.v1.MsgCreateOracleScript
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgCreateOracleScript.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.schema != null && message.hasOwnProperty("schema"))
                        if (!$util.isString(message.schema))
                            return "schema: string expected";
                    if (message.source_code_url != null && message.hasOwnProperty("source_code_url"))
                        if (!$util.isString(message.source_code_url))
                            return "source_code_url: string expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!(message.code && typeof message.code.length === "number" || $util.isString(message.code)))
                            return "code: buffer expected";
                    if (message.owner != null && message.hasOwnProperty("owner"))
                        if (!$util.isString(message.owner))
                            return "owner: string expected";
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        if (!$util.isString(message.sender))
                            return "sender: string expected";
                    return null;
                };
    
                /**
                 * Creates a MsgCreateOracleScript message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.MsgCreateOracleScript
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.MsgCreateOracleScript} MsgCreateOracleScript
                 */
                MsgCreateOracleScript.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.MsgCreateOracleScript)
                        return object;
                    var message = new $root.oracle.v1.MsgCreateOracleScript();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.schema != null)
                        message.schema = String(object.schema);
                    if (object.source_code_url != null)
                        message.source_code_url = String(object.source_code_url);
                    if (object.code != null)
                        if (typeof object.code === "string")
                            $util.base64.decode(object.code, message.code = $util.newBuffer($util.base64.length(object.code)), 0);
                        else if (object.code.length)
                            message.code = object.code;
                    if (object.owner != null)
                        message.owner = String(object.owner);
                    if (object.sender != null)
                        message.sender = String(object.sender);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MsgCreateOracleScript message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.MsgCreateOracleScript
                 * @static
                 * @param {oracle.v1.MsgCreateOracleScript} message MsgCreateOracleScript
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgCreateOracleScript.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.description = "";
                        object.schema = "";
                        object.source_code_url = "";
                        if (options.bytes === String)
                            object.code = "";
                        else {
                            object.code = [];
                            if (options.bytes !== Array)
                                object.code = $util.newBuffer(object.code);
                        }
                        object.owner = "";
                        object.sender = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.schema != null && message.hasOwnProperty("schema"))
                        object.schema = message.schema;
                    if (message.source_code_url != null && message.hasOwnProperty("source_code_url"))
                        object.source_code_url = message.source_code_url;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = options.bytes === String ? $util.base64.encode(message.code, 0, message.code.length) : options.bytes === Array ? Array.prototype.slice.call(message.code) : message.code;
                    if (message.owner != null && message.hasOwnProperty("owner"))
                        object.owner = message.owner;
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        object.sender = message.sender;
                    return object;
                };
    
                /**
                 * Converts this MsgCreateOracleScript to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.MsgCreateOracleScript
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgCreateOracleScript.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgCreateOracleScript;
            })();
    
            v1.MsgCreateOracleScriptResponse = (function() {
    
                /**
                 * Properties of a MsgCreateOracleScriptResponse.
                 * @memberof oracle.v1
                 * @interface IMsgCreateOracleScriptResponse
                 */
    
                /**
                 * Constructs a new MsgCreateOracleScriptResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a MsgCreateOracleScriptResponse.
                 * @implements IMsgCreateOracleScriptResponse
                 * @constructor
                 * @param {oracle.v1.IMsgCreateOracleScriptResponse=} [properties] Properties to set
                 */
                function MsgCreateOracleScriptResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified MsgCreateOracleScriptResponse message. Does not implicitly {@link oracle.v1.MsgCreateOracleScriptResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.MsgCreateOracleScriptResponse
                 * @static
                 * @param {oracle.v1.IMsgCreateOracleScriptResponse} message MsgCreateOracleScriptResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgCreateOracleScriptResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgCreateOracleScriptResponse message, length delimited. Does not implicitly {@link oracle.v1.MsgCreateOracleScriptResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.MsgCreateOracleScriptResponse
                 * @static
                 * @param {oracle.v1.IMsgCreateOracleScriptResponse} message MsgCreateOracleScriptResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgCreateOracleScriptResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgCreateOracleScriptResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.MsgCreateOracleScriptResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.MsgCreateOracleScriptResponse} MsgCreateOracleScriptResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgCreateOracleScriptResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.MsgCreateOracleScriptResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgCreateOracleScriptResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.MsgCreateOracleScriptResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.MsgCreateOracleScriptResponse} MsgCreateOracleScriptResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgCreateOracleScriptResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgCreateOracleScriptResponse message.
                 * @function verify
                 * @memberof oracle.v1.MsgCreateOracleScriptResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgCreateOracleScriptResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a MsgCreateOracleScriptResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.MsgCreateOracleScriptResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.MsgCreateOracleScriptResponse} MsgCreateOracleScriptResponse
                 */
                MsgCreateOracleScriptResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.MsgCreateOracleScriptResponse)
                        return object;
                    return new $root.oracle.v1.MsgCreateOracleScriptResponse();
                };
    
                /**
                 * Creates a plain object from a MsgCreateOracleScriptResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.MsgCreateOracleScriptResponse
                 * @static
                 * @param {oracle.v1.MsgCreateOracleScriptResponse} message MsgCreateOracleScriptResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgCreateOracleScriptResponse.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this MsgCreateOracleScriptResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.MsgCreateOracleScriptResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgCreateOracleScriptResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgCreateOracleScriptResponse;
            })();
    
            v1.MsgEditOracleScript = (function() {
    
                /**
                 * Properties of a MsgEditOracleScript.
                 * @memberof oracle.v1
                 * @interface IMsgEditOracleScript
                 * @property {Long|null} [oracle_script_id] MsgEditOracleScript oracle_script_id
                 * @property {string|null} [name] MsgEditOracleScript name
                 * @property {string|null} [description] MsgEditOracleScript description
                 * @property {string|null} [schema] MsgEditOracleScript schema
                 * @property {string|null} [source_code_url] MsgEditOracleScript source_code_url
                 * @property {Uint8Array|null} [code] MsgEditOracleScript code
                 * @property {string|null} [owner] MsgEditOracleScript owner
                 * @property {string|null} [sender] MsgEditOracleScript sender
                 */
    
                /**
                 * Constructs a new MsgEditOracleScript.
                 * @memberof oracle.v1
                 * @classdesc Represents a MsgEditOracleScript.
                 * @implements IMsgEditOracleScript
                 * @constructor
                 * @param {oracle.v1.IMsgEditOracleScript=} [properties] Properties to set
                 */
                function MsgEditOracleScript(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MsgEditOracleScript oracle_script_id.
                 * @member {Long} oracle_script_id
                 * @memberof oracle.v1.MsgEditOracleScript
                 * @instance
                 */
                MsgEditOracleScript.prototype.oracle_script_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * MsgEditOracleScript name.
                 * @member {string} name
                 * @memberof oracle.v1.MsgEditOracleScript
                 * @instance
                 */
                MsgEditOracleScript.prototype.name = "";
    
                /**
                 * MsgEditOracleScript description.
                 * @member {string} description
                 * @memberof oracle.v1.MsgEditOracleScript
                 * @instance
                 */
                MsgEditOracleScript.prototype.description = "";
    
                /**
                 * MsgEditOracleScript schema.
                 * @member {string} schema
                 * @memberof oracle.v1.MsgEditOracleScript
                 * @instance
                 */
                MsgEditOracleScript.prototype.schema = "";
    
                /**
                 * MsgEditOracleScript source_code_url.
                 * @member {string} source_code_url
                 * @memberof oracle.v1.MsgEditOracleScript
                 * @instance
                 */
                MsgEditOracleScript.prototype.source_code_url = "";
    
                /**
                 * MsgEditOracleScript code.
                 * @member {Uint8Array} code
                 * @memberof oracle.v1.MsgEditOracleScript
                 * @instance
                 */
                MsgEditOracleScript.prototype.code = $util.newBuffer([]);
    
                /**
                 * MsgEditOracleScript owner.
                 * @member {string} owner
                 * @memberof oracle.v1.MsgEditOracleScript
                 * @instance
                 */
                MsgEditOracleScript.prototype.owner = "";
    
                /**
                 * MsgEditOracleScript sender.
                 * @member {string} sender
                 * @memberof oracle.v1.MsgEditOracleScript
                 * @instance
                 */
                MsgEditOracleScript.prototype.sender = "";
    
                /**
                 * Encodes the specified MsgEditOracleScript message. Does not implicitly {@link oracle.v1.MsgEditOracleScript.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.MsgEditOracleScript
                 * @static
                 * @param {oracle.v1.IMsgEditOracleScript} message MsgEditOracleScript message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgEditOracleScript.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.oracle_script_id != null && Object.hasOwnProperty.call(message, "oracle_script_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.oracle_script_id);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                    if (message.schema != null && Object.hasOwnProperty.call(message, "schema"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.schema);
                    if (message.source_code_url != null && Object.hasOwnProperty.call(message, "source_code_url"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.source_code_url);
                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                        writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.code);
                    if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.owner);
                    if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.sender);
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgEditOracleScript message, length delimited. Does not implicitly {@link oracle.v1.MsgEditOracleScript.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.MsgEditOracleScript
                 * @static
                 * @param {oracle.v1.IMsgEditOracleScript} message MsgEditOracleScript message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgEditOracleScript.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgEditOracleScript message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.MsgEditOracleScript
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.MsgEditOracleScript} MsgEditOracleScript
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgEditOracleScript.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.MsgEditOracleScript();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.oracle_script_id = reader.uint64();
                            break;
                        case 2:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.description = reader.string();
                            break;
                        case 4:
                            message.schema = reader.string();
                            break;
                        case 5:
                            message.source_code_url = reader.string();
                            break;
                        case 6:
                            message.code = reader.bytes();
                            break;
                        case 7:
                            message.owner = reader.string();
                            break;
                        case 8:
                            message.sender = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgEditOracleScript message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.MsgEditOracleScript
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.MsgEditOracleScript} MsgEditOracleScript
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgEditOracleScript.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgEditOracleScript message.
                 * @function verify
                 * @memberof oracle.v1.MsgEditOracleScript
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgEditOracleScript.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.oracle_script_id != null && message.hasOwnProperty("oracle_script_id"))
                        if (!$util.isInteger(message.oracle_script_id) && !(message.oracle_script_id && $util.isInteger(message.oracle_script_id.low) && $util.isInteger(message.oracle_script_id.high)))
                            return "oracle_script_id: integer|Long expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.schema != null && message.hasOwnProperty("schema"))
                        if (!$util.isString(message.schema))
                            return "schema: string expected";
                    if (message.source_code_url != null && message.hasOwnProperty("source_code_url"))
                        if (!$util.isString(message.source_code_url))
                            return "source_code_url: string expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!(message.code && typeof message.code.length === "number" || $util.isString(message.code)))
                            return "code: buffer expected";
                    if (message.owner != null && message.hasOwnProperty("owner"))
                        if (!$util.isString(message.owner))
                            return "owner: string expected";
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        if (!$util.isString(message.sender))
                            return "sender: string expected";
                    return null;
                };
    
                /**
                 * Creates a MsgEditOracleScript message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.MsgEditOracleScript
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.MsgEditOracleScript} MsgEditOracleScript
                 */
                MsgEditOracleScript.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.MsgEditOracleScript)
                        return object;
                    var message = new $root.oracle.v1.MsgEditOracleScript();
                    if (object.oracle_script_id != null)
                        if ($util.Long)
                            (message.oracle_script_id = $util.Long.fromValue(object.oracle_script_id)).unsigned = true;
                        else if (typeof object.oracle_script_id === "string")
                            message.oracle_script_id = parseInt(object.oracle_script_id, 10);
                        else if (typeof object.oracle_script_id === "number")
                            message.oracle_script_id = object.oracle_script_id;
                        else if (typeof object.oracle_script_id === "object")
                            message.oracle_script_id = new $util.LongBits(object.oracle_script_id.low >>> 0, object.oracle_script_id.high >>> 0).toNumber(true);
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.schema != null)
                        message.schema = String(object.schema);
                    if (object.source_code_url != null)
                        message.source_code_url = String(object.source_code_url);
                    if (object.code != null)
                        if (typeof object.code === "string")
                            $util.base64.decode(object.code, message.code = $util.newBuffer($util.base64.length(object.code)), 0);
                        else if (object.code.length)
                            message.code = object.code;
                    if (object.owner != null)
                        message.owner = String(object.owner);
                    if (object.sender != null)
                        message.sender = String(object.sender);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MsgEditOracleScript message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.MsgEditOracleScript
                 * @static
                 * @param {oracle.v1.MsgEditOracleScript} message MsgEditOracleScript
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgEditOracleScript.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.oracle_script_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.oracle_script_id = options.longs === String ? "0" : 0;
                        object.name = "";
                        object.description = "";
                        object.schema = "";
                        object.source_code_url = "";
                        if (options.bytes === String)
                            object.code = "";
                        else {
                            object.code = [];
                            if (options.bytes !== Array)
                                object.code = $util.newBuffer(object.code);
                        }
                        object.owner = "";
                        object.sender = "";
                    }
                    if (message.oracle_script_id != null && message.hasOwnProperty("oracle_script_id"))
                        if (typeof message.oracle_script_id === "number")
                            object.oracle_script_id = options.longs === String ? String(message.oracle_script_id) : message.oracle_script_id;
                        else
                            object.oracle_script_id = options.longs === String ? $util.Long.prototype.toString.call(message.oracle_script_id) : options.longs === Number ? new $util.LongBits(message.oracle_script_id.low >>> 0, message.oracle_script_id.high >>> 0).toNumber(true) : message.oracle_script_id;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.schema != null && message.hasOwnProperty("schema"))
                        object.schema = message.schema;
                    if (message.source_code_url != null && message.hasOwnProperty("source_code_url"))
                        object.source_code_url = message.source_code_url;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = options.bytes === String ? $util.base64.encode(message.code, 0, message.code.length) : options.bytes === Array ? Array.prototype.slice.call(message.code) : message.code;
                    if (message.owner != null && message.hasOwnProperty("owner"))
                        object.owner = message.owner;
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        object.sender = message.sender;
                    return object;
                };
    
                /**
                 * Converts this MsgEditOracleScript to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.MsgEditOracleScript
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgEditOracleScript.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgEditOracleScript;
            })();
    
            v1.MsgEditOracleScriptResponse = (function() {
    
                /**
                 * Properties of a MsgEditOracleScriptResponse.
                 * @memberof oracle.v1
                 * @interface IMsgEditOracleScriptResponse
                 */
    
                /**
                 * Constructs a new MsgEditOracleScriptResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a MsgEditOracleScriptResponse.
                 * @implements IMsgEditOracleScriptResponse
                 * @constructor
                 * @param {oracle.v1.IMsgEditOracleScriptResponse=} [properties] Properties to set
                 */
                function MsgEditOracleScriptResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified MsgEditOracleScriptResponse message. Does not implicitly {@link oracle.v1.MsgEditOracleScriptResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.MsgEditOracleScriptResponse
                 * @static
                 * @param {oracle.v1.IMsgEditOracleScriptResponse} message MsgEditOracleScriptResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgEditOracleScriptResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgEditOracleScriptResponse message, length delimited. Does not implicitly {@link oracle.v1.MsgEditOracleScriptResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.MsgEditOracleScriptResponse
                 * @static
                 * @param {oracle.v1.IMsgEditOracleScriptResponse} message MsgEditOracleScriptResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgEditOracleScriptResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgEditOracleScriptResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.MsgEditOracleScriptResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.MsgEditOracleScriptResponse} MsgEditOracleScriptResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgEditOracleScriptResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.MsgEditOracleScriptResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgEditOracleScriptResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.MsgEditOracleScriptResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.MsgEditOracleScriptResponse} MsgEditOracleScriptResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgEditOracleScriptResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgEditOracleScriptResponse message.
                 * @function verify
                 * @memberof oracle.v1.MsgEditOracleScriptResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgEditOracleScriptResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a MsgEditOracleScriptResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.MsgEditOracleScriptResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.MsgEditOracleScriptResponse} MsgEditOracleScriptResponse
                 */
                MsgEditOracleScriptResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.MsgEditOracleScriptResponse)
                        return object;
                    return new $root.oracle.v1.MsgEditOracleScriptResponse();
                };
    
                /**
                 * Creates a plain object from a MsgEditOracleScriptResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.MsgEditOracleScriptResponse
                 * @static
                 * @param {oracle.v1.MsgEditOracleScriptResponse} message MsgEditOracleScriptResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgEditOracleScriptResponse.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this MsgEditOracleScriptResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.MsgEditOracleScriptResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgEditOracleScriptResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgEditOracleScriptResponse;
            })();
    
            v1.MsgActivate = (function() {
    
                /**
                 * Properties of a MsgActivate.
                 * @memberof oracle.v1
                 * @interface IMsgActivate
                 * @property {string|null} [validator] MsgActivate validator
                 */
    
                /**
                 * Constructs a new MsgActivate.
                 * @memberof oracle.v1
                 * @classdesc Represents a MsgActivate.
                 * @implements IMsgActivate
                 * @constructor
                 * @param {oracle.v1.IMsgActivate=} [properties] Properties to set
                 */
                function MsgActivate(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MsgActivate validator.
                 * @member {string} validator
                 * @memberof oracle.v1.MsgActivate
                 * @instance
                 */
                MsgActivate.prototype.validator = "";
    
                /**
                 * Encodes the specified MsgActivate message. Does not implicitly {@link oracle.v1.MsgActivate.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.MsgActivate
                 * @static
                 * @param {oracle.v1.IMsgActivate} message MsgActivate message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgActivate.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.validator != null && Object.hasOwnProperty.call(message, "validator"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.validator);
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgActivate message, length delimited. Does not implicitly {@link oracle.v1.MsgActivate.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.MsgActivate
                 * @static
                 * @param {oracle.v1.IMsgActivate} message MsgActivate message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgActivate.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgActivate message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.MsgActivate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.MsgActivate} MsgActivate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgActivate.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.MsgActivate();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.validator = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgActivate message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.MsgActivate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.MsgActivate} MsgActivate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgActivate.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgActivate message.
                 * @function verify
                 * @memberof oracle.v1.MsgActivate
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgActivate.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.validator != null && message.hasOwnProperty("validator"))
                        if (!$util.isString(message.validator))
                            return "validator: string expected";
                    return null;
                };
    
                /**
                 * Creates a MsgActivate message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.MsgActivate
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.MsgActivate} MsgActivate
                 */
                MsgActivate.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.MsgActivate)
                        return object;
                    var message = new $root.oracle.v1.MsgActivate();
                    if (object.validator != null)
                        message.validator = String(object.validator);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MsgActivate message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.MsgActivate
                 * @static
                 * @param {oracle.v1.MsgActivate} message MsgActivate
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgActivate.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.validator = "";
                    if (message.validator != null && message.hasOwnProperty("validator"))
                        object.validator = message.validator;
                    return object;
                };
    
                /**
                 * Converts this MsgActivate to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.MsgActivate
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgActivate.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgActivate;
            })();
    
            v1.MsgActivateResponse = (function() {
    
                /**
                 * Properties of a MsgActivateResponse.
                 * @memberof oracle.v1
                 * @interface IMsgActivateResponse
                 */
    
                /**
                 * Constructs a new MsgActivateResponse.
                 * @memberof oracle.v1
                 * @classdesc Represents a MsgActivateResponse.
                 * @implements IMsgActivateResponse
                 * @constructor
                 * @param {oracle.v1.IMsgActivateResponse=} [properties] Properties to set
                 */
                function MsgActivateResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified MsgActivateResponse message. Does not implicitly {@link oracle.v1.MsgActivateResponse.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.MsgActivateResponse
                 * @static
                 * @param {oracle.v1.IMsgActivateResponse} message MsgActivateResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgActivateResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgActivateResponse message, length delimited. Does not implicitly {@link oracle.v1.MsgActivateResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.MsgActivateResponse
                 * @static
                 * @param {oracle.v1.IMsgActivateResponse} message MsgActivateResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgActivateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgActivateResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.MsgActivateResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.MsgActivateResponse} MsgActivateResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgActivateResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.MsgActivateResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgActivateResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.MsgActivateResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.MsgActivateResponse} MsgActivateResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgActivateResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgActivateResponse message.
                 * @function verify
                 * @memberof oracle.v1.MsgActivateResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgActivateResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a MsgActivateResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.MsgActivateResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.MsgActivateResponse} MsgActivateResponse
                 */
                MsgActivateResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.MsgActivateResponse)
                        return object;
                    return new $root.oracle.v1.MsgActivateResponse();
                };
    
                /**
                 * Creates a plain object from a MsgActivateResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.MsgActivateResponse
                 * @static
                 * @param {oracle.v1.MsgActivateResponse} message MsgActivateResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgActivateResponse.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this MsgActivateResponse to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.MsgActivateResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgActivateResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgActivateResponse;
            })();
    
            v1.GenesisState = (function() {
    
                /**
                 * Properties of a GenesisState.
                 * @memberof oracle.v1
                 * @interface IGenesisState
                 * @property {oracle.v1.IParams|null} [params] GenesisState params
                 * @property {Array.<oracle.v1.IDataSource>|null} [data_sources] GenesisState data_sources
                 * @property {Array.<oracle.v1.IOracleScript>|null} [oracle_scripts] GenesisState oracle_scripts
                 */
    
                /**
                 * Constructs a new GenesisState.
                 * @memberof oracle.v1
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {oracle.v1.IGenesisState=} [properties] Properties to set
                 */
                function GenesisState(properties) {
                    this.data_sources = [];
                    this.oracle_scripts = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GenesisState params.
                 * @member {oracle.v1.IParams|null|undefined} params
                 * @memberof oracle.v1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.params = null;
    
                /**
                 * GenesisState data_sources.
                 * @member {Array.<oracle.v1.IDataSource>} data_sources
                 * @memberof oracle.v1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.data_sources = $util.emptyArray;
    
                /**
                 * GenesisState oracle_scripts.
                 * @member {Array.<oracle.v1.IOracleScript>} oracle_scripts
                 * @memberof oracle.v1.GenesisState
                 * @instance
                 */
                GenesisState.prototype.oracle_scripts = $util.emptyArray;
    
                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link oracle.v1.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof oracle.v1.GenesisState
                 * @static
                 * @param {oracle.v1.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.oracle.v1.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.data_sources != null && message.data_sources.length)
                        for (var i = 0; i < message.data_sources.length; ++i)
                            $root.oracle.v1.DataSource.encode(message.data_sources[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.oracle_scripts != null && message.oracle_scripts.length)
                        for (var i = 0; i < message.oracle_scripts.length; ++i)
                            $root.oracle.v1.OracleScript.encode(message.oracle_scripts[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link oracle.v1.GenesisState.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof oracle.v1.GenesisState
                 * @static
                 * @param {oracle.v1.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof oracle.v1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {oracle.v1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.oracle.v1.GenesisState();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.params = $root.oracle.v1.Params.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.data_sources && message.data_sources.length))
                                message.data_sources = [];
                            message.data_sources.push($root.oracle.v1.DataSource.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.oracle_scripts && message.oracle_scripts.length))
                                message.oracle_scripts = [];
                            message.oracle_scripts.push($root.oracle.v1.OracleScript.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof oracle.v1.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {oracle.v1.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GenesisState message.
                 * @function verify
                 * @memberof oracle.v1.GenesisState
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GenesisState.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        var error = $root.oracle.v1.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    if (message.data_sources != null && message.hasOwnProperty("data_sources")) {
                        if (!Array.isArray(message.data_sources))
                            return "data_sources: array expected";
                        for (var i = 0; i < message.data_sources.length; ++i) {
                            var error = $root.oracle.v1.DataSource.verify(message.data_sources[i]);
                            if (error)
                                return "data_sources." + error;
                        }
                    }
                    if (message.oracle_scripts != null && message.hasOwnProperty("oracle_scripts")) {
                        if (!Array.isArray(message.oracle_scripts))
                            return "oracle_scripts: array expected";
                        for (var i = 0; i < message.oracle_scripts.length; ++i) {
                            var error = $root.oracle.v1.OracleScript.verify(message.oracle_scripts[i]);
                            if (error)
                                return "oracle_scripts." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof oracle.v1.GenesisState
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {oracle.v1.GenesisState} GenesisState
                 */
                GenesisState.fromObject = function fromObject(object) {
                    if (object instanceof $root.oracle.v1.GenesisState)
                        return object;
                    var message = new $root.oracle.v1.GenesisState();
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".oracle.v1.GenesisState.params: object expected");
                        message.params = $root.oracle.v1.Params.fromObject(object.params);
                    }
                    if (object.data_sources) {
                        if (!Array.isArray(object.data_sources))
                            throw TypeError(".oracle.v1.GenesisState.data_sources: array expected");
                        message.data_sources = [];
                        for (var i = 0; i < object.data_sources.length; ++i) {
                            if (typeof object.data_sources[i] !== "object")
                                throw TypeError(".oracle.v1.GenesisState.data_sources: object expected");
                            message.data_sources[i] = $root.oracle.v1.DataSource.fromObject(object.data_sources[i]);
                        }
                    }
                    if (object.oracle_scripts) {
                        if (!Array.isArray(object.oracle_scripts))
                            throw TypeError(".oracle.v1.GenesisState.oracle_scripts: array expected");
                        message.oracle_scripts = [];
                        for (var i = 0; i < object.oracle_scripts.length; ++i) {
                            if (typeof object.oracle_scripts[i] !== "object")
                                throw TypeError(".oracle.v1.GenesisState.oracle_scripts: object expected");
                            message.oracle_scripts[i] = $root.oracle.v1.OracleScript.fromObject(object.oracle_scripts[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof oracle.v1.GenesisState
                 * @static
                 * @param {oracle.v1.GenesisState} message GenesisState
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GenesisState.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.data_sources = [];
                        object.oracle_scripts = [];
                    }
                    if (options.defaults)
                        object.params = null;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.oracle.v1.Params.toObject(message.params, options);
                    if (message.data_sources && message.data_sources.length) {
                        object.data_sources = [];
                        for (var j = 0; j < message.data_sources.length; ++j)
                            object.data_sources[j] = $root.oracle.v1.DataSource.toObject(message.data_sources[j], options);
                    }
                    if (message.oracle_scripts && message.oracle_scripts.length) {
                        object.oracle_scripts = [];
                        for (var j = 0; j < message.oracle_scripts.length; ++j)
                            object.oracle_scripts[j] = $root.oracle.v1.OracleScript.toObject(message.oracle_scripts[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GenesisState to JSON.
                 * @function toJSON
                 * @memberof oracle.v1.GenesisState
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GenesisState.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return GenesisState;
            })();
    
            return v1;
        })();
    
        return oracle;
    })();
    
    $root.gogoproto = (function() {
    
        /**
         * Namespace gogoproto.
         * @exports gogoproto
         * @namespace
         */
        var gogoproto = {};
    
        return gogoproto;
    })();
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.file && message.file.length))
                                message.file = [];
                            message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [public_dependency] FileDescriptorProto public_dependency
                 * @property {Array.<number>|null} [weak_dependency] FileDescriptorProto weak_dependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [message_type] FileDescriptorProto message_type
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] FileDescriptorProto enum_type
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [source_code_info] FileDescriptorProto source_code_info
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.public_dependency = [];
                    this.weak_dependency = [];
                    this.message_type = [];
                    this.enum_type = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto public_dependency.
                 * @member {Array.<number>} public_dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.public_dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weak_dependency.
                 * @member {Array.<number>} weak_dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weak_dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto message_type.
                 * @member {Array.<google.protobuf.IDescriptorProto>} message_type
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.message_type = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enum_type.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enum_type = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto source_code_info.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} source_code_info
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.source_code_info = null;
    
                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.message_type != null && message.message_type.length)
                        for (var i = 0; i < message.message_type.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.message_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enum_type != null && message.enum_type.length)
                        for (var i = 0; i < message.enum_type.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.source_code_info != null && Object.hasOwnProperty.call(message, "source_code_info"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.source_code_info, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.public_dependency != null && message.public_dependency.length)
                        for (var i = 0; i < message.public_dependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.public_dependency[i]);
                    if (message.weak_dependency != null && message.weak_dependency.length)
                        for (var i = 0; i < message.weak_dependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weak_dependency[i]);
                    if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message["package"] = reader.string();
                            break;
                        case 3:
                            if (!(message.dependency && message.dependency.length))
                                message.dependency = [];
                            message.dependency.push(reader.string());
                            break;
                        case 10:
                            if (!(message.public_dependency && message.public_dependency.length))
                                message.public_dependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.public_dependency.push(reader.int32());
                            } else
                                message.public_dependency.push(reader.int32());
                            break;
                        case 11:
                            if (!(message.weak_dependency && message.weak_dependency.length))
                                message.weak_dependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.weak_dependency.push(reader.int32());
                            } else
                                message.weak_dependency.push(reader.int32());
                            break;
                        case 4:
                            if (!(message.message_type && message.message_type.length))
                                message.message_type = [];
                            message.message_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.enum_type && message.enum_type.length))
                                message.enum_type = [];
                            message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.service && message.service.length))
                                message.service = [];
                            message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.source_code_info = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                            break;
                        case 12:
                            message.syntax = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.public_dependency != null && message.hasOwnProperty("public_dependency")) {
                        if (!Array.isArray(message.public_dependency))
                            return "public_dependency: array expected";
                        for (var i = 0; i < message.public_dependency.length; ++i)
                            if (!$util.isInteger(message.public_dependency[i]))
                                return "public_dependency: integer[] expected";
                    }
                    if (message.weak_dependency != null && message.hasOwnProperty("weak_dependency")) {
                        if (!Array.isArray(message.weak_dependency))
                            return "weak_dependency: array expected";
                        for (var i = 0; i < message.weak_dependency.length; ++i)
                            if (!$util.isInteger(message.weak_dependency[i]))
                                return "weak_dependency: integer[] expected";
                    }
                    if (message.message_type != null && message.hasOwnProperty("message_type")) {
                        if (!Array.isArray(message.message_type))
                            return "message_type: array expected";
                        for (var i = 0; i < message.message_type.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.message_type[i]);
                            if (error)
                                return "message_type." + error;
                        }
                    }
                    if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                        if (!Array.isArray(message.enum_type))
                            return "enum_type: array expected";
                        for (var i = 0; i < message.enum_type.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                            if (error)
                                return "enum_type." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.source_code_info != null && message.hasOwnProperty("source_code_info")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.source_code_info);
                        if (error)
                            return "source_code_info." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.public_dependency) {
                        if (!Array.isArray(object.public_dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.public_dependency: array expected");
                        message.public_dependency = [];
                        for (var i = 0; i < object.public_dependency.length; ++i)
                            message.public_dependency[i] = object.public_dependency[i] | 0;
                    }
                    if (object.weak_dependency) {
                        if (!Array.isArray(object.weak_dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weak_dependency: array expected");
                        message.weak_dependency = [];
                        for (var i = 0; i < object.weak_dependency.length; ++i)
                            message.weak_dependency[i] = object.weak_dependency[i] | 0;
                    }
                    if (object.message_type) {
                        if (!Array.isArray(object.message_type))
                            throw TypeError(".google.protobuf.FileDescriptorProto.message_type: array expected");
                        message.message_type = [];
                        for (var i = 0; i < object.message_type.length; ++i) {
                            if (typeof object.message_type[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.message_type: object expected");
                            message.message_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.message_type[i]);
                        }
                    }
                    if (object.enum_type) {
                        if (!Array.isArray(object.enum_type))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: array expected");
                        message.enum_type = [];
                        for (var i = 0; i < object.enum_type.length; ++i) {
                            if (typeof object.enum_type[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: object expected");
                            message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.source_code_info != null) {
                        if (typeof object.source_code_info !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.source_code_info: object expected");
                        message.source_code_info = $root.google.protobuf.SourceCodeInfo.fromObject(object.source_code_info);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.message_type = [];
                        object.enum_type = [];
                        object.service = [];
                        object.extension = [];
                        object.public_dependency = [];
                        object.weak_dependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.source_code_info = null;
                        object.syntax = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.message_type && message.message_type.length) {
                        object.message_type = [];
                        for (var j = 0; j < message.message_type.length; ++j)
                            object.message_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.message_type[j], options);
                    }
                    if (message.enum_type && message.enum_type.length) {
                        object.enum_type = [];
                        for (var j = 0; j < message.enum_type.length; ++j)
                            object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.source_code_info != null && message.hasOwnProperty("source_code_info"))
                        object.source_code_info = $root.google.protobuf.SourceCodeInfo.toObject(message.source_code_info, options);
                    if (message.public_dependency && message.public_dependency.length) {
                        object.public_dependency = [];
                        for (var j = 0; j < message.public_dependency.length; ++j)
                            object.public_dependency[j] = message.public_dependency[j];
                    }
                    if (message.weak_dependency && message.weak_dependency.length) {
                        object.weak_dependency = [];
                        for (var j = 0; j < message.weak_dependency.length; ++j)
                            object.weak_dependency[j] = message.weak_dependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nested_type] DescriptorProto nested_type
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] DescriptorProto enum_type
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extension_range] DescriptorProto extension_range
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneof_decl] DescriptorProto oneof_decl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reserved_range] DescriptorProto reserved_range
                 * @property {Array.<string>|null} [reserved_name] DescriptorProto reserved_name
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nested_type = [];
                    this.enum_type = [];
                    this.extension_range = [];
                    this.oneof_decl = [];
                    this.reserved_range = [];
                    this.reserved_name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nested_type.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nested_type
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nested_type = $util.emptyArray;
    
                /**
                 * DescriptorProto enum_type.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enum_type = $util.emptyArray;
    
                /**
                 * DescriptorProto extension_range.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extension_range
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension_range = $util.emptyArray;
    
                /**
                 * DescriptorProto oneof_decl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneof_decl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneof_decl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * DescriptorProto reserved_range.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reserved_range
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reserved_range = $util.emptyArray;
    
                /**
                 * DescriptorProto reserved_name.
                 * @member {Array.<string>} reserved_name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reserved_name = $util.emptyArray;
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nested_type != null && message.nested_type.length)
                        for (var i = 0; i < message.nested_type.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nested_type[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enum_type != null && message.enum_type.length)
                        for (var i = 0; i < message.enum_type.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extension_range != null && message.extension_range.length)
                        for (var i = 0; i < message.extension_range.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extension_range[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneof_decl != null && message.oneof_decl.length)
                        for (var i = 0; i < message.oneof_decl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneof_decl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reserved_range != null && message.reserved_range.length)
                        for (var i = 0; i < message.reserved_range.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reserved_range[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reserved_name != null && message.reserved_name.length)
                        for (var i = 0; i < message.reserved_name.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reserved_name[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.field && message.field.length))
                                message.field = [];
                            message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.nested_type && message.nested_type.length))
                                message.nested_type = [];
                            message.nested_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            if (!(message.enum_type && message.enum_type.length))
                                message.enum_type = [];
                            message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.extension_range && message.extension_range.length))
                                message.extension_range = [];
                            message.extension_range.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            if (!(message.oneof_decl && message.oneof_decl.length))
                                message.oneof_decl = [];
                            message.oneof_decl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            if (!(message.reserved_range && message.reserved_range.length))
                                message.reserved_range = [];
                            message.reserved_range.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                            break;
                        case 10:
                            if (!(message.reserved_name && message.reserved_name.length))
                                message.reserved_name = [];
                            message.reserved_name.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nested_type != null && message.hasOwnProperty("nested_type")) {
                        if (!Array.isArray(message.nested_type))
                            return "nested_type: array expected";
                        for (var i = 0; i < message.nested_type.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nested_type[i]);
                            if (error)
                                return "nested_type." + error;
                        }
                    }
                    if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                        if (!Array.isArray(message.enum_type))
                            return "enum_type: array expected";
                        for (var i = 0; i < message.enum_type.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                            if (error)
                                return "enum_type." + error;
                        }
                    }
                    if (message.extension_range != null && message.hasOwnProperty("extension_range")) {
                        if (!Array.isArray(message.extension_range))
                            return "extension_range: array expected";
                        for (var i = 0; i < message.extension_range.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extension_range[i]);
                            if (error)
                                return "extension_range." + error;
                        }
                    }
                    if (message.oneof_decl != null && message.hasOwnProperty("oneof_decl")) {
                        if (!Array.isArray(message.oneof_decl))
                            return "oneof_decl: array expected";
                        for (var i = 0; i < message.oneof_decl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneof_decl[i]);
                            if (error)
                                return "oneof_decl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reserved_range != null && message.hasOwnProperty("reserved_range")) {
                        if (!Array.isArray(message.reserved_range))
                            return "reserved_range: array expected";
                        for (var i = 0; i < message.reserved_range.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reserved_range[i]);
                            if (error)
                                return "reserved_range." + error;
                        }
                    }
                    if (message.reserved_name != null && message.hasOwnProperty("reserved_name")) {
                        if (!Array.isArray(message.reserved_name))
                            return "reserved_name: array expected";
                        for (var i = 0; i < message.reserved_name.length; ++i)
                            if (!$util.isString(message.reserved_name[i]))
                                return "reserved_name: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nested_type) {
                        if (!Array.isArray(object.nested_type))
                            throw TypeError(".google.protobuf.DescriptorProto.nested_type: array expected");
                        message.nested_type = [];
                        for (var i = 0; i < object.nested_type.length; ++i) {
                            if (typeof object.nested_type[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nested_type: object expected");
                            message.nested_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nested_type[i]);
                        }
                    }
                    if (object.enum_type) {
                        if (!Array.isArray(object.enum_type))
                            throw TypeError(".google.protobuf.DescriptorProto.enum_type: array expected");
                        message.enum_type = [];
                        for (var i = 0; i < object.enum_type.length; ++i) {
                            if (typeof object.enum_type[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enum_type: object expected");
                            message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                        }
                    }
                    if (object.extension_range) {
                        if (!Array.isArray(object.extension_range))
                            throw TypeError(".google.protobuf.DescriptorProto.extension_range: array expected");
                        message.extension_range = [];
                        for (var i = 0; i < object.extension_range.length; ++i) {
                            if (typeof object.extension_range[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension_range: object expected");
                            message.extension_range[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extension_range[i]);
                        }
                    }
                    if (object.oneof_decl) {
                        if (!Array.isArray(object.oneof_decl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: array expected");
                        message.oneof_decl = [];
                        for (var i = 0; i < object.oneof_decl.length; ++i) {
                            if (typeof object.oneof_decl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: object expected");
                            message.oneof_decl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneof_decl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reserved_range) {
                        if (!Array.isArray(object.reserved_range))
                            throw TypeError(".google.protobuf.DescriptorProto.reserved_range: array expected");
                        message.reserved_range = [];
                        for (var i = 0; i < object.reserved_range.length; ++i) {
                            if (typeof object.reserved_range[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reserved_range: object expected");
                            message.reserved_range[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reserved_range[i]);
                        }
                    }
                    if (object.reserved_name) {
                        if (!Array.isArray(object.reserved_name))
                            throw TypeError(".google.protobuf.DescriptorProto.reserved_name: array expected");
                        message.reserved_name = [];
                        for (var i = 0; i < object.reserved_name.length; ++i)
                            message.reserved_name[i] = String(object.reserved_name[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nested_type = [];
                        object.enum_type = [];
                        object.extension_range = [];
                        object.extension = [];
                        object.oneof_decl = [];
                        object.reserved_range = [];
                        object.reserved_name = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nested_type && message.nested_type.length) {
                        object.nested_type = [];
                        for (var j = 0; j < message.nested_type.length; ++j)
                            object.nested_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.nested_type[j], options);
                    }
                    if (message.enum_type && message.enum_type.length) {
                        object.enum_type = [];
                        for (var j = 0; j < message.enum_type.length; ++j)
                            object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                    }
                    if (message.extension_range && message.extension_range.length) {
                        object.extension_range = [];
                        for (var j = 0; j < message.extension_range.length; ++j)
                            object.extension_range[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extension_range[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneof_decl && message.oneof_decl.length) {
                        object.oneof_decl = [];
                        for (var j = 0; j < message.oneof_decl.length; ++j)
                            object.oneof_decl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneof_decl[j], options);
                    }
                    if (message.reserved_range && message.reserved_range.length) {
                        object.reserved_range = [];
                        for (var j = 0; j < message.reserved_range.length; ++j)
                            object.reserved_range[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reserved_range[j], options);
                    }
                    if (message.reserved_name && message.reserved_name.length) {
                        object.reserved_name = [];
                        for (var j = 0; j < message.reserved_name.length; ++j)
                            object.reserved_name[j] = message.reserved_name[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */
    
                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;
    
                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;
    
                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [type_name] FieldDescriptorProto type_name
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [default_value] FieldDescriptorProto default_value
                 * @property {number|null} [oneof_index] FieldDescriptorProto oneof_index
                 * @property {string|null} [json_name] FieldDescriptorProto json_name
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto type_name.
                 * @member {string} type_name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type_name = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto default_value.
                 * @member {string} default_value
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.default_value = "";
    
                /**
                 * FieldDescriptorProto oneof_index.
                 * @member {number} oneof_index
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneof_index = 0;
    
                /**
                 * FieldDescriptorProto json_name.
                 * @member {string} json_name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.json_name = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.type_name != null && Object.hasOwnProperty.call(message, "type_name"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.type_name);
                    if (message.default_value != null && Object.hasOwnProperty.call(message, "default_value"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.default_value);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneof_index != null && Object.hasOwnProperty.call(message, "oneof_index"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneof_index);
                    if (message.json_name != null && Object.hasOwnProperty.call(message, "json_name"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.json_name);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.number = reader.int32();
                            break;
                        case 4:
                            message.label = reader.int32();
                            break;
                        case 5:
                            message.type = reader.int32();
                            break;
                        case 6:
                            message.type_name = reader.string();
                            break;
                        case 2:
                            message.extendee = reader.string();
                            break;
                        case 7:
                            message.default_value = reader.string();
                            break;
                        case 9:
                            message.oneof_index = reader.int32();
                            break;
                        case 10:
                            message.json_name = reader.string();
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.type_name != null && message.hasOwnProperty("type_name"))
                        if (!$util.isString(message.type_name))
                            return "type_name: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.default_value != null && message.hasOwnProperty("default_value"))
                        if (!$util.isString(message.default_value))
                            return "default_value: string expected";
                    if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                        if (!$util.isInteger(message.oneof_index))
                            return "oneof_index: integer expected";
                    if (message.json_name != null && message.hasOwnProperty("json_name"))
                        if (!$util.isString(message.json_name))
                            return "json_name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.type_name != null)
                        message.type_name = String(object.type_name);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.default_value != null)
                        message.default_value = String(object.default_value);
                    if (object.oneof_index != null)
                        message.oneof_index = object.oneof_index | 0;
                    if (object.json_name != null)
                        message.json_name = String(object.json_name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.type_name = "";
                        object.default_value = "";
                        object.options = null;
                        object.oneof_index = 0;
                        object.json_name = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.type_name != null && message.hasOwnProperty("type_name"))
                        object.type_name = message.type_name;
                    if (message.default_value != null && message.hasOwnProperty("default_value"))
                        object.default_value = message.default_value;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                        object.oneof_index = message.oneof_index;
                    if (message.json_name != null && message.hasOwnProperty("json_name"))
                        object.json_name = message.json_name;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {number}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {number}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.value && message.value.length))
                                message.value = [];
                            message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.value = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.number = reader.int32();
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.method && message.method.length))
                                message.method = [];
                            message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [input_type] MethodDescriptorProto input_type
                 * @property {string|null} [output_type] MethodDescriptorProto output_type
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [client_streaming] MethodDescriptorProto client_streaming
                 * @property {boolean|null} [server_streaming] MethodDescriptorProto server_streaming
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto input_type.
                 * @member {string} input_type
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.input_type = "";
    
                /**
                 * MethodDescriptorProto output_type.
                 * @member {string} output_type
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.output_type = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * MethodDescriptorProto client_streaming.
                 * @member {boolean} client_streaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.client_streaming = false;
    
                /**
                 * MethodDescriptorProto server_streaming.
                 * @member {boolean} server_streaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.server_streaming = false;
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.input_type != null && Object.hasOwnProperty.call(message, "input_type"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.input_type);
                    if (message.output_type != null && Object.hasOwnProperty.call(message, "output_type"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.output_type);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.client_streaming != null && Object.hasOwnProperty.call(message, "client_streaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.client_streaming);
                    if (message.server_streaming != null && Object.hasOwnProperty.call(message, "server_streaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.server_streaming);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.input_type = reader.string();
                            break;
                        case 3:
                            message.output_type = reader.string();
                            break;
                        case 4:
                            message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.client_streaming = reader.bool();
                            break;
                        case 6:
                            message.server_streaming = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.input_type != null && message.hasOwnProperty("input_type"))
                        if (!$util.isString(message.input_type))
                            return "input_type: string expected";
                    if (message.output_type != null && message.hasOwnProperty("output_type"))
                        if (!$util.isString(message.output_type))
                            return "output_type: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                        if (typeof message.client_streaming !== "boolean")
                            return "client_streaming: boolean expected";
                    if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                        if (typeof message.server_streaming !== "boolean")
                            return "server_streaming: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.input_type != null)
                        message.input_type = String(object.input_type);
                    if (object.output_type != null)
                        message.output_type = String(object.output_type);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.client_streaming != null)
                        message.client_streaming = Boolean(object.client_streaming);
                    if (object.server_streaming != null)
                        message.server_streaming = Boolean(object.server_streaming);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.input_type = "";
                        object.output_type = "";
                        object.options = null;
                        object.client_streaming = false;
                        object.server_streaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.input_type != null && message.hasOwnProperty("input_type"))
                        object.input_type = message.input_type;
                    if (message.output_type != null && message.hasOwnProperty("output_type"))
                        object.output_type = message.output_type;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                        object.client_streaming = message.client_streaming;
                    if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                        object.server_streaming = message.server_streaming;
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [java_package] FileOptions java_package
                 * @property {string|null} [java_outer_classname] FileOptions java_outer_classname
                 * @property {boolean|null} [java_multiple_files] FileOptions java_multiple_files
                 * @property {boolean|null} [java_generate_equals_and_hash] FileOptions java_generate_equals_and_hash
                 * @property {boolean|null} [java_string_check_utf8] FileOptions java_string_check_utf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimize_for] FileOptions optimize_for
                 * @property {string|null} [go_package] FileOptions go_package
                 * @property {boolean|null} [cc_generic_services] FileOptions cc_generic_services
                 * @property {boolean|null} [java_generic_services] FileOptions java_generic_services
                 * @property {boolean|null} [py_generic_services] FileOptions py_generic_services
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [cc_enable_arenas] FileOptions cc_enable_arenas
                 * @property {string|null} [objc_class_prefix] FileOptions objc_class_prefix
                 * @property {string|null} [csharp_namespace] FileOptions csharp_namespace
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FileOptions uninterpreted_option
                 * @property {boolean|null} [".gogoproto.goproto_getters_all"] FileOptions .gogoproto.goproto_getters_all
                 * @property {boolean|null} [".gogoproto.goproto_enum_prefix_all"] FileOptions .gogoproto.goproto_enum_prefix_all
                 * @property {boolean|null} [".gogoproto.goproto_stringer_all"] FileOptions .gogoproto.goproto_stringer_all
                 * @property {boolean|null} [".gogoproto.verbose_equal_all"] FileOptions .gogoproto.verbose_equal_all
                 * @property {boolean|null} [".gogoproto.face_all"] FileOptions .gogoproto.face_all
                 * @property {boolean|null} [".gogoproto.gostring_all"] FileOptions .gogoproto.gostring_all
                 * @property {boolean|null} [".gogoproto.populate_all"] FileOptions .gogoproto.populate_all
                 * @property {boolean|null} [".gogoproto.stringer_all"] FileOptions .gogoproto.stringer_all
                 * @property {boolean|null} [".gogoproto.onlyone_all"] FileOptions .gogoproto.onlyone_all
                 * @property {boolean|null} [".gogoproto.equal_all"] FileOptions .gogoproto.equal_all
                 * @property {boolean|null} [".gogoproto.description_all"] FileOptions .gogoproto.description_all
                 * @property {boolean|null} [".gogoproto.testgen_all"] FileOptions .gogoproto.testgen_all
                 * @property {boolean|null} [".gogoproto.benchgen_all"] FileOptions .gogoproto.benchgen_all
                 * @property {boolean|null} [".gogoproto.marshaler_all"] FileOptions .gogoproto.marshaler_all
                 * @property {boolean|null} [".gogoproto.unmarshaler_all"] FileOptions .gogoproto.unmarshaler_all
                 * @property {boolean|null} [".gogoproto.stable_marshaler_all"] FileOptions .gogoproto.stable_marshaler_all
                 * @property {boolean|null} [".gogoproto.sizer_all"] FileOptions .gogoproto.sizer_all
                 * @property {boolean|null} [".gogoproto.goproto_enum_stringer_all"] FileOptions .gogoproto.goproto_enum_stringer_all
                 * @property {boolean|null} [".gogoproto.enum_stringer_all"] FileOptions .gogoproto.enum_stringer_all
                 * @property {boolean|null} [".gogoproto.unsafe_marshaler_all"] FileOptions .gogoproto.unsafe_marshaler_all
                 * @property {boolean|null} [".gogoproto.unsafe_unmarshaler_all"] FileOptions .gogoproto.unsafe_unmarshaler_all
                 * @property {boolean|null} [".gogoproto.goproto_extensions_map_all"] FileOptions .gogoproto.goproto_extensions_map_all
                 * @property {boolean|null} [".gogoproto.goproto_unrecognized_all"] FileOptions .gogoproto.goproto_unrecognized_all
                 * @property {boolean|null} [".gogoproto.gogoproto_import"] FileOptions .gogoproto.gogoproto_import
                 * @property {boolean|null} [".gogoproto.protosizer_all"] FileOptions .gogoproto.protosizer_all
                 * @property {boolean|null} [".gogoproto.compare_all"] FileOptions .gogoproto.compare_all
                 * @property {boolean|null} [".gogoproto.typedecl_all"] FileOptions .gogoproto.typedecl_all
                 * @property {boolean|null} [".gogoproto.enumdecl_all"] FileOptions .gogoproto.enumdecl_all
                 * @property {boolean|null} [".gogoproto.goproto_registration"] FileOptions .gogoproto.goproto_registration
                 * @property {boolean|null} [".gogoproto.messagename_all"] FileOptions .gogoproto.messagename_all
                 * @property {boolean|null} [".gogoproto.goproto_sizecache_all"] FileOptions .gogoproto.goproto_sizecache_all
                 * @property {boolean|null} [".gogoproto.goproto_unkeyed_all"] FileOptions .gogoproto.goproto_unkeyed_all
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions java_package.
                 * @member {string} java_package
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_package = "";
    
                /**
                 * FileOptions java_outer_classname.
                 * @member {string} java_outer_classname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_outer_classname = "";
    
                /**
                 * FileOptions java_multiple_files.
                 * @member {boolean} java_multiple_files
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_multiple_files = false;
    
                /**
                 * FileOptions java_generate_equals_and_hash.
                 * @member {boolean} java_generate_equals_and_hash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_generate_equals_and_hash = false;
    
                /**
                 * FileOptions java_string_check_utf8.
                 * @member {boolean} java_string_check_utf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_string_check_utf8 = false;
    
                /**
                 * FileOptions optimize_for.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimize_for
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimize_for = 1;
    
                /**
                 * FileOptions go_package.
                 * @member {string} go_package
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.go_package = "";
    
                /**
                 * FileOptions cc_generic_services.
                 * @member {boolean} cc_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.cc_generic_services = false;
    
                /**
                 * FileOptions java_generic_services.
                 * @member {boolean} java_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_generic_services = false;
    
                /**
                 * FileOptions py_generic_services.
                 * @member {boolean} py_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.py_generic_services = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions cc_enable_arenas.
                 * @member {boolean} cc_enable_arenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.cc_enable_arenas = false;
    
                /**
                 * FileOptions objc_class_prefix.
                 * @member {string} objc_class_prefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objc_class_prefix = "";
    
                /**
                 * FileOptions csharp_namespace.
                 * @member {string} csharp_namespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharp_namespace = "";
    
                /**
                 * FileOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * FileOptions .gogoproto.goproto_getters_all.
                 * @member {boolean} .gogoproto.goproto_getters_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.goproto_getters_all"] = false;
    
                /**
                 * FileOptions .gogoproto.goproto_enum_prefix_all.
                 * @member {boolean} .gogoproto.goproto_enum_prefix_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.goproto_enum_prefix_all"] = false;
    
                /**
                 * FileOptions .gogoproto.goproto_stringer_all.
                 * @member {boolean} .gogoproto.goproto_stringer_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.goproto_stringer_all"] = false;
    
                /**
                 * FileOptions .gogoproto.verbose_equal_all.
                 * @member {boolean} .gogoproto.verbose_equal_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.verbose_equal_all"] = false;
    
                /**
                 * FileOptions .gogoproto.face_all.
                 * @member {boolean} .gogoproto.face_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.face_all"] = false;
    
                /**
                 * FileOptions .gogoproto.gostring_all.
                 * @member {boolean} .gogoproto.gostring_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.gostring_all"] = false;
    
                /**
                 * FileOptions .gogoproto.populate_all.
                 * @member {boolean} .gogoproto.populate_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.populate_all"] = false;
    
                /**
                 * FileOptions .gogoproto.stringer_all.
                 * @member {boolean} .gogoproto.stringer_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.stringer_all"] = false;
    
                /**
                 * FileOptions .gogoproto.onlyone_all.
                 * @member {boolean} .gogoproto.onlyone_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.onlyone_all"] = false;
    
                /**
                 * FileOptions .gogoproto.equal_all.
                 * @member {boolean} .gogoproto.equal_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.equal_all"] = false;
    
                /**
                 * FileOptions .gogoproto.description_all.
                 * @member {boolean} .gogoproto.description_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.description_all"] = false;
    
                /**
                 * FileOptions .gogoproto.testgen_all.
                 * @member {boolean} .gogoproto.testgen_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.testgen_all"] = false;
    
                /**
                 * FileOptions .gogoproto.benchgen_all.
                 * @member {boolean} .gogoproto.benchgen_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.benchgen_all"] = false;
    
                /**
                 * FileOptions .gogoproto.marshaler_all.
                 * @member {boolean} .gogoproto.marshaler_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.marshaler_all"] = false;
    
                /**
                 * FileOptions .gogoproto.unmarshaler_all.
                 * @member {boolean} .gogoproto.unmarshaler_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.unmarshaler_all"] = false;
    
                /**
                 * FileOptions .gogoproto.stable_marshaler_all.
                 * @member {boolean} .gogoproto.stable_marshaler_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.stable_marshaler_all"] = false;
    
                /**
                 * FileOptions .gogoproto.sizer_all.
                 * @member {boolean} .gogoproto.sizer_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.sizer_all"] = false;
    
                /**
                 * FileOptions .gogoproto.goproto_enum_stringer_all.
                 * @member {boolean} .gogoproto.goproto_enum_stringer_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.goproto_enum_stringer_all"] = false;
    
                /**
                 * FileOptions .gogoproto.enum_stringer_all.
                 * @member {boolean} .gogoproto.enum_stringer_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.enum_stringer_all"] = false;
    
                /**
                 * FileOptions .gogoproto.unsafe_marshaler_all.
                 * @member {boolean} .gogoproto.unsafe_marshaler_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.unsafe_marshaler_all"] = false;
    
                /**
                 * FileOptions .gogoproto.unsafe_unmarshaler_all.
                 * @member {boolean} .gogoproto.unsafe_unmarshaler_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.unsafe_unmarshaler_all"] = false;
    
                /**
                 * FileOptions .gogoproto.goproto_extensions_map_all.
                 * @member {boolean} .gogoproto.goproto_extensions_map_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.goproto_extensions_map_all"] = false;
    
                /**
                 * FileOptions .gogoproto.goproto_unrecognized_all.
                 * @member {boolean} .gogoproto.goproto_unrecognized_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.goproto_unrecognized_all"] = false;
    
                /**
                 * FileOptions .gogoproto.gogoproto_import.
                 * @member {boolean} .gogoproto.gogoproto_import
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.gogoproto_import"] = false;
    
                /**
                 * FileOptions .gogoproto.protosizer_all.
                 * @member {boolean} .gogoproto.protosizer_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.protosizer_all"] = false;
    
                /**
                 * FileOptions .gogoproto.compare_all.
                 * @member {boolean} .gogoproto.compare_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.compare_all"] = false;
    
                /**
                 * FileOptions .gogoproto.typedecl_all.
                 * @member {boolean} .gogoproto.typedecl_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.typedecl_all"] = false;
    
                /**
                 * FileOptions .gogoproto.enumdecl_all.
                 * @member {boolean} .gogoproto.enumdecl_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.enumdecl_all"] = false;
    
                /**
                 * FileOptions .gogoproto.goproto_registration.
                 * @member {boolean} .gogoproto.goproto_registration
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.goproto_registration"] = false;
    
                /**
                 * FileOptions .gogoproto.messagename_all.
                 * @member {boolean} .gogoproto.messagename_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.messagename_all"] = false;
    
                /**
                 * FileOptions .gogoproto.goproto_sizecache_all.
                 * @member {boolean} .gogoproto.goproto_sizecache_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.goproto_sizecache_all"] = false;
    
                /**
                 * FileOptions .gogoproto.goproto_unkeyed_all.
                 * @member {boolean} .gogoproto.goproto_unkeyed_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.goproto_unkeyed_all"] = false;
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.java_package != null && Object.hasOwnProperty.call(message, "java_package"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.java_package);
                    if (message.java_outer_classname != null && Object.hasOwnProperty.call(message, "java_outer_classname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.java_outer_classname);
                    if (message.optimize_for != null && Object.hasOwnProperty.call(message, "optimize_for"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimize_for);
                    if (message.java_multiple_files != null && Object.hasOwnProperty.call(message, "java_multiple_files"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.java_multiple_files);
                    if (message.go_package != null && Object.hasOwnProperty.call(message, "go_package"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.go_package);
                    if (message.cc_generic_services != null && Object.hasOwnProperty.call(message, "cc_generic_services"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.cc_generic_services);
                    if (message.java_generic_services != null && Object.hasOwnProperty.call(message, "java_generic_services"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.java_generic_services);
                    if (message.py_generic_services != null && Object.hasOwnProperty.call(message, "py_generic_services"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.py_generic_services);
                    if (message.java_generate_equals_and_hash != null && Object.hasOwnProperty.call(message, "java_generate_equals_and_hash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.java_generate_equals_and_hash);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.java_string_check_utf8 != null && Object.hasOwnProperty.call(message, "java_string_check_utf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.java_string_check_utf8);
                    if (message.cc_enable_arenas != null && Object.hasOwnProperty.call(message, "cc_enable_arenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.cc_enable_arenas);
                    if (message.objc_class_prefix != null && Object.hasOwnProperty.call(message, "objc_class_prefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objc_class_prefix);
                    if (message.csharp_namespace != null && Object.hasOwnProperty.call(message, "csharp_namespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharp_namespace);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".gogoproto.goproto_getters_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_getters_all"))
                        writer.uint32(/* id 63001, wireType 0 =*/504008).bool(message[".gogoproto.goproto_getters_all"]);
                    if (message[".gogoproto.goproto_enum_prefix_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_prefix_all"))
                        writer.uint32(/* id 63002, wireType 0 =*/504016).bool(message[".gogoproto.goproto_enum_prefix_all"]);
                    if (message[".gogoproto.goproto_stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_stringer_all"))
                        writer.uint32(/* id 63003, wireType 0 =*/504024).bool(message[".gogoproto.goproto_stringer_all"]);
                    if (message[".gogoproto.verbose_equal_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.verbose_equal_all"))
                        writer.uint32(/* id 63004, wireType 0 =*/504032).bool(message[".gogoproto.verbose_equal_all"]);
                    if (message[".gogoproto.face_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.face_all"))
                        writer.uint32(/* id 63005, wireType 0 =*/504040).bool(message[".gogoproto.face_all"]);
                    if (message[".gogoproto.gostring_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.gostring_all"))
                        writer.uint32(/* id 63006, wireType 0 =*/504048).bool(message[".gogoproto.gostring_all"]);
                    if (message[".gogoproto.populate_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.populate_all"))
                        writer.uint32(/* id 63007, wireType 0 =*/504056).bool(message[".gogoproto.populate_all"]);
                    if (message[".gogoproto.stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stringer_all"))
                        writer.uint32(/* id 63008, wireType 0 =*/504064).bool(message[".gogoproto.stringer_all"]);
                    if (message[".gogoproto.onlyone_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.onlyone_all"))
                        writer.uint32(/* id 63009, wireType 0 =*/504072).bool(message[".gogoproto.onlyone_all"]);
                    if (message[".gogoproto.equal_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.equal_all"))
                        writer.uint32(/* id 63013, wireType 0 =*/504104).bool(message[".gogoproto.equal_all"]);
                    if (message[".gogoproto.description_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.description_all"))
                        writer.uint32(/* id 63014, wireType 0 =*/504112).bool(message[".gogoproto.description_all"]);
                    if (message[".gogoproto.testgen_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.testgen_all"))
                        writer.uint32(/* id 63015, wireType 0 =*/504120).bool(message[".gogoproto.testgen_all"]);
                    if (message[".gogoproto.benchgen_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.benchgen_all"))
                        writer.uint32(/* id 63016, wireType 0 =*/504128).bool(message[".gogoproto.benchgen_all"]);
                    if (message[".gogoproto.marshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.marshaler_all"))
                        writer.uint32(/* id 63017, wireType 0 =*/504136).bool(message[".gogoproto.marshaler_all"]);
                    if (message[".gogoproto.unmarshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unmarshaler_all"))
                        writer.uint32(/* id 63018, wireType 0 =*/504144).bool(message[".gogoproto.unmarshaler_all"]);
                    if (message[".gogoproto.stable_marshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stable_marshaler_all"))
                        writer.uint32(/* id 63019, wireType 0 =*/504152).bool(message[".gogoproto.stable_marshaler_all"]);
                    if (message[".gogoproto.sizer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.sizer_all"))
                        writer.uint32(/* id 63020, wireType 0 =*/504160).bool(message[".gogoproto.sizer_all"]);
                    if (message[".gogoproto.goproto_enum_stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_stringer_all"))
                        writer.uint32(/* id 63021, wireType 0 =*/504168).bool(message[".gogoproto.goproto_enum_stringer_all"]);
                    if (message[".gogoproto.enum_stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enum_stringer_all"))
                        writer.uint32(/* id 63022, wireType 0 =*/504176).bool(message[".gogoproto.enum_stringer_all"]);
                    if (message[".gogoproto.unsafe_marshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_marshaler_all"))
                        writer.uint32(/* id 63023, wireType 0 =*/504184).bool(message[".gogoproto.unsafe_marshaler_all"]);
                    if (message[".gogoproto.unsafe_unmarshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_unmarshaler_all"))
                        writer.uint32(/* id 63024, wireType 0 =*/504192).bool(message[".gogoproto.unsafe_unmarshaler_all"]);
                    if (message[".gogoproto.goproto_extensions_map_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_extensions_map_all"))
                        writer.uint32(/* id 63025, wireType 0 =*/504200).bool(message[".gogoproto.goproto_extensions_map_all"]);
                    if (message[".gogoproto.goproto_unrecognized_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unrecognized_all"))
                        writer.uint32(/* id 63026, wireType 0 =*/504208).bool(message[".gogoproto.goproto_unrecognized_all"]);
                    if (message[".gogoproto.gogoproto_import"] != null && Object.hasOwnProperty.call(message, ".gogoproto.gogoproto_import"))
                        writer.uint32(/* id 63027, wireType 0 =*/504216).bool(message[".gogoproto.gogoproto_import"]);
                    if (message[".gogoproto.protosizer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.protosizer_all"))
                        writer.uint32(/* id 63028, wireType 0 =*/504224).bool(message[".gogoproto.protosizer_all"]);
                    if (message[".gogoproto.compare_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.compare_all"))
                        writer.uint32(/* id 63029, wireType 0 =*/504232).bool(message[".gogoproto.compare_all"]);
                    if (message[".gogoproto.typedecl_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.typedecl_all"))
                        writer.uint32(/* id 63030, wireType 0 =*/504240).bool(message[".gogoproto.typedecl_all"]);
                    if (message[".gogoproto.enumdecl_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enumdecl_all"))
                        writer.uint32(/* id 63031, wireType 0 =*/504248).bool(message[".gogoproto.enumdecl_all"]);
                    if (message[".gogoproto.goproto_registration"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_registration"))
                        writer.uint32(/* id 63032, wireType 0 =*/504256).bool(message[".gogoproto.goproto_registration"]);
                    if (message[".gogoproto.messagename_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.messagename_all"))
                        writer.uint32(/* id 63033, wireType 0 =*/504264).bool(message[".gogoproto.messagename_all"]);
                    if (message[".gogoproto.goproto_sizecache_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_sizecache_all"))
                        writer.uint32(/* id 63034, wireType 0 =*/504272).bool(message[".gogoproto.goproto_sizecache_all"]);
                    if (message[".gogoproto.goproto_unkeyed_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unkeyed_all"))
                        writer.uint32(/* id 63035, wireType 0 =*/504280).bool(message[".gogoproto.goproto_unkeyed_all"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.java_package = reader.string();
                            break;
                        case 8:
                            message.java_outer_classname = reader.string();
                            break;
                        case 10:
                            message.java_multiple_files = reader.bool();
                            break;
                        case 20:
                            message.java_generate_equals_and_hash = reader.bool();
                            break;
                        case 27:
                            message.java_string_check_utf8 = reader.bool();
                            break;
                        case 9:
                            message.optimize_for = reader.int32();
                            break;
                        case 11:
                            message.go_package = reader.string();
                            break;
                        case 16:
                            message.cc_generic_services = reader.bool();
                            break;
                        case 17:
                            message.java_generic_services = reader.bool();
                            break;
                        case 18:
                            message.py_generic_services = reader.bool();
                            break;
                        case 23:
                            message.deprecated = reader.bool();
                            break;
                        case 31:
                            message.cc_enable_arenas = reader.bool();
                            break;
                        case 36:
                            message.objc_class_prefix = reader.string();
                            break;
                        case 37:
                            message.csharp_namespace = reader.string();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 63001:
                            message[".gogoproto.goproto_getters_all"] = reader.bool();
                            break;
                        case 63002:
                            message[".gogoproto.goproto_enum_prefix_all"] = reader.bool();
                            break;
                        case 63003:
                            message[".gogoproto.goproto_stringer_all"] = reader.bool();
                            break;
                        case 63004:
                            message[".gogoproto.verbose_equal_all"] = reader.bool();
                            break;
                        case 63005:
                            message[".gogoproto.face_all"] = reader.bool();
                            break;
                        case 63006:
                            message[".gogoproto.gostring_all"] = reader.bool();
                            break;
                        case 63007:
                            message[".gogoproto.populate_all"] = reader.bool();
                            break;
                        case 63008:
                            message[".gogoproto.stringer_all"] = reader.bool();
                            break;
                        case 63009:
                            message[".gogoproto.onlyone_all"] = reader.bool();
                            break;
                        case 63013:
                            message[".gogoproto.equal_all"] = reader.bool();
                            break;
                        case 63014:
                            message[".gogoproto.description_all"] = reader.bool();
                            break;
                        case 63015:
                            message[".gogoproto.testgen_all"] = reader.bool();
                            break;
                        case 63016:
                            message[".gogoproto.benchgen_all"] = reader.bool();
                            break;
                        case 63017:
                            message[".gogoproto.marshaler_all"] = reader.bool();
                            break;
                        case 63018:
                            message[".gogoproto.unmarshaler_all"] = reader.bool();
                            break;
                        case 63019:
                            message[".gogoproto.stable_marshaler_all"] = reader.bool();
                            break;
                        case 63020:
                            message[".gogoproto.sizer_all"] = reader.bool();
                            break;
                        case 63021:
                            message[".gogoproto.goproto_enum_stringer_all"] = reader.bool();
                            break;
                        case 63022:
                            message[".gogoproto.enum_stringer_all"] = reader.bool();
                            break;
                        case 63023:
                            message[".gogoproto.unsafe_marshaler_all"] = reader.bool();
                            break;
                        case 63024:
                            message[".gogoproto.unsafe_unmarshaler_all"] = reader.bool();
                            break;
                        case 63025:
                            message[".gogoproto.goproto_extensions_map_all"] = reader.bool();
                            break;
                        case 63026:
                            message[".gogoproto.goproto_unrecognized_all"] = reader.bool();
                            break;
                        case 63027:
                            message[".gogoproto.gogoproto_import"] = reader.bool();
                            break;
                        case 63028:
                            message[".gogoproto.protosizer_all"] = reader.bool();
                            break;
                        case 63029:
                            message[".gogoproto.compare_all"] = reader.bool();
                            break;
                        case 63030:
                            message[".gogoproto.typedecl_all"] = reader.bool();
                            break;
                        case 63031:
                            message[".gogoproto.enumdecl_all"] = reader.bool();
                            break;
                        case 63032:
                            message[".gogoproto.goproto_registration"] = reader.bool();
                            break;
                        case 63033:
                            message[".gogoproto.messagename_all"] = reader.bool();
                            break;
                        case 63034:
                            message[".gogoproto.goproto_sizecache_all"] = reader.bool();
                            break;
                        case 63035:
                            message[".gogoproto.goproto_unkeyed_all"] = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.java_package != null && message.hasOwnProperty("java_package"))
                        if (!$util.isString(message.java_package))
                            return "java_package: string expected";
                    if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                        if (!$util.isString(message.java_outer_classname))
                            return "java_outer_classname: string expected";
                    if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                        if (typeof message.java_multiple_files !== "boolean")
                            return "java_multiple_files: boolean expected";
                    if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                        if (typeof message.java_generate_equals_and_hash !== "boolean")
                            return "java_generate_equals_and_hash: boolean expected";
                    if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                        if (typeof message.java_string_check_utf8 !== "boolean")
                            return "java_string_check_utf8: boolean expected";
                    if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                        switch (message.optimize_for) {
                        default:
                            return "optimize_for: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.go_package != null && message.hasOwnProperty("go_package"))
                        if (!$util.isString(message.go_package))
                            return "go_package: string expected";
                    if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                        if (typeof message.cc_generic_services !== "boolean")
                            return "cc_generic_services: boolean expected";
                    if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                        if (typeof message.java_generic_services !== "boolean")
                            return "java_generic_services: boolean expected";
                    if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                        if (typeof message.py_generic_services !== "boolean")
                            return "py_generic_services: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                        if (typeof message.cc_enable_arenas !== "boolean")
                            return "cc_enable_arenas: boolean expected";
                    if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                        if (!$util.isString(message.objc_class_prefix))
                            return "objc_class_prefix: string expected";
                    if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                        if (!$util.isString(message.csharp_namespace))
                            return "csharp_namespace: string expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".gogoproto.goproto_getters_all"] != null && message.hasOwnProperty(".gogoproto.goproto_getters_all"))
                        if (typeof message[".gogoproto.goproto_getters_all"] !== "boolean")
                            return ".gogoproto.goproto_getters_all: boolean expected";
                    if (message[".gogoproto.goproto_enum_prefix_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix_all"))
                        if (typeof message[".gogoproto.goproto_enum_prefix_all"] !== "boolean")
                            return ".gogoproto.goproto_enum_prefix_all: boolean expected";
                    if (message[".gogoproto.goproto_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer_all"))
                        if (typeof message[".gogoproto.goproto_stringer_all"] !== "boolean")
                            return ".gogoproto.goproto_stringer_all: boolean expected";
                    if (message[".gogoproto.verbose_equal_all"] != null && message.hasOwnProperty(".gogoproto.verbose_equal_all"))
                        if (typeof message[".gogoproto.verbose_equal_all"] !== "boolean")
                            return ".gogoproto.verbose_equal_all: boolean expected";
                    if (message[".gogoproto.face_all"] != null && message.hasOwnProperty(".gogoproto.face_all"))
                        if (typeof message[".gogoproto.face_all"] !== "boolean")
                            return ".gogoproto.face_all: boolean expected";
                    if (message[".gogoproto.gostring_all"] != null && message.hasOwnProperty(".gogoproto.gostring_all"))
                        if (typeof message[".gogoproto.gostring_all"] !== "boolean")
                            return ".gogoproto.gostring_all: boolean expected";
                    if (message[".gogoproto.populate_all"] != null && message.hasOwnProperty(".gogoproto.populate_all"))
                        if (typeof message[".gogoproto.populate_all"] !== "boolean")
                            return ".gogoproto.populate_all: boolean expected";
                    if (message[".gogoproto.stringer_all"] != null && message.hasOwnProperty(".gogoproto.stringer_all"))
                        if (typeof message[".gogoproto.stringer_all"] !== "boolean")
                            return ".gogoproto.stringer_all: boolean expected";
                    if (message[".gogoproto.onlyone_all"] != null && message.hasOwnProperty(".gogoproto.onlyone_all"))
                        if (typeof message[".gogoproto.onlyone_all"] !== "boolean")
                            return ".gogoproto.onlyone_all: boolean expected";
                    if (message[".gogoproto.equal_all"] != null && message.hasOwnProperty(".gogoproto.equal_all"))
                        if (typeof message[".gogoproto.equal_all"] !== "boolean")
                            return ".gogoproto.equal_all: boolean expected";
                    if (message[".gogoproto.description_all"] != null && message.hasOwnProperty(".gogoproto.description_all"))
                        if (typeof message[".gogoproto.description_all"] !== "boolean")
                            return ".gogoproto.description_all: boolean expected";
                    if (message[".gogoproto.testgen_all"] != null && message.hasOwnProperty(".gogoproto.testgen_all"))
                        if (typeof message[".gogoproto.testgen_all"] !== "boolean")
                            return ".gogoproto.testgen_all: boolean expected";
                    if (message[".gogoproto.benchgen_all"] != null && message.hasOwnProperty(".gogoproto.benchgen_all"))
                        if (typeof message[".gogoproto.benchgen_all"] !== "boolean")
                            return ".gogoproto.benchgen_all: boolean expected";
                    if (message[".gogoproto.marshaler_all"] != null && message.hasOwnProperty(".gogoproto.marshaler_all"))
                        if (typeof message[".gogoproto.marshaler_all"] !== "boolean")
                            return ".gogoproto.marshaler_all: boolean expected";
                    if (message[".gogoproto.unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unmarshaler_all"))
                        if (typeof message[".gogoproto.unmarshaler_all"] !== "boolean")
                            return ".gogoproto.unmarshaler_all: boolean expected";
                    if (message[".gogoproto.stable_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler_all"))
                        if (typeof message[".gogoproto.stable_marshaler_all"] !== "boolean")
                            return ".gogoproto.stable_marshaler_all: boolean expected";
                    if (message[".gogoproto.sizer_all"] != null && message.hasOwnProperty(".gogoproto.sizer_all"))
                        if (typeof message[".gogoproto.sizer_all"] !== "boolean")
                            return ".gogoproto.sizer_all: boolean expected";
                    if (message[".gogoproto.goproto_enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer_all"))
                        if (typeof message[".gogoproto.goproto_enum_stringer_all"] !== "boolean")
                            return ".gogoproto.goproto_enum_stringer_all: boolean expected";
                    if (message[".gogoproto.enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.enum_stringer_all"))
                        if (typeof message[".gogoproto.enum_stringer_all"] !== "boolean")
                            return ".gogoproto.enum_stringer_all: boolean expected";
                    if (message[".gogoproto.unsafe_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler_all"))
                        if (typeof message[".gogoproto.unsafe_marshaler_all"] !== "boolean")
                            return ".gogoproto.unsafe_marshaler_all: boolean expected";
                    if (message[".gogoproto.unsafe_unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler_all"))
                        if (typeof message[".gogoproto.unsafe_unmarshaler_all"] !== "boolean")
                            return ".gogoproto.unsafe_unmarshaler_all: boolean expected";
                    if (message[".gogoproto.goproto_extensions_map_all"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map_all"))
                        if (typeof message[".gogoproto.goproto_extensions_map_all"] !== "boolean")
                            return ".gogoproto.goproto_extensions_map_all: boolean expected";
                    if (message[".gogoproto.goproto_unrecognized_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized_all"))
                        if (typeof message[".gogoproto.goproto_unrecognized_all"] !== "boolean")
                            return ".gogoproto.goproto_unrecognized_all: boolean expected";
                    if (message[".gogoproto.gogoproto_import"] != null && message.hasOwnProperty(".gogoproto.gogoproto_import"))
                        if (typeof message[".gogoproto.gogoproto_import"] !== "boolean")
                            return ".gogoproto.gogoproto_import: boolean expected";
                    if (message[".gogoproto.protosizer_all"] != null && message.hasOwnProperty(".gogoproto.protosizer_all"))
                        if (typeof message[".gogoproto.protosizer_all"] !== "boolean")
                            return ".gogoproto.protosizer_all: boolean expected";
                    if (message[".gogoproto.compare_all"] != null && message.hasOwnProperty(".gogoproto.compare_all"))
                        if (typeof message[".gogoproto.compare_all"] !== "boolean")
                            return ".gogoproto.compare_all: boolean expected";
                    if (message[".gogoproto.typedecl_all"] != null && message.hasOwnProperty(".gogoproto.typedecl_all"))
                        if (typeof message[".gogoproto.typedecl_all"] !== "boolean")
                            return ".gogoproto.typedecl_all: boolean expected";
                    if (message[".gogoproto.enumdecl_all"] != null && message.hasOwnProperty(".gogoproto.enumdecl_all"))
                        if (typeof message[".gogoproto.enumdecl_all"] !== "boolean")
                            return ".gogoproto.enumdecl_all: boolean expected";
                    if (message[".gogoproto.goproto_registration"] != null && message.hasOwnProperty(".gogoproto.goproto_registration"))
                        if (typeof message[".gogoproto.goproto_registration"] !== "boolean")
                            return ".gogoproto.goproto_registration: boolean expected";
                    if (message[".gogoproto.messagename_all"] != null && message.hasOwnProperty(".gogoproto.messagename_all"))
                        if (typeof message[".gogoproto.messagename_all"] !== "boolean")
                            return ".gogoproto.messagename_all: boolean expected";
                    if (message[".gogoproto.goproto_sizecache_all"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache_all"))
                        if (typeof message[".gogoproto.goproto_sizecache_all"] !== "boolean")
                            return ".gogoproto.goproto_sizecache_all: boolean expected";
                    if (message[".gogoproto.goproto_unkeyed_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed_all"))
                        if (typeof message[".gogoproto.goproto_unkeyed_all"] !== "boolean")
                            return ".gogoproto.goproto_unkeyed_all: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.java_package != null)
                        message.java_package = String(object.java_package);
                    if (object.java_outer_classname != null)
                        message.java_outer_classname = String(object.java_outer_classname);
                    if (object.java_multiple_files != null)
                        message.java_multiple_files = Boolean(object.java_multiple_files);
                    if (object.java_generate_equals_and_hash != null)
                        message.java_generate_equals_and_hash = Boolean(object.java_generate_equals_and_hash);
                    if (object.java_string_check_utf8 != null)
                        message.java_string_check_utf8 = Boolean(object.java_string_check_utf8);
                    switch (object.optimize_for) {
                    case "SPEED":
                    case 1:
                        message.optimize_for = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimize_for = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimize_for = 3;
                        break;
                    }
                    if (object.go_package != null)
                        message.go_package = String(object.go_package);
                    if (object.cc_generic_services != null)
                        message.cc_generic_services = Boolean(object.cc_generic_services);
                    if (object.java_generic_services != null)
                        message.java_generic_services = Boolean(object.java_generic_services);
                    if (object.py_generic_services != null)
                        message.py_generic_services = Boolean(object.py_generic_services);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.cc_enable_arenas != null)
                        message.cc_enable_arenas = Boolean(object.cc_enable_arenas);
                    if (object.objc_class_prefix != null)
                        message.objc_class_prefix = String(object.objc_class_prefix);
                    if (object.csharp_namespace != null)
                        message.csharp_namespace = String(object.csharp_namespace);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".gogoproto.goproto_getters_all"] != null)
                        message[".gogoproto.goproto_getters_all"] = Boolean(object[".gogoproto.goproto_getters_all"]);
                    if (object[".gogoproto.goproto_enum_prefix_all"] != null)
                        message[".gogoproto.goproto_enum_prefix_all"] = Boolean(object[".gogoproto.goproto_enum_prefix_all"]);
                    if (object[".gogoproto.goproto_stringer_all"] != null)
                        message[".gogoproto.goproto_stringer_all"] = Boolean(object[".gogoproto.goproto_stringer_all"]);
                    if (object[".gogoproto.verbose_equal_all"] != null)
                        message[".gogoproto.verbose_equal_all"] = Boolean(object[".gogoproto.verbose_equal_all"]);
                    if (object[".gogoproto.face_all"] != null)
                        message[".gogoproto.face_all"] = Boolean(object[".gogoproto.face_all"]);
                    if (object[".gogoproto.gostring_all"] != null)
                        message[".gogoproto.gostring_all"] = Boolean(object[".gogoproto.gostring_all"]);
                    if (object[".gogoproto.populate_all"] != null)
                        message[".gogoproto.populate_all"] = Boolean(object[".gogoproto.populate_all"]);
                    if (object[".gogoproto.stringer_all"] != null)
                        message[".gogoproto.stringer_all"] = Boolean(object[".gogoproto.stringer_all"]);
                    if (object[".gogoproto.onlyone_all"] != null)
                        message[".gogoproto.onlyone_all"] = Boolean(object[".gogoproto.onlyone_all"]);
                    if (object[".gogoproto.equal_all"] != null)
                        message[".gogoproto.equal_all"] = Boolean(object[".gogoproto.equal_all"]);
                    if (object[".gogoproto.description_all"] != null)
                        message[".gogoproto.description_all"] = Boolean(object[".gogoproto.description_all"]);
                    if (object[".gogoproto.testgen_all"] != null)
                        message[".gogoproto.testgen_all"] = Boolean(object[".gogoproto.testgen_all"]);
                    if (object[".gogoproto.benchgen_all"] != null)
                        message[".gogoproto.benchgen_all"] = Boolean(object[".gogoproto.benchgen_all"]);
                    if (object[".gogoproto.marshaler_all"] != null)
                        message[".gogoproto.marshaler_all"] = Boolean(object[".gogoproto.marshaler_all"]);
                    if (object[".gogoproto.unmarshaler_all"] != null)
                        message[".gogoproto.unmarshaler_all"] = Boolean(object[".gogoproto.unmarshaler_all"]);
                    if (object[".gogoproto.stable_marshaler_all"] != null)
                        message[".gogoproto.stable_marshaler_all"] = Boolean(object[".gogoproto.stable_marshaler_all"]);
                    if (object[".gogoproto.sizer_all"] != null)
                        message[".gogoproto.sizer_all"] = Boolean(object[".gogoproto.sizer_all"]);
                    if (object[".gogoproto.goproto_enum_stringer_all"] != null)
                        message[".gogoproto.goproto_enum_stringer_all"] = Boolean(object[".gogoproto.goproto_enum_stringer_all"]);
                    if (object[".gogoproto.enum_stringer_all"] != null)
                        message[".gogoproto.enum_stringer_all"] = Boolean(object[".gogoproto.enum_stringer_all"]);
                    if (object[".gogoproto.unsafe_marshaler_all"] != null)
                        message[".gogoproto.unsafe_marshaler_all"] = Boolean(object[".gogoproto.unsafe_marshaler_all"]);
                    if (object[".gogoproto.unsafe_unmarshaler_all"] != null)
                        message[".gogoproto.unsafe_unmarshaler_all"] = Boolean(object[".gogoproto.unsafe_unmarshaler_all"]);
                    if (object[".gogoproto.goproto_extensions_map_all"] != null)
                        message[".gogoproto.goproto_extensions_map_all"] = Boolean(object[".gogoproto.goproto_extensions_map_all"]);
                    if (object[".gogoproto.goproto_unrecognized_all"] != null)
                        message[".gogoproto.goproto_unrecognized_all"] = Boolean(object[".gogoproto.goproto_unrecognized_all"]);
                    if (object[".gogoproto.gogoproto_import"] != null)
                        message[".gogoproto.gogoproto_import"] = Boolean(object[".gogoproto.gogoproto_import"]);
                    if (object[".gogoproto.protosizer_all"] != null)
                        message[".gogoproto.protosizer_all"] = Boolean(object[".gogoproto.protosizer_all"]);
                    if (object[".gogoproto.compare_all"] != null)
                        message[".gogoproto.compare_all"] = Boolean(object[".gogoproto.compare_all"]);
                    if (object[".gogoproto.typedecl_all"] != null)
                        message[".gogoproto.typedecl_all"] = Boolean(object[".gogoproto.typedecl_all"]);
                    if (object[".gogoproto.enumdecl_all"] != null)
                        message[".gogoproto.enumdecl_all"] = Boolean(object[".gogoproto.enumdecl_all"]);
                    if (object[".gogoproto.goproto_registration"] != null)
                        message[".gogoproto.goproto_registration"] = Boolean(object[".gogoproto.goproto_registration"]);
                    if (object[".gogoproto.messagename_all"] != null)
                        message[".gogoproto.messagename_all"] = Boolean(object[".gogoproto.messagename_all"]);
                    if (object[".gogoproto.goproto_sizecache_all"] != null)
                        message[".gogoproto.goproto_sizecache_all"] = Boolean(object[".gogoproto.goproto_sizecache_all"]);
                    if (object[".gogoproto.goproto_unkeyed_all"] != null)
                        message[".gogoproto.goproto_unkeyed_all"] = Boolean(object[".gogoproto.goproto_unkeyed_all"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.java_package = "";
                        object.java_outer_classname = "";
                        object.optimize_for = options.enums === String ? "SPEED" : 1;
                        object.java_multiple_files = false;
                        object.go_package = "";
                        object.cc_generic_services = false;
                        object.java_generic_services = false;
                        object.py_generic_services = false;
                        object.java_generate_equals_and_hash = false;
                        object.deprecated = false;
                        object.java_string_check_utf8 = false;
                        object.cc_enable_arenas = false;
                        object.objc_class_prefix = "";
                        object.csharp_namespace = "";
                        object[".gogoproto.goproto_getters_all"] = false;
                        object[".gogoproto.goproto_enum_prefix_all"] = false;
                        object[".gogoproto.goproto_stringer_all"] = false;
                        object[".gogoproto.verbose_equal_all"] = false;
                        object[".gogoproto.face_all"] = false;
                        object[".gogoproto.gostring_all"] = false;
                        object[".gogoproto.populate_all"] = false;
                        object[".gogoproto.stringer_all"] = false;
                        object[".gogoproto.onlyone_all"] = false;
                        object[".gogoproto.equal_all"] = false;
                        object[".gogoproto.description_all"] = false;
                        object[".gogoproto.testgen_all"] = false;
                        object[".gogoproto.benchgen_all"] = false;
                        object[".gogoproto.marshaler_all"] = false;
                        object[".gogoproto.unmarshaler_all"] = false;
                        object[".gogoproto.stable_marshaler_all"] = false;
                        object[".gogoproto.sizer_all"] = false;
                        object[".gogoproto.goproto_enum_stringer_all"] = false;
                        object[".gogoproto.enum_stringer_all"] = false;
                        object[".gogoproto.unsafe_marshaler_all"] = false;
                        object[".gogoproto.unsafe_unmarshaler_all"] = false;
                        object[".gogoproto.goproto_extensions_map_all"] = false;
                        object[".gogoproto.goproto_unrecognized_all"] = false;
                        object[".gogoproto.gogoproto_import"] = false;
                        object[".gogoproto.protosizer_all"] = false;
                        object[".gogoproto.compare_all"] = false;
                        object[".gogoproto.typedecl_all"] = false;
                        object[".gogoproto.enumdecl_all"] = false;
                        object[".gogoproto.goproto_registration"] = false;
                        object[".gogoproto.messagename_all"] = false;
                        object[".gogoproto.goproto_sizecache_all"] = false;
                        object[".gogoproto.goproto_unkeyed_all"] = false;
                    }
                    if (message.java_package != null && message.hasOwnProperty("java_package"))
                        object.java_package = message.java_package;
                    if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                        object.java_outer_classname = message.java_outer_classname;
                    if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                        object.optimize_for = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimize_for] : message.optimize_for;
                    if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                        object.java_multiple_files = message.java_multiple_files;
                    if (message.go_package != null && message.hasOwnProperty("go_package"))
                        object.go_package = message.go_package;
                    if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                        object.cc_generic_services = message.cc_generic_services;
                    if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                        object.java_generic_services = message.java_generic_services;
                    if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                        object.py_generic_services = message.py_generic_services;
                    if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                        object.java_generate_equals_and_hash = message.java_generate_equals_and_hash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                        object.java_string_check_utf8 = message.java_string_check_utf8;
                    if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                        object.cc_enable_arenas = message.cc_enable_arenas;
                    if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                        object.objc_class_prefix = message.objc_class_prefix;
                    if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                        object.csharp_namespace = message.csharp_namespace;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".gogoproto.goproto_getters_all"] != null && message.hasOwnProperty(".gogoproto.goproto_getters_all"))
                        object[".gogoproto.goproto_getters_all"] = message[".gogoproto.goproto_getters_all"];
                    if (message[".gogoproto.goproto_enum_prefix_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix_all"))
                        object[".gogoproto.goproto_enum_prefix_all"] = message[".gogoproto.goproto_enum_prefix_all"];
                    if (message[".gogoproto.goproto_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer_all"))
                        object[".gogoproto.goproto_stringer_all"] = message[".gogoproto.goproto_stringer_all"];
                    if (message[".gogoproto.verbose_equal_all"] != null && message.hasOwnProperty(".gogoproto.verbose_equal_all"))
                        object[".gogoproto.verbose_equal_all"] = message[".gogoproto.verbose_equal_all"];
                    if (message[".gogoproto.face_all"] != null && message.hasOwnProperty(".gogoproto.face_all"))
                        object[".gogoproto.face_all"] = message[".gogoproto.face_all"];
                    if (message[".gogoproto.gostring_all"] != null && message.hasOwnProperty(".gogoproto.gostring_all"))
                        object[".gogoproto.gostring_all"] = message[".gogoproto.gostring_all"];
                    if (message[".gogoproto.populate_all"] != null && message.hasOwnProperty(".gogoproto.populate_all"))
                        object[".gogoproto.populate_all"] = message[".gogoproto.populate_all"];
                    if (message[".gogoproto.stringer_all"] != null && message.hasOwnProperty(".gogoproto.stringer_all"))
                        object[".gogoproto.stringer_all"] = message[".gogoproto.stringer_all"];
                    if (message[".gogoproto.onlyone_all"] != null && message.hasOwnProperty(".gogoproto.onlyone_all"))
                        object[".gogoproto.onlyone_all"] = message[".gogoproto.onlyone_all"];
                    if (message[".gogoproto.equal_all"] != null && message.hasOwnProperty(".gogoproto.equal_all"))
                        object[".gogoproto.equal_all"] = message[".gogoproto.equal_all"];
                    if (message[".gogoproto.description_all"] != null && message.hasOwnProperty(".gogoproto.description_all"))
                        object[".gogoproto.description_all"] = message[".gogoproto.description_all"];
                    if (message[".gogoproto.testgen_all"] != null && message.hasOwnProperty(".gogoproto.testgen_all"))
                        object[".gogoproto.testgen_all"] = message[".gogoproto.testgen_all"];
                    if (message[".gogoproto.benchgen_all"] != null && message.hasOwnProperty(".gogoproto.benchgen_all"))
                        object[".gogoproto.benchgen_all"] = message[".gogoproto.benchgen_all"];
                    if (message[".gogoproto.marshaler_all"] != null && message.hasOwnProperty(".gogoproto.marshaler_all"))
                        object[".gogoproto.marshaler_all"] = message[".gogoproto.marshaler_all"];
                    if (message[".gogoproto.unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unmarshaler_all"))
                        object[".gogoproto.unmarshaler_all"] = message[".gogoproto.unmarshaler_all"];
                    if (message[".gogoproto.stable_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler_all"))
                        object[".gogoproto.stable_marshaler_all"] = message[".gogoproto.stable_marshaler_all"];
                    if (message[".gogoproto.sizer_all"] != null && message.hasOwnProperty(".gogoproto.sizer_all"))
                        object[".gogoproto.sizer_all"] = message[".gogoproto.sizer_all"];
                    if (message[".gogoproto.goproto_enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer_all"))
                        object[".gogoproto.goproto_enum_stringer_all"] = message[".gogoproto.goproto_enum_stringer_all"];
                    if (message[".gogoproto.enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.enum_stringer_all"))
                        object[".gogoproto.enum_stringer_all"] = message[".gogoproto.enum_stringer_all"];
                    if (message[".gogoproto.unsafe_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler_all"))
                        object[".gogoproto.unsafe_marshaler_all"] = message[".gogoproto.unsafe_marshaler_all"];
                    if (message[".gogoproto.unsafe_unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler_all"))
                        object[".gogoproto.unsafe_unmarshaler_all"] = message[".gogoproto.unsafe_unmarshaler_all"];
                    if (message[".gogoproto.goproto_extensions_map_all"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map_all"))
                        object[".gogoproto.goproto_extensions_map_all"] = message[".gogoproto.goproto_extensions_map_all"];
                    if (message[".gogoproto.goproto_unrecognized_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized_all"))
                        object[".gogoproto.goproto_unrecognized_all"] = message[".gogoproto.goproto_unrecognized_all"];
                    if (message[".gogoproto.gogoproto_import"] != null && message.hasOwnProperty(".gogoproto.gogoproto_import"))
                        object[".gogoproto.gogoproto_import"] = message[".gogoproto.gogoproto_import"];
                    if (message[".gogoproto.protosizer_all"] != null && message.hasOwnProperty(".gogoproto.protosizer_all"))
                        object[".gogoproto.protosizer_all"] = message[".gogoproto.protosizer_all"];
                    if (message[".gogoproto.compare_all"] != null && message.hasOwnProperty(".gogoproto.compare_all"))
                        object[".gogoproto.compare_all"] = message[".gogoproto.compare_all"];
                    if (message[".gogoproto.typedecl_all"] != null && message.hasOwnProperty(".gogoproto.typedecl_all"))
                        object[".gogoproto.typedecl_all"] = message[".gogoproto.typedecl_all"];
                    if (message[".gogoproto.enumdecl_all"] != null && message.hasOwnProperty(".gogoproto.enumdecl_all"))
                        object[".gogoproto.enumdecl_all"] = message[".gogoproto.enumdecl_all"];
                    if (message[".gogoproto.goproto_registration"] != null && message.hasOwnProperty(".gogoproto.goproto_registration"))
                        object[".gogoproto.goproto_registration"] = message[".gogoproto.goproto_registration"];
                    if (message[".gogoproto.messagename_all"] != null && message.hasOwnProperty(".gogoproto.messagename_all"))
                        object[".gogoproto.messagename_all"] = message[".gogoproto.messagename_all"];
                    if (message[".gogoproto.goproto_sizecache_all"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache_all"))
                        object[".gogoproto.goproto_sizecache_all"] = message[".gogoproto.goproto_sizecache_all"];
                    if (message[".gogoproto.goproto_unkeyed_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed_all"))
                        object[".gogoproto.goproto_unkeyed_all"] = message[".gogoproto.goproto_unkeyed_all"];
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {number}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [message_set_wire_format] MessageOptions message_set_wire_format
                 * @property {boolean|null} [no_standard_descriptor_accessor] MessageOptions no_standard_descriptor_accessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [map_entry] MessageOptions map_entry
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MessageOptions uninterpreted_option
                 * @property {boolean|null} [".gogoproto.goproto_getters"] MessageOptions .gogoproto.goproto_getters
                 * @property {boolean|null} [".gogoproto.goproto_stringer"] MessageOptions .gogoproto.goproto_stringer
                 * @property {boolean|null} [".gogoproto.verbose_equal"] MessageOptions .gogoproto.verbose_equal
                 * @property {boolean|null} [".gogoproto.face"] MessageOptions .gogoproto.face
                 * @property {boolean|null} [".gogoproto.gostring"] MessageOptions .gogoproto.gostring
                 * @property {boolean|null} [".gogoproto.populate"] MessageOptions .gogoproto.populate
                 * @property {boolean|null} [".gogoproto.stringer"] MessageOptions .gogoproto.stringer
                 * @property {boolean|null} [".gogoproto.onlyone"] MessageOptions .gogoproto.onlyone
                 * @property {boolean|null} [".gogoproto.equal"] MessageOptions .gogoproto.equal
                 * @property {boolean|null} [".gogoproto.description"] MessageOptions .gogoproto.description
                 * @property {boolean|null} [".gogoproto.testgen"] MessageOptions .gogoproto.testgen
                 * @property {boolean|null} [".gogoproto.benchgen"] MessageOptions .gogoproto.benchgen
                 * @property {boolean|null} [".gogoproto.marshaler"] MessageOptions .gogoproto.marshaler
                 * @property {boolean|null} [".gogoproto.unmarshaler"] MessageOptions .gogoproto.unmarshaler
                 * @property {boolean|null} [".gogoproto.stable_marshaler"] MessageOptions .gogoproto.stable_marshaler
                 * @property {boolean|null} [".gogoproto.sizer"] MessageOptions .gogoproto.sizer
                 * @property {boolean|null} [".gogoproto.unsafe_marshaler"] MessageOptions .gogoproto.unsafe_marshaler
                 * @property {boolean|null} [".gogoproto.unsafe_unmarshaler"] MessageOptions .gogoproto.unsafe_unmarshaler
                 * @property {boolean|null} [".gogoproto.goproto_extensions_map"] MessageOptions .gogoproto.goproto_extensions_map
                 * @property {boolean|null} [".gogoproto.goproto_unrecognized"] MessageOptions .gogoproto.goproto_unrecognized
                 * @property {boolean|null} [".gogoproto.protosizer"] MessageOptions .gogoproto.protosizer
                 * @property {boolean|null} [".gogoproto.compare"] MessageOptions .gogoproto.compare
                 * @property {boolean|null} [".gogoproto.typedecl"] MessageOptions .gogoproto.typedecl
                 * @property {boolean|null} [".gogoproto.messagename"] MessageOptions .gogoproto.messagename
                 * @property {boolean|null} [".gogoproto.goproto_sizecache"] MessageOptions .gogoproto.goproto_sizecache
                 * @property {boolean|null} [".gogoproto.goproto_unkeyed"] MessageOptions .gogoproto.goproto_unkeyed
                 * @property {string|null} [".cosmos_proto.interface_type"] MessageOptions .cosmos_proto.interface_type
                 * @property {string|null} [".cosmos_proto.implements_interface"] MessageOptions .cosmos_proto.implements_interface
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions message_set_wire_format.
                 * @member {boolean} message_set_wire_format
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.message_set_wire_format = false;
    
                /**
                 * MessageOptions no_standard_descriptor_accessor.
                 * @member {boolean} no_standard_descriptor_accessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.no_standard_descriptor_accessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions map_entry.
                 * @member {boolean} map_entry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.map_entry = false;
    
                /**
                 * MessageOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * MessageOptions .gogoproto.goproto_getters.
                 * @member {boolean} .gogoproto.goproto_getters
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.goproto_getters"] = false;
    
                /**
                 * MessageOptions .gogoproto.goproto_stringer.
                 * @member {boolean} .gogoproto.goproto_stringer
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.goproto_stringer"] = false;
    
                /**
                 * MessageOptions .gogoproto.verbose_equal.
                 * @member {boolean} .gogoproto.verbose_equal
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.verbose_equal"] = false;
    
                /**
                 * MessageOptions .gogoproto.face.
                 * @member {boolean} .gogoproto.face
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.face"] = false;
    
                /**
                 * MessageOptions .gogoproto.gostring.
                 * @member {boolean} .gogoproto.gostring
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.gostring"] = false;
    
                /**
                 * MessageOptions .gogoproto.populate.
                 * @member {boolean} .gogoproto.populate
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.populate"] = false;
    
                /**
                 * MessageOptions .gogoproto.stringer.
                 * @member {boolean} .gogoproto.stringer
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.stringer"] = false;
    
                /**
                 * MessageOptions .gogoproto.onlyone.
                 * @member {boolean} .gogoproto.onlyone
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.onlyone"] = false;
    
                /**
                 * MessageOptions .gogoproto.equal.
                 * @member {boolean} .gogoproto.equal
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.equal"] = false;
    
                /**
                 * MessageOptions .gogoproto.description.
                 * @member {boolean} .gogoproto.description
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.description"] = false;
    
                /**
                 * MessageOptions .gogoproto.testgen.
                 * @member {boolean} .gogoproto.testgen
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.testgen"] = false;
    
                /**
                 * MessageOptions .gogoproto.benchgen.
                 * @member {boolean} .gogoproto.benchgen
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.benchgen"] = false;
    
                /**
                 * MessageOptions .gogoproto.marshaler.
                 * @member {boolean} .gogoproto.marshaler
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.marshaler"] = false;
    
                /**
                 * MessageOptions .gogoproto.unmarshaler.
                 * @member {boolean} .gogoproto.unmarshaler
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.unmarshaler"] = false;
    
                /**
                 * MessageOptions .gogoproto.stable_marshaler.
                 * @member {boolean} .gogoproto.stable_marshaler
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.stable_marshaler"] = false;
    
                /**
                 * MessageOptions .gogoproto.sizer.
                 * @member {boolean} .gogoproto.sizer
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.sizer"] = false;
    
                /**
                 * MessageOptions .gogoproto.unsafe_marshaler.
                 * @member {boolean} .gogoproto.unsafe_marshaler
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.unsafe_marshaler"] = false;
    
                /**
                 * MessageOptions .gogoproto.unsafe_unmarshaler.
                 * @member {boolean} .gogoproto.unsafe_unmarshaler
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.unsafe_unmarshaler"] = false;
    
                /**
                 * MessageOptions .gogoproto.goproto_extensions_map.
                 * @member {boolean} .gogoproto.goproto_extensions_map
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.goproto_extensions_map"] = false;
    
                /**
                 * MessageOptions .gogoproto.goproto_unrecognized.
                 * @member {boolean} .gogoproto.goproto_unrecognized
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.goproto_unrecognized"] = false;
    
                /**
                 * MessageOptions .gogoproto.protosizer.
                 * @member {boolean} .gogoproto.protosizer
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.protosizer"] = false;
    
                /**
                 * MessageOptions .gogoproto.compare.
                 * @member {boolean} .gogoproto.compare
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.compare"] = false;
    
                /**
                 * MessageOptions .gogoproto.typedecl.
                 * @member {boolean} .gogoproto.typedecl
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.typedecl"] = false;
    
                /**
                 * MessageOptions .gogoproto.messagename.
                 * @member {boolean} .gogoproto.messagename
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.messagename"] = false;
    
                /**
                 * MessageOptions .gogoproto.goproto_sizecache.
                 * @member {boolean} .gogoproto.goproto_sizecache
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.goproto_sizecache"] = false;
    
                /**
                 * MessageOptions .gogoproto.goproto_unkeyed.
                 * @member {boolean} .gogoproto.goproto_unkeyed
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.goproto_unkeyed"] = false;
    
                /**
                 * MessageOptions .cosmos_proto.interface_type.
                 * @member {string} .cosmos_proto.interface_type
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".cosmos_proto.interface_type"] = "";
    
                /**
                 * MessageOptions .cosmos_proto.implements_interface.
                 * @member {string} .cosmos_proto.implements_interface
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".cosmos_proto.implements_interface"] = "";
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.message_set_wire_format != null && Object.hasOwnProperty.call(message, "message_set_wire_format"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.message_set_wire_format);
                    if (message.no_standard_descriptor_accessor != null && Object.hasOwnProperty.call(message, "no_standard_descriptor_accessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.no_standard_descriptor_accessor);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.map_entry != null && Object.hasOwnProperty.call(message, "map_entry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.map_entry);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".gogoproto.goproto_getters"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_getters"))
                        writer.uint32(/* id 64001, wireType 0 =*/512008).bool(message[".gogoproto.goproto_getters"]);
                    if (message[".gogoproto.goproto_stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_stringer"))
                        writer.uint32(/* id 64003, wireType 0 =*/512024).bool(message[".gogoproto.goproto_stringer"]);
                    if (message[".gogoproto.verbose_equal"] != null && Object.hasOwnProperty.call(message, ".gogoproto.verbose_equal"))
                        writer.uint32(/* id 64004, wireType 0 =*/512032).bool(message[".gogoproto.verbose_equal"]);
                    if (message[".gogoproto.face"] != null && Object.hasOwnProperty.call(message, ".gogoproto.face"))
                        writer.uint32(/* id 64005, wireType 0 =*/512040).bool(message[".gogoproto.face"]);
                    if (message[".gogoproto.gostring"] != null && Object.hasOwnProperty.call(message, ".gogoproto.gostring"))
                        writer.uint32(/* id 64006, wireType 0 =*/512048).bool(message[".gogoproto.gostring"]);
                    if (message[".gogoproto.populate"] != null && Object.hasOwnProperty.call(message, ".gogoproto.populate"))
                        writer.uint32(/* id 64007, wireType 0 =*/512056).bool(message[".gogoproto.populate"]);
                    if (message[".gogoproto.onlyone"] != null && Object.hasOwnProperty.call(message, ".gogoproto.onlyone"))
                        writer.uint32(/* id 64009, wireType 0 =*/512072).bool(message[".gogoproto.onlyone"]);
                    if (message[".gogoproto.equal"] != null && Object.hasOwnProperty.call(message, ".gogoproto.equal"))
                        writer.uint32(/* id 64013, wireType 0 =*/512104).bool(message[".gogoproto.equal"]);
                    if (message[".gogoproto.description"] != null && Object.hasOwnProperty.call(message, ".gogoproto.description"))
                        writer.uint32(/* id 64014, wireType 0 =*/512112).bool(message[".gogoproto.description"]);
                    if (message[".gogoproto.testgen"] != null && Object.hasOwnProperty.call(message, ".gogoproto.testgen"))
                        writer.uint32(/* id 64015, wireType 0 =*/512120).bool(message[".gogoproto.testgen"]);
                    if (message[".gogoproto.benchgen"] != null && Object.hasOwnProperty.call(message, ".gogoproto.benchgen"))
                        writer.uint32(/* id 64016, wireType 0 =*/512128).bool(message[".gogoproto.benchgen"]);
                    if (message[".gogoproto.marshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.marshaler"))
                        writer.uint32(/* id 64017, wireType 0 =*/512136).bool(message[".gogoproto.marshaler"]);
                    if (message[".gogoproto.unmarshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unmarshaler"))
                        writer.uint32(/* id 64018, wireType 0 =*/512144).bool(message[".gogoproto.unmarshaler"]);
                    if (message[".gogoproto.stable_marshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stable_marshaler"))
                        writer.uint32(/* id 64019, wireType 0 =*/512152).bool(message[".gogoproto.stable_marshaler"]);
                    if (message[".gogoproto.sizer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.sizer"))
                        writer.uint32(/* id 64020, wireType 0 =*/512160).bool(message[".gogoproto.sizer"]);
                    if (message[".gogoproto.unsafe_marshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_marshaler"))
                        writer.uint32(/* id 64023, wireType 0 =*/512184).bool(message[".gogoproto.unsafe_marshaler"]);
                    if (message[".gogoproto.unsafe_unmarshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_unmarshaler"))
                        writer.uint32(/* id 64024, wireType 0 =*/512192).bool(message[".gogoproto.unsafe_unmarshaler"]);
                    if (message[".gogoproto.goproto_extensions_map"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_extensions_map"))
                        writer.uint32(/* id 64025, wireType 0 =*/512200).bool(message[".gogoproto.goproto_extensions_map"]);
                    if (message[".gogoproto.goproto_unrecognized"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unrecognized"))
                        writer.uint32(/* id 64026, wireType 0 =*/512208).bool(message[".gogoproto.goproto_unrecognized"]);
                    if (message[".gogoproto.protosizer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.protosizer"))
                        writer.uint32(/* id 64028, wireType 0 =*/512224).bool(message[".gogoproto.protosizer"]);
                    if (message[".gogoproto.compare"] != null && Object.hasOwnProperty.call(message, ".gogoproto.compare"))
                        writer.uint32(/* id 64029, wireType 0 =*/512232).bool(message[".gogoproto.compare"]);
                    if (message[".gogoproto.typedecl"] != null && Object.hasOwnProperty.call(message, ".gogoproto.typedecl"))
                        writer.uint32(/* id 64030, wireType 0 =*/512240).bool(message[".gogoproto.typedecl"]);
                    if (message[".gogoproto.messagename"] != null && Object.hasOwnProperty.call(message, ".gogoproto.messagename"))
                        writer.uint32(/* id 64033, wireType 0 =*/512264).bool(message[".gogoproto.messagename"]);
                    if (message[".gogoproto.goproto_sizecache"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_sizecache"))
                        writer.uint32(/* id 64034, wireType 0 =*/512272).bool(message[".gogoproto.goproto_sizecache"]);
                    if (message[".gogoproto.goproto_unkeyed"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unkeyed"))
                        writer.uint32(/* id 64035, wireType 0 =*/512280).bool(message[".gogoproto.goproto_unkeyed"]);
                    if (message[".gogoproto.stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stringer"))
                        writer.uint32(/* id 67008, wireType 0 =*/536064).bool(message[".gogoproto.stringer"]);
                    if (message[".cosmos_proto.interface_type"] != null && Object.hasOwnProperty.call(message, ".cosmos_proto.interface_type"))
                        writer.uint32(/* id 93001, wireType 2 =*/744010).string(message[".cosmos_proto.interface_type"]);
                    if (message[".cosmos_proto.implements_interface"] != null && Object.hasOwnProperty.call(message, ".cosmos_proto.implements_interface"))
                        writer.uint32(/* id 93002, wireType 2 =*/744018).string(message[".cosmos_proto.implements_interface"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.message_set_wire_format = reader.bool();
                            break;
                        case 2:
                            message.no_standard_descriptor_accessor = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 7:
                            message.map_entry = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 64001:
                            message[".gogoproto.goproto_getters"] = reader.bool();
                            break;
                        case 64003:
                            message[".gogoproto.goproto_stringer"] = reader.bool();
                            break;
                        case 64004:
                            message[".gogoproto.verbose_equal"] = reader.bool();
                            break;
                        case 64005:
                            message[".gogoproto.face"] = reader.bool();
                            break;
                        case 64006:
                            message[".gogoproto.gostring"] = reader.bool();
                            break;
                        case 64007:
                            message[".gogoproto.populate"] = reader.bool();
                            break;
                        case 67008:
                            message[".gogoproto.stringer"] = reader.bool();
                            break;
                        case 64009:
                            message[".gogoproto.onlyone"] = reader.bool();
                            break;
                        case 64013:
                            message[".gogoproto.equal"] = reader.bool();
                            break;
                        case 64014:
                            message[".gogoproto.description"] = reader.bool();
                            break;
                        case 64015:
                            message[".gogoproto.testgen"] = reader.bool();
                            break;
                        case 64016:
                            message[".gogoproto.benchgen"] = reader.bool();
                            break;
                        case 64017:
                            message[".gogoproto.marshaler"] = reader.bool();
                            break;
                        case 64018:
                            message[".gogoproto.unmarshaler"] = reader.bool();
                            break;
                        case 64019:
                            message[".gogoproto.stable_marshaler"] = reader.bool();
                            break;
                        case 64020:
                            message[".gogoproto.sizer"] = reader.bool();
                            break;
                        case 64023:
                            message[".gogoproto.unsafe_marshaler"] = reader.bool();
                            break;
                        case 64024:
                            message[".gogoproto.unsafe_unmarshaler"] = reader.bool();
                            break;
                        case 64025:
                            message[".gogoproto.goproto_extensions_map"] = reader.bool();
                            break;
                        case 64026:
                            message[".gogoproto.goproto_unrecognized"] = reader.bool();
                            break;
                        case 64028:
                            message[".gogoproto.protosizer"] = reader.bool();
                            break;
                        case 64029:
                            message[".gogoproto.compare"] = reader.bool();
                            break;
                        case 64030:
                            message[".gogoproto.typedecl"] = reader.bool();
                            break;
                        case 64033:
                            message[".gogoproto.messagename"] = reader.bool();
                            break;
                        case 64034:
                            message[".gogoproto.goproto_sizecache"] = reader.bool();
                            break;
                        case 64035:
                            message[".gogoproto.goproto_unkeyed"] = reader.bool();
                            break;
                        case 93001:
                            message[".cosmos_proto.interface_type"] = reader.string();
                            break;
                        case 93002:
                            message[".cosmos_proto.implements_interface"] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                        if (typeof message.message_set_wire_format !== "boolean")
                            return "message_set_wire_format: boolean expected";
                    if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                        if (typeof message.no_standard_descriptor_accessor !== "boolean")
                            return "no_standard_descriptor_accessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                        if (typeof message.map_entry !== "boolean")
                            return "map_entry: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".gogoproto.goproto_getters"] != null && message.hasOwnProperty(".gogoproto.goproto_getters"))
                        if (typeof message[".gogoproto.goproto_getters"] !== "boolean")
                            return ".gogoproto.goproto_getters: boolean expected";
                    if (message[".gogoproto.goproto_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer"))
                        if (typeof message[".gogoproto.goproto_stringer"] !== "boolean")
                            return ".gogoproto.goproto_stringer: boolean expected";
                    if (message[".gogoproto.verbose_equal"] != null && message.hasOwnProperty(".gogoproto.verbose_equal"))
                        if (typeof message[".gogoproto.verbose_equal"] !== "boolean")
                            return ".gogoproto.verbose_equal: boolean expected";
                    if (message[".gogoproto.face"] != null && message.hasOwnProperty(".gogoproto.face"))
                        if (typeof message[".gogoproto.face"] !== "boolean")
                            return ".gogoproto.face: boolean expected";
                    if (message[".gogoproto.gostring"] != null && message.hasOwnProperty(".gogoproto.gostring"))
                        if (typeof message[".gogoproto.gostring"] !== "boolean")
                            return ".gogoproto.gostring: boolean expected";
                    if (message[".gogoproto.populate"] != null && message.hasOwnProperty(".gogoproto.populate"))
                        if (typeof message[".gogoproto.populate"] !== "boolean")
                            return ".gogoproto.populate: boolean expected";
                    if (message[".gogoproto.stringer"] != null && message.hasOwnProperty(".gogoproto.stringer"))
                        if (typeof message[".gogoproto.stringer"] !== "boolean")
                            return ".gogoproto.stringer: boolean expected";
                    if (message[".gogoproto.onlyone"] != null && message.hasOwnProperty(".gogoproto.onlyone"))
                        if (typeof message[".gogoproto.onlyone"] !== "boolean")
                            return ".gogoproto.onlyone: boolean expected";
                    if (message[".gogoproto.equal"] != null && message.hasOwnProperty(".gogoproto.equal"))
                        if (typeof message[".gogoproto.equal"] !== "boolean")
                            return ".gogoproto.equal: boolean expected";
                    if (message[".gogoproto.description"] != null && message.hasOwnProperty(".gogoproto.description"))
                        if (typeof message[".gogoproto.description"] !== "boolean")
                            return ".gogoproto.description: boolean expected";
                    if (message[".gogoproto.testgen"] != null && message.hasOwnProperty(".gogoproto.testgen"))
                        if (typeof message[".gogoproto.testgen"] !== "boolean")
                            return ".gogoproto.testgen: boolean expected";
                    if (message[".gogoproto.benchgen"] != null && message.hasOwnProperty(".gogoproto.benchgen"))
                        if (typeof message[".gogoproto.benchgen"] !== "boolean")
                            return ".gogoproto.benchgen: boolean expected";
                    if (message[".gogoproto.marshaler"] != null && message.hasOwnProperty(".gogoproto.marshaler"))
                        if (typeof message[".gogoproto.marshaler"] !== "boolean")
                            return ".gogoproto.marshaler: boolean expected";
                    if (message[".gogoproto.unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unmarshaler"))
                        if (typeof message[".gogoproto.unmarshaler"] !== "boolean")
                            return ".gogoproto.unmarshaler: boolean expected";
                    if (message[".gogoproto.stable_marshaler"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler"))
                        if (typeof message[".gogoproto.stable_marshaler"] !== "boolean")
                            return ".gogoproto.stable_marshaler: boolean expected";
                    if (message[".gogoproto.sizer"] != null && message.hasOwnProperty(".gogoproto.sizer"))
                        if (typeof message[".gogoproto.sizer"] !== "boolean")
                            return ".gogoproto.sizer: boolean expected";
                    if (message[".gogoproto.unsafe_marshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler"))
                        if (typeof message[".gogoproto.unsafe_marshaler"] !== "boolean")
                            return ".gogoproto.unsafe_marshaler: boolean expected";
                    if (message[".gogoproto.unsafe_unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler"))
                        if (typeof message[".gogoproto.unsafe_unmarshaler"] !== "boolean")
                            return ".gogoproto.unsafe_unmarshaler: boolean expected";
                    if (message[".gogoproto.goproto_extensions_map"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map"))
                        if (typeof message[".gogoproto.goproto_extensions_map"] !== "boolean")
                            return ".gogoproto.goproto_extensions_map: boolean expected";
                    if (message[".gogoproto.goproto_unrecognized"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized"))
                        if (typeof message[".gogoproto.goproto_unrecognized"] !== "boolean")
                            return ".gogoproto.goproto_unrecognized: boolean expected";
                    if (message[".gogoproto.protosizer"] != null && message.hasOwnProperty(".gogoproto.protosizer"))
                        if (typeof message[".gogoproto.protosizer"] !== "boolean")
                            return ".gogoproto.protosizer: boolean expected";
                    if (message[".gogoproto.compare"] != null && message.hasOwnProperty(".gogoproto.compare"))
                        if (typeof message[".gogoproto.compare"] !== "boolean")
                            return ".gogoproto.compare: boolean expected";
                    if (message[".gogoproto.typedecl"] != null && message.hasOwnProperty(".gogoproto.typedecl"))
                        if (typeof message[".gogoproto.typedecl"] !== "boolean")
                            return ".gogoproto.typedecl: boolean expected";
                    if (message[".gogoproto.messagename"] != null && message.hasOwnProperty(".gogoproto.messagename"))
                        if (typeof message[".gogoproto.messagename"] !== "boolean")
                            return ".gogoproto.messagename: boolean expected";
                    if (message[".gogoproto.goproto_sizecache"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache"))
                        if (typeof message[".gogoproto.goproto_sizecache"] !== "boolean")
                            return ".gogoproto.goproto_sizecache: boolean expected";
                    if (message[".gogoproto.goproto_unkeyed"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed"))
                        if (typeof message[".gogoproto.goproto_unkeyed"] !== "boolean")
                            return ".gogoproto.goproto_unkeyed: boolean expected";
                    if (message[".cosmos_proto.interface_type"] != null && message.hasOwnProperty(".cosmos_proto.interface_type"))
                        if (!$util.isString(message[".cosmos_proto.interface_type"]))
                            return ".cosmos_proto.interface_type: string expected";
                    if (message[".cosmos_proto.implements_interface"] != null && message.hasOwnProperty(".cosmos_proto.implements_interface"))
                        if (!$util.isString(message[".cosmos_proto.implements_interface"]))
                            return ".cosmos_proto.implements_interface: string expected";
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.message_set_wire_format != null)
                        message.message_set_wire_format = Boolean(object.message_set_wire_format);
                    if (object.no_standard_descriptor_accessor != null)
                        message.no_standard_descriptor_accessor = Boolean(object.no_standard_descriptor_accessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.map_entry != null)
                        message.map_entry = Boolean(object.map_entry);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".gogoproto.goproto_getters"] != null)
                        message[".gogoproto.goproto_getters"] = Boolean(object[".gogoproto.goproto_getters"]);
                    if (object[".gogoproto.goproto_stringer"] != null)
                        message[".gogoproto.goproto_stringer"] = Boolean(object[".gogoproto.goproto_stringer"]);
                    if (object[".gogoproto.verbose_equal"] != null)
                        message[".gogoproto.verbose_equal"] = Boolean(object[".gogoproto.verbose_equal"]);
                    if (object[".gogoproto.face"] != null)
                        message[".gogoproto.face"] = Boolean(object[".gogoproto.face"]);
                    if (object[".gogoproto.gostring"] != null)
                        message[".gogoproto.gostring"] = Boolean(object[".gogoproto.gostring"]);
                    if (object[".gogoproto.populate"] != null)
                        message[".gogoproto.populate"] = Boolean(object[".gogoproto.populate"]);
                    if (object[".gogoproto.stringer"] != null)
                        message[".gogoproto.stringer"] = Boolean(object[".gogoproto.stringer"]);
                    if (object[".gogoproto.onlyone"] != null)
                        message[".gogoproto.onlyone"] = Boolean(object[".gogoproto.onlyone"]);
                    if (object[".gogoproto.equal"] != null)
                        message[".gogoproto.equal"] = Boolean(object[".gogoproto.equal"]);
                    if (object[".gogoproto.description"] != null)
                        message[".gogoproto.description"] = Boolean(object[".gogoproto.description"]);
                    if (object[".gogoproto.testgen"] != null)
                        message[".gogoproto.testgen"] = Boolean(object[".gogoproto.testgen"]);
                    if (object[".gogoproto.benchgen"] != null)
                        message[".gogoproto.benchgen"] = Boolean(object[".gogoproto.benchgen"]);
                    if (object[".gogoproto.marshaler"] != null)
                        message[".gogoproto.marshaler"] = Boolean(object[".gogoproto.marshaler"]);
                    if (object[".gogoproto.unmarshaler"] != null)
                        message[".gogoproto.unmarshaler"] = Boolean(object[".gogoproto.unmarshaler"]);
                    if (object[".gogoproto.stable_marshaler"] != null)
                        message[".gogoproto.stable_marshaler"] = Boolean(object[".gogoproto.stable_marshaler"]);
                    if (object[".gogoproto.sizer"] != null)
                        message[".gogoproto.sizer"] = Boolean(object[".gogoproto.sizer"]);
                    if (object[".gogoproto.unsafe_marshaler"] != null)
                        message[".gogoproto.unsafe_marshaler"] = Boolean(object[".gogoproto.unsafe_marshaler"]);
                    if (object[".gogoproto.unsafe_unmarshaler"] != null)
                        message[".gogoproto.unsafe_unmarshaler"] = Boolean(object[".gogoproto.unsafe_unmarshaler"]);
                    if (object[".gogoproto.goproto_extensions_map"] != null)
                        message[".gogoproto.goproto_extensions_map"] = Boolean(object[".gogoproto.goproto_extensions_map"]);
                    if (object[".gogoproto.goproto_unrecognized"] != null)
                        message[".gogoproto.goproto_unrecognized"] = Boolean(object[".gogoproto.goproto_unrecognized"]);
                    if (object[".gogoproto.protosizer"] != null)
                        message[".gogoproto.protosizer"] = Boolean(object[".gogoproto.protosizer"]);
                    if (object[".gogoproto.compare"] != null)
                        message[".gogoproto.compare"] = Boolean(object[".gogoproto.compare"]);
                    if (object[".gogoproto.typedecl"] != null)
                        message[".gogoproto.typedecl"] = Boolean(object[".gogoproto.typedecl"]);
                    if (object[".gogoproto.messagename"] != null)
                        message[".gogoproto.messagename"] = Boolean(object[".gogoproto.messagename"]);
                    if (object[".gogoproto.goproto_sizecache"] != null)
                        message[".gogoproto.goproto_sizecache"] = Boolean(object[".gogoproto.goproto_sizecache"]);
                    if (object[".gogoproto.goproto_unkeyed"] != null)
                        message[".gogoproto.goproto_unkeyed"] = Boolean(object[".gogoproto.goproto_unkeyed"]);
                    if (object[".cosmos_proto.interface_type"] != null)
                        message[".cosmos_proto.interface_type"] = String(object[".cosmos_proto.interface_type"]);
                    if (object[".cosmos_proto.implements_interface"] != null)
                        message[".cosmos_proto.implements_interface"] = String(object[".cosmos_proto.implements_interface"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.message_set_wire_format = false;
                        object.no_standard_descriptor_accessor = false;
                        object.deprecated = false;
                        object.map_entry = false;
                        object[".gogoproto.goproto_getters"] = false;
                        object[".gogoproto.goproto_stringer"] = false;
                        object[".gogoproto.verbose_equal"] = false;
                        object[".gogoproto.face"] = false;
                        object[".gogoproto.gostring"] = false;
                        object[".gogoproto.populate"] = false;
                        object[".gogoproto.onlyone"] = false;
                        object[".gogoproto.equal"] = false;
                        object[".gogoproto.description"] = false;
                        object[".gogoproto.testgen"] = false;
                        object[".gogoproto.benchgen"] = false;
                        object[".gogoproto.marshaler"] = false;
                        object[".gogoproto.unmarshaler"] = false;
                        object[".gogoproto.stable_marshaler"] = false;
                        object[".gogoproto.sizer"] = false;
                        object[".gogoproto.unsafe_marshaler"] = false;
                        object[".gogoproto.unsafe_unmarshaler"] = false;
                        object[".gogoproto.goproto_extensions_map"] = false;
                        object[".gogoproto.goproto_unrecognized"] = false;
                        object[".gogoproto.protosizer"] = false;
                        object[".gogoproto.compare"] = false;
                        object[".gogoproto.typedecl"] = false;
                        object[".gogoproto.messagename"] = false;
                        object[".gogoproto.goproto_sizecache"] = false;
                        object[".gogoproto.goproto_unkeyed"] = false;
                        object[".gogoproto.stringer"] = false;
                        object[".cosmos_proto.interface_type"] = "";
                        object[".cosmos_proto.implements_interface"] = "";
                    }
                    if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                        object.message_set_wire_format = message.message_set_wire_format;
                    if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                        object.no_standard_descriptor_accessor = message.no_standard_descriptor_accessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                        object.map_entry = message.map_entry;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".gogoproto.goproto_getters"] != null && message.hasOwnProperty(".gogoproto.goproto_getters"))
                        object[".gogoproto.goproto_getters"] = message[".gogoproto.goproto_getters"];
                    if (message[".gogoproto.goproto_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer"))
                        object[".gogoproto.goproto_stringer"] = message[".gogoproto.goproto_stringer"];
                    if (message[".gogoproto.verbose_equal"] != null && message.hasOwnProperty(".gogoproto.verbose_equal"))
                        object[".gogoproto.verbose_equal"] = message[".gogoproto.verbose_equal"];
                    if (message[".gogoproto.face"] != null && message.hasOwnProperty(".gogoproto.face"))
                        object[".gogoproto.face"] = message[".gogoproto.face"];
                    if (message[".gogoproto.gostring"] != null && message.hasOwnProperty(".gogoproto.gostring"))
                        object[".gogoproto.gostring"] = message[".gogoproto.gostring"];
                    if (message[".gogoproto.populate"] != null && message.hasOwnProperty(".gogoproto.populate"))
                        object[".gogoproto.populate"] = message[".gogoproto.populate"];
                    if (message[".gogoproto.onlyone"] != null && message.hasOwnProperty(".gogoproto.onlyone"))
                        object[".gogoproto.onlyone"] = message[".gogoproto.onlyone"];
                    if (message[".gogoproto.equal"] != null && message.hasOwnProperty(".gogoproto.equal"))
                        object[".gogoproto.equal"] = message[".gogoproto.equal"];
                    if (message[".gogoproto.description"] != null && message.hasOwnProperty(".gogoproto.description"))
                        object[".gogoproto.description"] = message[".gogoproto.description"];
                    if (message[".gogoproto.testgen"] != null && message.hasOwnProperty(".gogoproto.testgen"))
                        object[".gogoproto.testgen"] = message[".gogoproto.testgen"];
                    if (message[".gogoproto.benchgen"] != null && message.hasOwnProperty(".gogoproto.benchgen"))
                        object[".gogoproto.benchgen"] = message[".gogoproto.benchgen"];
                    if (message[".gogoproto.marshaler"] != null && message.hasOwnProperty(".gogoproto.marshaler"))
                        object[".gogoproto.marshaler"] = message[".gogoproto.marshaler"];
                    if (message[".gogoproto.unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unmarshaler"))
                        object[".gogoproto.unmarshaler"] = message[".gogoproto.unmarshaler"];
                    if (message[".gogoproto.stable_marshaler"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler"))
                        object[".gogoproto.stable_marshaler"] = message[".gogoproto.stable_marshaler"];
                    if (message[".gogoproto.sizer"] != null && message.hasOwnProperty(".gogoproto.sizer"))
                        object[".gogoproto.sizer"] = message[".gogoproto.sizer"];
                    if (message[".gogoproto.unsafe_marshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler"))
                        object[".gogoproto.unsafe_marshaler"] = message[".gogoproto.unsafe_marshaler"];
                    if (message[".gogoproto.unsafe_unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler"))
                        object[".gogoproto.unsafe_unmarshaler"] = message[".gogoproto.unsafe_unmarshaler"];
                    if (message[".gogoproto.goproto_extensions_map"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map"))
                        object[".gogoproto.goproto_extensions_map"] = message[".gogoproto.goproto_extensions_map"];
                    if (message[".gogoproto.goproto_unrecognized"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized"))
                        object[".gogoproto.goproto_unrecognized"] = message[".gogoproto.goproto_unrecognized"];
                    if (message[".gogoproto.protosizer"] != null && message.hasOwnProperty(".gogoproto.protosizer"))
                        object[".gogoproto.protosizer"] = message[".gogoproto.protosizer"];
                    if (message[".gogoproto.compare"] != null && message.hasOwnProperty(".gogoproto.compare"))
                        object[".gogoproto.compare"] = message[".gogoproto.compare"];
                    if (message[".gogoproto.typedecl"] != null && message.hasOwnProperty(".gogoproto.typedecl"))
                        object[".gogoproto.typedecl"] = message[".gogoproto.typedecl"];
                    if (message[".gogoproto.messagename"] != null && message.hasOwnProperty(".gogoproto.messagename"))
                        object[".gogoproto.messagename"] = message[".gogoproto.messagename"];
                    if (message[".gogoproto.goproto_sizecache"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache"))
                        object[".gogoproto.goproto_sizecache"] = message[".gogoproto.goproto_sizecache"];
                    if (message[".gogoproto.goproto_unkeyed"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed"))
                        object[".gogoproto.goproto_unkeyed"] = message[".gogoproto.goproto_unkeyed"];
                    if (message[".gogoproto.stringer"] != null && message.hasOwnProperty(".gogoproto.stringer"))
                        object[".gogoproto.stringer"] = message[".gogoproto.stringer"];
                    if (message[".cosmos_proto.interface_type"] != null && message.hasOwnProperty(".cosmos_proto.interface_type"))
                        object[".cosmos_proto.interface_type"] = message[".cosmos_proto.interface_type"];
                    if (message[".cosmos_proto.implements_interface"] != null && message.hasOwnProperty(".cosmos_proto.implements_interface"))
                        object[".cosmos_proto.implements_interface"] = message[".cosmos_proto.implements_interface"];
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FieldOptions uninterpreted_option
                 * @property {boolean|null} [".gogoproto.nullable"] FieldOptions .gogoproto.nullable
                 * @property {boolean|null} [".gogoproto.embed"] FieldOptions .gogoproto.embed
                 * @property {string|null} [".gogoproto.customtype"] FieldOptions .gogoproto.customtype
                 * @property {string|null} [".gogoproto.customname"] FieldOptions .gogoproto.customname
                 * @property {string|null} [".gogoproto.jsontag"] FieldOptions .gogoproto.jsontag
                 * @property {string|null} [".gogoproto.moretags"] FieldOptions .gogoproto.moretags
                 * @property {string|null} [".gogoproto.casttype"] FieldOptions .gogoproto.casttype
                 * @property {string|null} [".gogoproto.castkey"] FieldOptions .gogoproto.castkey
                 * @property {string|null} [".gogoproto.castvalue"] FieldOptions .gogoproto.castvalue
                 * @property {boolean|null} [".gogoproto.stdtime"] FieldOptions .gogoproto.stdtime
                 * @property {boolean|null} [".gogoproto.stdduration"] FieldOptions .gogoproto.stdduration
                 * @property {boolean|null} [".gogoproto.wktpointer"] FieldOptions .gogoproto.wktpointer
                 * @property {string|null} [".gogoproto.castrepeated"] FieldOptions .gogoproto.castrepeated
                 * @property {string|null} [".cosmos_proto.accepts_interface"] FieldOptions .cosmos_proto.accepts_interface
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * FieldOptions .gogoproto.nullable.
                 * @member {boolean} .gogoproto.nullable
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.nullable"] = false;
    
                /**
                 * FieldOptions .gogoproto.embed.
                 * @member {boolean} .gogoproto.embed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.embed"] = false;
    
                /**
                 * FieldOptions .gogoproto.customtype.
                 * @member {string} .gogoproto.customtype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.customtype"] = "";
    
                /**
                 * FieldOptions .gogoproto.customname.
                 * @member {string} .gogoproto.customname
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.customname"] = "";
    
                /**
                 * FieldOptions .gogoproto.jsontag.
                 * @member {string} .gogoproto.jsontag
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.jsontag"] = "";
    
                /**
                 * FieldOptions .gogoproto.moretags.
                 * @member {string} .gogoproto.moretags
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.moretags"] = "";
    
                /**
                 * FieldOptions .gogoproto.casttype.
                 * @member {string} .gogoproto.casttype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.casttype"] = "";
    
                /**
                 * FieldOptions .gogoproto.castkey.
                 * @member {string} .gogoproto.castkey
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.castkey"] = "";
    
                /**
                 * FieldOptions .gogoproto.castvalue.
                 * @member {string} .gogoproto.castvalue
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.castvalue"] = "";
    
                /**
                 * FieldOptions .gogoproto.stdtime.
                 * @member {boolean} .gogoproto.stdtime
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.stdtime"] = false;
    
                /**
                 * FieldOptions .gogoproto.stdduration.
                 * @member {boolean} .gogoproto.stdduration
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.stdduration"] = false;
    
                /**
                 * FieldOptions .gogoproto.wktpointer.
                 * @member {boolean} .gogoproto.wktpointer
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.wktpointer"] = false;
    
                /**
                 * FieldOptions .gogoproto.castrepeated.
                 * @member {string} .gogoproto.castrepeated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.castrepeated"] = "";
    
                /**
                 * FieldOptions .cosmos_proto.accepts_interface.
                 * @member {string} .cosmos_proto.accepts_interface
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".cosmos_proto.accepts_interface"] = "";
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".gogoproto.nullable"] != null && Object.hasOwnProperty.call(message, ".gogoproto.nullable"))
                        writer.uint32(/* id 65001, wireType 0 =*/520008).bool(message[".gogoproto.nullable"]);
                    if (message[".gogoproto.embed"] != null && Object.hasOwnProperty.call(message, ".gogoproto.embed"))
                        writer.uint32(/* id 65002, wireType 0 =*/520016).bool(message[".gogoproto.embed"]);
                    if (message[".gogoproto.customtype"] != null && Object.hasOwnProperty.call(message, ".gogoproto.customtype"))
                        writer.uint32(/* id 65003, wireType 2 =*/520026).string(message[".gogoproto.customtype"]);
                    if (message[".gogoproto.customname"] != null && Object.hasOwnProperty.call(message, ".gogoproto.customname"))
                        writer.uint32(/* id 65004, wireType 2 =*/520034).string(message[".gogoproto.customname"]);
                    if (message[".gogoproto.jsontag"] != null && Object.hasOwnProperty.call(message, ".gogoproto.jsontag"))
                        writer.uint32(/* id 65005, wireType 2 =*/520042).string(message[".gogoproto.jsontag"]);
                    if (message[".gogoproto.moretags"] != null && Object.hasOwnProperty.call(message, ".gogoproto.moretags"))
                        writer.uint32(/* id 65006, wireType 2 =*/520050).string(message[".gogoproto.moretags"]);
                    if (message[".gogoproto.casttype"] != null && Object.hasOwnProperty.call(message, ".gogoproto.casttype"))
                        writer.uint32(/* id 65007, wireType 2 =*/520058).string(message[".gogoproto.casttype"]);
                    if (message[".gogoproto.castkey"] != null && Object.hasOwnProperty.call(message, ".gogoproto.castkey"))
                        writer.uint32(/* id 65008, wireType 2 =*/520066).string(message[".gogoproto.castkey"]);
                    if (message[".gogoproto.castvalue"] != null && Object.hasOwnProperty.call(message, ".gogoproto.castvalue"))
                        writer.uint32(/* id 65009, wireType 2 =*/520074).string(message[".gogoproto.castvalue"]);
                    if (message[".gogoproto.stdtime"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stdtime"))
                        writer.uint32(/* id 65010, wireType 0 =*/520080).bool(message[".gogoproto.stdtime"]);
                    if (message[".gogoproto.stdduration"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stdduration"))
                        writer.uint32(/* id 65011, wireType 0 =*/520088).bool(message[".gogoproto.stdduration"]);
                    if (message[".gogoproto.wktpointer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.wktpointer"))
                        writer.uint32(/* id 65012, wireType 0 =*/520096).bool(message[".gogoproto.wktpointer"]);
                    if (message[".gogoproto.castrepeated"] != null && Object.hasOwnProperty.call(message, ".gogoproto.castrepeated"))
                        writer.uint32(/* id 65013, wireType 2 =*/520106).string(message[".gogoproto.castrepeated"]);
                    if (message[".cosmos_proto.accepts_interface"] != null && Object.hasOwnProperty.call(message, ".cosmos_proto.accepts_interface"))
                        writer.uint32(/* id 93001, wireType 2 =*/744010).string(message[".cosmos_proto.accepts_interface"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.ctype = reader.int32();
                            break;
                        case 2:
                            message.packed = reader.bool();
                            break;
                        case 6:
                            message.jstype = reader.int32();
                            break;
                        case 5:
                            message.lazy = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 10:
                            message.weak = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 65001:
                            message[".gogoproto.nullable"] = reader.bool();
                            break;
                        case 65002:
                            message[".gogoproto.embed"] = reader.bool();
                            break;
                        case 65003:
                            message[".gogoproto.customtype"] = reader.string();
                            break;
                        case 65004:
                            message[".gogoproto.customname"] = reader.string();
                            break;
                        case 65005:
                            message[".gogoproto.jsontag"] = reader.string();
                            break;
                        case 65006:
                            message[".gogoproto.moretags"] = reader.string();
                            break;
                        case 65007:
                            message[".gogoproto.casttype"] = reader.string();
                            break;
                        case 65008:
                            message[".gogoproto.castkey"] = reader.string();
                            break;
                        case 65009:
                            message[".gogoproto.castvalue"] = reader.string();
                            break;
                        case 65010:
                            message[".gogoproto.stdtime"] = reader.bool();
                            break;
                        case 65011:
                            message[".gogoproto.stdduration"] = reader.bool();
                            break;
                        case 65012:
                            message[".gogoproto.wktpointer"] = reader.bool();
                            break;
                        case 65013:
                            message[".gogoproto.castrepeated"] = reader.string();
                            break;
                        case 93001:
                            message[".cosmos_proto.accepts_interface"] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".gogoproto.nullable"] != null && message.hasOwnProperty(".gogoproto.nullable"))
                        if (typeof message[".gogoproto.nullable"] !== "boolean")
                            return ".gogoproto.nullable: boolean expected";
                    if (message[".gogoproto.embed"] != null && message.hasOwnProperty(".gogoproto.embed"))
                        if (typeof message[".gogoproto.embed"] !== "boolean")
                            return ".gogoproto.embed: boolean expected";
                    if (message[".gogoproto.customtype"] != null && message.hasOwnProperty(".gogoproto.customtype"))
                        if (!$util.isString(message[".gogoproto.customtype"]))
                            return ".gogoproto.customtype: string expected";
                    if (message[".gogoproto.customname"] != null && message.hasOwnProperty(".gogoproto.customname"))
                        if (!$util.isString(message[".gogoproto.customname"]))
                            return ".gogoproto.customname: string expected";
                    if (message[".gogoproto.jsontag"] != null && message.hasOwnProperty(".gogoproto.jsontag"))
                        if (!$util.isString(message[".gogoproto.jsontag"]))
                            return ".gogoproto.jsontag: string expected";
                    if (message[".gogoproto.moretags"] != null && message.hasOwnProperty(".gogoproto.moretags"))
                        if (!$util.isString(message[".gogoproto.moretags"]))
                            return ".gogoproto.moretags: string expected";
                    if (message[".gogoproto.casttype"] != null && message.hasOwnProperty(".gogoproto.casttype"))
                        if (!$util.isString(message[".gogoproto.casttype"]))
                            return ".gogoproto.casttype: string expected";
                    if (message[".gogoproto.castkey"] != null && message.hasOwnProperty(".gogoproto.castkey"))
                        if (!$util.isString(message[".gogoproto.castkey"]))
                            return ".gogoproto.castkey: string expected";
                    if (message[".gogoproto.castvalue"] != null && message.hasOwnProperty(".gogoproto.castvalue"))
                        if (!$util.isString(message[".gogoproto.castvalue"]))
                            return ".gogoproto.castvalue: string expected";
                    if (message[".gogoproto.stdtime"] != null && message.hasOwnProperty(".gogoproto.stdtime"))
                        if (typeof message[".gogoproto.stdtime"] !== "boolean")
                            return ".gogoproto.stdtime: boolean expected";
                    if (message[".gogoproto.stdduration"] != null && message.hasOwnProperty(".gogoproto.stdduration"))
                        if (typeof message[".gogoproto.stdduration"] !== "boolean")
                            return ".gogoproto.stdduration: boolean expected";
                    if (message[".gogoproto.wktpointer"] != null && message.hasOwnProperty(".gogoproto.wktpointer"))
                        if (typeof message[".gogoproto.wktpointer"] !== "boolean")
                            return ".gogoproto.wktpointer: boolean expected";
                    if (message[".gogoproto.castrepeated"] != null && message.hasOwnProperty(".gogoproto.castrepeated"))
                        if (!$util.isString(message[".gogoproto.castrepeated"]))
                            return ".gogoproto.castrepeated: string expected";
                    if (message[".cosmos_proto.accepts_interface"] != null && message.hasOwnProperty(".cosmos_proto.accepts_interface"))
                        if (!$util.isString(message[".cosmos_proto.accepts_interface"]))
                            return ".cosmos_proto.accepts_interface: string expected";
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".gogoproto.nullable"] != null)
                        message[".gogoproto.nullable"] = Boolean(object[".gogoproto.nullable"]);
                    if (object[".gogoproto.embed"] != null)
                        message[".gogoproto.embed"] = Boolean(object[".gogoproto.embed"]);
                    if (object[".gogoproto.customtype"] != null)
                        message[".gogoproto.customtype"] = String(object[".gogoproto.customtype"]);
                    if (object[".gogoproto.customname"] != null)
                        message[".gogoproto.customname"] = String(object[".gogoproto.customname"]);
                    if (object[".gogoproto.jsontag"] != null)
                        message[".gogoproto.jsontag"] = String(object[".gogoproto.jsontag"]);
                    if (object[".gogoproto.moretags"] != null)
                        message[".gogoproto.moretags"] = String(object[".gogoproto.moretags"]);
                    if (object[".gogoproto.casttype"] != null)
                        message[".gogoproto.casttype"] = String(object[".gogoproto.casttype"]);
                    if (object[".gogoproto.castkey"] != null)
                        message[".gogoproto.castkey"] = String(object[".gogoproto.castkey"]);
                    if (object[".gogoproto.castvalue"] != null)
                        message[".gogoproto.castvalue"] = String(object[".gogoproto.castvalue"]);
                    if (object[".gogoproto.stdtime"] != null)
                        message[".gogoproto.stdtime"] = Boolean(object[".gogoproto.stdtime"]);
                    if (object[".gogoproto.stdduration"] != null)
                        message[".gogoproto.stdduration"] = Boolean(object[".gogoproto.stdduration"]);
                    if (object[".gogoproto.wktpointer"] != null)
                        message[".gogoproto.wktpointer"] = Boolean(object[".gogoproto.wktpointer"]);
                    if (object[".gogoproto.castrepeated"] != null)
                        message[".gogoproto.castrepeated"] = String(object[".gogoproto.castrepeated"]);
                    if (object[".cosmos_proto.accepts_interface"] != null)
                        message[".cosmos_proto.accepts_interface"] = String(object[".cosmos_proto.accepts_interface"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object[".gogoproto.nullable"] = false;
                        object[".gogoproto.embed"] = false;
                        object[".gogoproto.customtype"] = "";
                        object[".gogoproto.customname"] = "";
                        object[".gogoproto.jsontag"] = "";
                        object[".gogoproto.moretags"] = "";
                        object[".gogoproto.casttype"] = "";
                        object[".gogoproto.castkey"] = "";
                        object[".gogoproto.castvalue"] = "";
                        object[".gogoproto.stdtime"] = false;
                        object[".gogoproto.stdduration"] = false;
                        object[".gogoproto.wktpointer"] = false;
                        object[".gogoproto.castrepeated"] = "";
                        object[".cosmos_proto.accepts_interface"] = "";
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".gogoproto.nullable"] != null && message.hasOwnProperty(".gogoproto.nullable"))
                        object[".gogoproto.nullable"] = message[".gogoproto.nullable"];
                    if (message[".gogoproto.embed"] != null && message.hasOwnProperty(".gogoproto.embed"))
                        object[".gogoproto.embed"] = message[".gogoproto.embed"];
                    if (message[".gogoproto.customtype"] != null && message.hasOwnProperty(".gogoproto.customtype"))
                        object[".gogoproto.customtype"] = message[".gogoproto.customtype"];
                    if (message[".gogoproto.customname"] != null && message.hasOwnProperty(".gogoproto.customname"))
                        object[".gogoproto.customname"] = message[".gogoproto.customname"];
                    if (message[".gogoproto.jsontag"] != null && message.hasOwnProperty(".gogoproto.jsontag"))
                        object[".gogoproto.jsontag"] = message[".gogoproto.jsontag"];
                    if (message[".gogoproto.moretags"] != null && message.hasOwnProperty(".gogoproto.moretags"))
                        object[".gogoproto.moretags"] = message[".gogoproto.moretags"];
                    if (message[".gogoproto.casttype"] != null && message.hasOwnProperty(".gogoproto.casttype"))
                        object[".gogoproto.casttype"] = message[".gogoproto.casttype"];
                    if (message[".gogoproto.castkey"] != null && message.hasOwnProperty(".gogoproto.castkey"))
                        object[".gogoproto.castkey"] = message[".gogoproto.castkey"];
                    if (message[".gogoproto.castvalue"] != null && message.hasOwnProperty(".gogoproto.castvalue"))
                        object[".gogoproto.castvalue"] = message[".gogoproto.castvalue"];
                    if (message[".gogoproto.stdtime"] != null && message.hasOwnProperty(".gogoproto.stdtime"))
                        object[".gogoproto.stdtime"] = message[".gogoproto.stdtime"];
                    if (message[".gogoproto.stdduration"] != null && message.hasOwnProperty(".gogoproto.stdduration"))
                        object[".gogoproto.stdduration"] = message[".gogoproto.stdduration"];
                    if (message[".gogoproto.wktpointer"] != null && message.hasOwnProperty(".gogoproto.wktpointer"))
                        object[".gogoproto.wktpointer"] = message[".gogoproto.wktpointer"];
                    if (message[".gogoproto.castrepeated"] != null && message.hasOwnProperty(".gogoproto.castrepeated"))
                        object[".gogoproto.castrepeated"] = message[".gogoproto.castrepeated"];
                    if (message[".cosmos_proto.accepts_interface"] != null && message.hasOwnProperty(".cosmos_proto.accepts_interface"))
                        object[".cosmos_proto.accepts_interface"] = message[".cosmos_proto.accepts_interface"];
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {number}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {number}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] OneofOptions uninterpreted_option
                 */
    
                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allow_alias] EnumOptions allow_alias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumOptions uninterpreted_option
                 * @property {boolean|null} [".gogoproto.goproto_enum_prefix"] EnumOptions .gogoproto.goproto_enum_prefix
                 * @property {boolean|null} [".gogoproto.goproto_enum_stringer"] EnumOptions .gogoproto.goproto_enum_stringer
                 * @property {boolean|null} [".gogoproto.enum_stringer"] EnumOptions .gogoproto.enum_stringer
                 * @property {string|null} [".gogoproto.enum_customname"] EnumOptions .gogoproto.enum_customname
                 * @property {boolean|null} [".gogoproto.enumdecl"] EnumOptions .gogoproto.enumdecl
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allow_alias.
                 * @member {boolean} allow_alias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allow_alias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * EnumOptions .gogoproto.goproto_enum_prefix.
                 * @member {boolean} .gogoproto.goproto_enum_prefix
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype[".gogoproto.goproto_enum_prefix"] = false;
    
                /**
                 * EnumOptions .gogoproto.goproto_enum_stringer.
                 * @member {boolean} .gogoproto.goproto_enum_stringer
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype[".gogoproto.goproto_enum_stringer"] = false;
    
                /**
                 * EnumOptions .gogoproto.enum_stringer.
                 * @member {boolean} .gogoproto.enum_stringer
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype[".gogoproto.enum_stringer"] = false;
    
                /**
                 * EnumOptions .gogoproto.enum_customname.
                 * @member {string} .gogoproto.enum_customname
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype[".gogoproto.enum_customname"] = "";
    
                /**
                 * EnumOptions .gogoproto.enumdecl.
                 * @member {boolean} .gogoproto.enumdecl
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype[".gogoproto.enumdecl"] = false;
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allow_alias != null && Object.hasOwnProperty.call(message, "allow_alias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allow_alias);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".gogoproto.goproto_enum_prefix"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_prefix"))
                        writer.uint32(/* id 62001, wireType 0 =*/496008).bool(message[".gogoproto.goproto_enum_prefix"]);
                    if (message[".gogoproto.goproto_enum_stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_stringer"))
                        writer.uint32(/* id 62021, wireType 0 =*/496168).bool(message[".gogoproto.goproto_enum_stringer"]);
                    if (message[".gogoproto.enum_stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enum_stringer"))
                        writer.uint32(/* id 62022, wireType 0 =*/496176).bool(message[".gogoproto.enum_stringer"]);
                    if (message[".gogoproto.enum_customname"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enum_customname"))
                        writer.uint32(/* id 62023, wireType 2 =*/496186).string(message[".gogoproto.enum_customname"]);
                    if (message[".gogoproto.enumdecl"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enumdecl"))
                        writer.uint32(/* id 62024, wireType 0 =*/496192).bool(message[".gogoproto.enumdecl"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.allow_alias = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 62001:
                            message[".gogoproto.goproto_enum_prefix"] = reader.bool();
                            break;
                        case 62021:
                            message[".gogoproto.goproto_enum_stringer"] = reader.bool();
                            break;
                        case 62022:
                            message[".gogoproto.enum_stringer"] = reader.bool();
                            break;
                        case 62023:
                            message[".gogoproto.enum_customname"] = reader.string();
                            break;
                        case 62024:
                            message[".gogoproto.enumdecl"] = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                        if (typeof message.allow_alias !== "boolean")
                            return "allow_alias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".gogoproto.goproto_enum_prefix"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix"))
                        if (typeof message[".gogoproto.goproto_enum_prefix"] !== "boolean")
                            return ".gogoproto.goproto_enum_prefix: boolean expected";
                    if (message[".gogoproto.goproto_enum_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer"))
                        if (typeof message[".gogoproto.goproto_enum_stringer"] !== "boolean")
                            return ".gogoproto.goproto_enum_stringer: boolean expected";
                    if (message[".gogoproto.enum_stringer"] != null && message.hasOwnProperty(".gogoproto.enum_stringer"))
                        if (typeof message[".gogoproto.enum_stringer"] !== "boolean")
                            return ".gogoproto.enum_stringer: boolean expected";
                    if (message[".gogoproto.enum_customname"] != null && message.hasOwnProperty(".gogoproto.enum_customname"))
                        if (!$util.isString(message[".gogoproto.enum_customname"]))
                            return ".gogoproto.enum_customname: string expected";
                    if (message[".gogoproto.enumdecl"] != null && message.hasOwnProperty(".gogoproto.enumdecl"))
                        if (typeof message[".gogoproto.enumdecl"] !== "boolean")
                            return ".gogoproto.enumdecl: boolean expected";
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allow_alias != null)
                        message.allow_alias = Boolean(object.allow_alias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".gogoproto.goproto_enum_prefix"] != null)
                        message[".gogoproto.goproto_enum_prefix"] = Boolean(object[".gogoproto.goproto_enum_prefix"]);
                    if (object[".gogoproto.goproto_enum_stringer"] != null)
                        message[".gogoproto.goproto_enum_stringer"] = Boolean(object[".gogoproto.goproto_enum_stringer"]);
                    if (object[".gogoproto.enum_stringer"] != null)
                        message[".gogoproto.enum_stringer"] = Boolean(object[".gogoproto.enum_stringer"]);
                    if (object[".gogoproto.enum_customname"] != null)
                        message[".gogoproto.enum_customname"] = String(object[".gogoproto.enum_customname"]);
                    if (object[".gogoproto.enumdecl"] != null)
                        message[".gogoproto.enumdecl"] = Boolean(object[".gogoproto.enumdecl"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.allow_alias = false;
                        object.deprecated = false;
                        object[".gogoproto.goproto_enum_prefix"] = false;
                        object[".gogoproto.goproto_enum_stringer"] = false;
                        object[".gogoproto.enum_stringer"] = false;
                        object[".gogoproto.enum_customname"] = "";
                        object[".gogoproto.enumdecl"] = false;
                    }
                    if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                        object.allow_alias = message.allow_alias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".gogoproto.goproto_enum_prefix"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix"))
                        object[".gogoproto.goproto_enum_prefix"] = message[".gogoproto.goproto_enum_prefix"];
                    if (message[".gogoproto.goproto_enum_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer"))
                        object[".gogoproto.goproto_enum_stringer"] = message[".gogoproto.goproto_enum_stringer"];
                    if (message[".gogoproto.enum_stringer"] != null && message.hasOwnProperty(".gogoproto.enum_stringer"))
                        object[".gogoproto.enum_stringer"] = message[".gogoproto.enum_stringer"];
                    if (message[".gogoproto.enum_customname"] != null && message.hasOwnProperty(".gogoproto.enum_customname"))
                        object[".gogoproto.enum_customname"] = message[".gogoproto.enum_customname"];
                    if (message[".gogoproto.enumdecl"] != null && message.hasOwnProperty(".gogoproto.enumdecl"))
                        object[".gogoproto.enumdecl"] = message[".gogoproto.enumdecl"];
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumValueOptions uninterpreted_option
                 * @property {string|null} [".gogoproto.enumvalue_customname"] EnumValueOptions .gogoproto.enumvalue_customname
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * EnumValueOptions .gogoproto.enumvalue_customname.
                 * @member {string} .gogoproto.enumvalue_customname
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype[".gogoproto.enumvalue_customname"] = "";
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".gogoproto.enumvalue_customname"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enumvalue_customname"))
                        writer.uint32(/* id 66001, wireType 2 =*/528010).string(message[".gogoproto.enumvalue_customname"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 66001:
                            message[".gogoproto.enumvalue_customname"] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".gogoproto.enumvalue_customname"] != null && message.hasOwnProperty(".gogoproto.enumvalue_customname"))
                        if (!$util.isString(message[".gogoproto.enumvalue_customname"]))
                            return ".gogoproto.enumvalue_customname: string expected";
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".gogoproto.enumvalue_customname"] != null)
                        message[".gogoproto.enumvalue_customname"] = String(object[".gogoproto.enumvalue_customname"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".gogoproto.enumvalue_customname"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".gogoproto.enumvalue_customname"] != null && message.hasOwnProperty(".gogoproto.enumvalue_customname"))
                        object[".gogoproto.enumvalue_customname"] = message[".gogoproto.enumvalue_customname"];
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] ServiceOptions uninterpreted_option
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults)
                        object.deprecated = false;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MethodOptions uninterpreted_option
                 * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * MethodOptions .google.api.http.
                 * @member {google.api.IHttpRule|null|undefined} .google.api.http
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.http"] = null;
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                        $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 72295728:
                            message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                        var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                        if (error)
                            return ".google.api.http." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".google.api.http"] != null) {
                        if (typeof object[".google.api.http"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                        message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".google.api.http"] = null;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                        object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifier_value] UninterpretedOption identifier_value
                 * @property {Long|null} [positive_int_value] UninterpretedOption positive_int_value
                 * @property {Long|null} [negative_int_value] UninterpretedOption negative_int_value
                 * @property {number|null} [double_value] UninterpretedOption double_value
                 * @property {Uint8Array|null} [string_value] UninterpretedOption string_value
                 * @property {string|null} [aggregate_value] UninterpretedOption aggregate_value
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifier_value.
                 * @member {string} identifier_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifier_value = "";
    
                /**
                 * UninterpretedOption positive_int_value.
                 * @member {Long} positive_int_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positive_int_value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negative_int_value.
                 * @member {Long} negative_int_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negative_int_value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption double_value.
                 * @member {number} double_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.double_value = 0;
    
                /**
                 * UninterpretedOption string_value.
                 * @member {Uint8Array} string_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.string_value = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregate_value.
                 * @member {string} aggregate_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregate_value = "";
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifier_value != null && Object.hasOwnProperty.call(message, "identifier_value"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifier_value);
                    if (message.positive_int_value != null && Object.hasOwnProperty.call(message, "positive_int_value"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positive_int_value);
                    if (message.negative_int_value != null && Object.hasOwnProperty.call(message, "negative_int_value"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negative_int_value);
                    if (message.double_value != null && Object.hasOwnProperty.call(message, "double_value"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.double_value);
                    if (message.string_value != null && Object.hasOwnProperty.call(message, "string_value"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.string_value);
                    if (message.aggregate_value != null && Object.hasOwnProperty.call(message, "aggregate_value"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregate_value);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            if (!(message.name && message.name.length))
                                message.name = [];
                            message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.identifier_value = reader.string();
                            break;
                        case 4:
                            message.positive_int_value = reader.uint64();
                            break;
                        case 5:
                            message.negative_int_value = reader.int64();
                            break;
                        case 6:
                            message.double_value = reader.double();
                            break;
                        case 7:
                            message.string_value = reader.bytes();
                            break;
                        case 8:
                            message.aggregate_value = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                        if (!$util.isString(message.identifier_value))
                            return "identifier_value: string expected";
                    if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                        if (!$util.isInteger(message.positive_int_value) && !(message.positive_int_value && $util.isInteger(message.positive_int_value.low) && $util.isInteger(message.positive_int_value.high)))
                            return "positive_int_value: integer|Long expected";
                    if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                        if (!$util.isInteger(message.negative_int_value) && !(message.negative_int_value && $util.isInteger(message.negative_int_value.low) && $util.isInteger(message.negative_int_value.high)))
                            return "negative_int_value: integer|Long expected";
                    if (message.double_value != null && message.hasOwnProperty("double_value"))
                        if (typeof message.double_value !== "number")
                            return "double_value: number expected";
                    if (message.string_value != null && message.hasOwnProperty("string_value"))
                        if (!(message.string_value && typeof message.string_value.length === "number" || $util.isString(message.string_value)))
                            return "string_value: buffer expected";
                    if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                        if (!$util.isString(message.aggregate_value))
                            return "aggregate_value: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifier_value != null)
                        message.identifier_value = String(object.identifier_value);
                    if (object.positive_int_value != null)
                        if ($util.Long)
                            (message.positive_int_value = $util.Long.fromValue(object.positive_int_value)).unsigned = true;
                        else if (typeof object.positive_int_value === "string")
                            message.positive_int_value = parseInt(object.positive_int_value, 10);
                        else if (typeof object.positive_int_value === "number")
                            message.positive_int_value = object.positive_int_value;
                        else if (typeof object.positive_int_value === "object")
                            message.positive_int_value = new $util.LongBits(object.positive_int_value.low >>> 0, object.positive_int_value.high >>> 0).toNumber(true);
                    if (object.negative_int_value != null)
                        if ($util.Long)
                            (message.negative_int_value = $util.Long.fromValue(object.negative_int_value)).unsigned = false;
                        else if (typeof object.negative_int_value === "string")
                            message.negative_int_value = parseInt(object.negative_int_value, 10);
                        else if (typeof object.negative_int_value === "number")
                            message.negative_int_value = object.negative_int_value;
                        else if (typeof object.negative_int_value === "object")
                            message.negative_int_value = new $util.LongBits(object.negative_int_value.low >>> 0, object.negative_int_value.high >>> 0).toNumber();
                    if (object.double_value != null)
                        message.double_value = Number(object.double_value);
                    if (object.string_value != null)
                        if (typeof object.string_value === "string")
                            $util.base64.decode(object.string_value, message.string_value = $util.newBuffer($util.base64.length(object.string_value)), 0);
                        else if (object.string_value.length)
                            message.string_value = object.string_value;
                    if (object.aggregate_value != null)
                        message.aggregate_value = String(object.aggregate_value);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifier_value = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positive_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positive_int_value = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negative_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negative_int_value = options.longs === String ? "0" : 0;
                        object.double_value = 0;
                        if (options.bytes === String)
                            object.string_value = "";
                        else {
                            object.string_value = [];
                            if (options.bytes !== Array)
                                object.string_value = $util.newBuffer(object.string_value);
                        }
                        object.aggregate_value = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                        object.identifier_value = message.identifier_value;
                    if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                        if (typeof message.positive_int_value === "number")
                            object.positive_int_value = options.longs === String ? String(message.positive_int_value) : message.positive_int_value;
                        else
                            object.positive_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.positive_int_value) : options.longs === Number ? new $util.LongBits(message.positive_int_value.low >>> 0, message.positive_int_value.high >>> 0).toNumber(true) : message.positive_int_value;
                    if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                        if (typeof message.negative_int_value === "number")
                            object.negative_int_value = options.longs === String ? String(message.negative_int_value) : message.negative_int_value;
                        else
                            object.negative_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.negative_int_value) : options.longs === Number ? new $util.LongBits(message.negative_int_value.low >>> 0, message.negative_int_value.high >>> 0).toNumber() : message.negative_int_value;
                    if (message.double_value != null && message.hasOwnProperty("double_value"))
                        object.double_value = options.json && !isFinite(message.double_value) ? String(message.double_value) : message.double_value;
                    if (message.string_value != null && message.hasOwnProperty("string_value"))
                        object.string_value = options.bytes === String ? $util.base64.encode(message.string_value, 0, message.string_value.length) : options.bytes === Array ? Array.prototype.slice.call(message.string_value) : message.string_value;
                    if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                        object.aggregate_value = message.aggregate_value;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} name_part NamePart name_part
                     * @property {boolean} is_extension NamePart is_extension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart name_part.
                     * @member {string} name_part
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.name_part = "";
    
                    /**
                     * NamePart is_extension.
                     * @member {boolean} is_extension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.is_extension = false;
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name_part);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_extension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name_part = reader.string();
                                break;
                            case 2:
                                message.is_extension = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("name_part"))
                            throw $util.ProtocolError("missing required 'name_part'", { instance: message });
                        if (!message.hasOwnProperty("is_extension"))
                            throw $util.ProtocolError("missing required 'is_extension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.name_part))
                            return "name_part: string expected";
                        if (typeof message.is_extension !== "boolean")
                            return "is_extension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.name_part != null)
                            message.name_part = String(object.name_part);
                        if (object.is_extension != null)
                            message.is_extension = Boolean(object.is_extension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name_part = "";
                            object.is_extension = false;
                        }
                        if (message.name_part != null && message.hasOwnProperty("name_part"))
                            object.name_part = message.name_part;
                        if (message.is_extension != null && message.hasOwnProperty("is_extension"))
                            object.is_extension = message.is_extension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.location && message.location.length))
                                message.location = [];
                            message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leading_comments] Location leading_comments
                     * @property {string|null} [trailing_comments] Location trailing_comments
                     * @property {Array.<string>|null} [leading_detached_comments] Location leading_detached_comments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leading_detached_comments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leading_comments.
                     * @member {string} leading_comments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leading_comments = "";
    
                    /**
                     * Location trailing_comments.
                     * @member {string} trailing_comments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailing_comments = "";
    
                    /**
                     * Location leading_detached_comments.
                     * @member {Array.<string>} leading_detached_comments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leading_detached_comments = $util.emptyArray;
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leading_comments != null && Object.hasOwnProperty.call(message, "leading_comments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leading_comments);
                        if (message.trailing_comments != null && Object.hasOwnProperty.call(message, "trailing_comments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailing_comments);
                        if (message.leading_detached_comments != null && message.leading_detached_comments.length)
                            for (var i = 0; i < message.leading_detached_comments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leading_detached_comments[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                if (!(message.span && message.span.length))
                                    message.span = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.span.push(reader.int32());
                                } else
                                    message.span.push(reader.int32());
                                break;
                            case 3:
                                message.leading_comments = reader.string();
                                break;
                            case 4:
                                message.trailing_comments = reader.string();
                                break;
                            case 6:
                                if (!(message.leading_detached_comments && message.leading_detached_comments.length))
                                    message.leading_detached_comments = [];
                                message.leading_detached_comments.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                            if (!$util.isString(message.leading_comments))
                                return "leading_comments: string expected";
                        if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                            if (!$util.isString(message.trailing_comments))
                                return "trailing_comments: string expected";
                        if (message.leading_detached_comments != null && message.hasOwnProperty("leading_detached_comments")) {
                            if (!Array.isArray(message.leading_detached_comments))
                                return "leading_detached_comments: array expected";
                            for (var i = 0; i < message.leading_detached_comments.length; ++i)
                                if (!$util.isString(message.leading_detached_comments[i]))
                                    return "leading_detached_comments: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leading_comments != null)
                            message.leading_comments = String(object.leading_comments);
                        if (object.trailing_comments != null)
                            message.trailing_comments = String(object.trailing_comments);
                        if (object.leading_detached_comments) {
                            if (!Array.isArray(object.leading_detached_comments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leading_detached_comments: array expected");
                            message.leading_detached_comments = [];
                            for (var i = 0; i < object.leading_detached_comments.length; ++i)
                                message.leading_detached_comments[i] = String(object.leading_detached_comments[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leading_detached_comments = [];
                        }
                        if (options.defaults) {
                            object.leading_comments = "";
                            object.trailing_comments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                            object.leading_comments = message.leading_comments;
                        if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                            object.trailing_comments = message.trailing_comments;
                        if (message.leading_detached_comments && message.leading_detached_comments.length) {
                            object.leading_detached_comments = [];
                            for (var j = 0; j < message.leading_detached_comments.length; ++j)
                                object.leading_detached_comments[j] = message.leading_detached_comments[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */
    
                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.annotation && message.annotation.length))
                                message.annotation = [];
                            message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [source_file] Annotation source_file
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;
    
                    /**
                     * Annotation source_file.
                     * @member {string} source_file
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.source_file = "";
    
                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;
    
                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.source_file != null && Object.hasOwnProperty.call(message, "source_file"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.source_file);
                        if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                message.source_file = reader.string();
                                break;
                            case 3:
                                message.begin = reader.int32();
                                break;
                            case 4:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.source_file != null && message.hasOwnProperty("source_file"))
                            if (!$util.isString(message.source_file))
                                return "source_file: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.source_file != null)
                            message.source_file = String(object.source_file);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.source_file = "";
                            object.begin = 0;
                            object.end = 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.source_file != null && message.hasOwnProperty("source_file"))
                            object.source_file = message.source_file;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            protobuf.Timestamp = (function() {
    
                /**
                 * Properties of a Timestamp.
                 * @memberof google.protobuf
                 * @interface ITimestamp
                 * @property {Long|null} [seconds] Timestamp seconds
                 * @property {number|null} [nanos] Timestamp nanos
                 */
    
                /**
                 * Constructs a new Timestamp.
                 * @memberof google.protobuf
                 * @classdesc Represents a Timestamp.
                 * @implements ITimestamp
                 * @constructor
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 */
                function Timestamp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Timestamp seconds.
                 * @member {Long} seconds
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Timestamp nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.nanos = 0;
    
                /**
                 * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.seconds = reader.int64();
                            break;
                        case 2:
                            message.nanos = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Timestamp message.
                 * @function verify
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Timestamp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Timestamp} Timestamp
                 */
                Timestamp.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Timestamp)
                        return object;
                    var message = new $root.google.protobuf.Timestamp();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.Timestamp} message Timestamp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Timestamp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Timestamp to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Timestamp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Timestamp;
            })();
    
            protobuf.Any = (function() {
    
                /**
                 * Properties of an Any.
                 * @memberof google.protobuf
                 * @interface IAny
                 * @property {string|null} [type_url] Any type_url
                 * @property {Uint8Array|null} [value] Any value
                 */
    
                /**
                 * Constructs a new Any.
                 * @memberof google.protobuf
                 * @classdesc Represents an Any.
                 * @implements IAny
                 * @constructor
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 */
                function Any(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Any type_url.
                 * @member {string} type_url
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.type_url = "";
    
                /**
                 * Any value.
                 * @member {Uint8Array} value
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.value = $util.newBuffer([]);
    
                /**
                 * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type_url = reader.string();
                            break;
                        case 2:
                            message.value = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Any message.
                 * @function verify
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Any.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        if (!$util.isString(message.type_url))
                            return "type_url: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    return null;
                };
    
                /**
                 * Creates an Any message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Any} Any
                 */
                Any.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Any)
                        return object;
                    var message = new $root.google.protobuf.Any();
                    if (object.type_url != null)
                        message.type_url = String(object.type_url);
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length)
                            message.value = object.value;
                    return message;
                };
    
                /**
                 * Creates a plain object from an Any message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.Any} message Any
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Any.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type_url = "";
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                    }
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        object.type_url = message.type_url;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this Any to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Any
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Any.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Any;
            })();
    
            return protobuf;
        })();
    
        google.api = (function() {
    
            /**
             * Namespace api.
             * @memberof google
             * @namespace
             */
            var api = {};
    
            api.Http = (function() {
    
                /**
                 * Properties of a Http.
                 * @memberof google.api
                 * @interface IHttp
                 * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
                 * @property {boolean|null} [fully_decode_reserved_expansion] Http fully_decode_reserved_expansion
                 */
    
                /**
                 * Constructs a new Http.
                 * @memberof google.api
                 * @classdesc Represents a Http.
                 * @implements IHttp
                 * @constructor
                 * @param {google.api.IHttp=} [properties] Properties to set
                 */
                function Http(properties) {
                    this.rules = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Http rules.
                 * @member {Array.<google.api.IHttpRule>} rules
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.rules = $util.emptyArray;
    
                /**
                 * Http fully_decode_reserved_expansion.
                 * @member {boolean} fully_decode_reserved_expansion
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.fully_decode_reserved_expansion = false;
    
                /**
                 * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.rules != null && message.rules.length)
                        for (var i = 0; i < message.rules.length; ++i)
                            $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.fully_decode_reserved_expansion != null && Object.hasOwnProperty.call(message, "fully_decode_reserved_expansion"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fully_decode_reserved_expansion);
                    return writer;
                };
    
                /**
                 * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.rules && message.rules.length))
                                message.rules = [];
                            message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.fully_decode_reserved_expansion = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Http message.
                 * @function verify
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Http.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.rules != null && message.hasOwnProperty("rules")) {
                        if (!Array.isArray(message.rules))
                            return "rules: array expected";
                        for (var i = 0; i < message.rules.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.rules[i]);
                            if (error)
                                return "rules." + error;
                        }
                    }
                    if (message.fully_decode_reserved_expansion != null && message.hasOwnProperty("fully_decode_reserved_expansion"))
                        if (typeof message.fully_decode_reserved_expansion !== "boolean")
                            return "fully_decode_reserved_expansion: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Http message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Http} Http
                 */
                Http.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Http)
                        return object;
                    var message = new $root.google.api.Http();
                    if (object.rules) {
                        if (!Array.isArray(object.rules))
                            throw TypeError(".google.api.Http.rules: array expected");
                        message.rules = [];
                        for (var i = 0; i < object.rules.length; ++i) {
                            if (typeof object.rules[i] !== "object")
                                throw TypeError(".google.api.Http.rules: object expected");
                            message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                        }
                    }
                    if (object.fully_decode_reserved_expansion != null)
                        message.fully_decode_reserved_expansion = Boolean(object.fully_decode_reserved_expansion);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Http message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.Http} message Http
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Http.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.rules = [];
                    if (options.defaults)
                        object.fully_decode_reserved_expansion = false;
                    if (message.rules && message.rules.length) {
                        object.rules = [];
                        for (var j = 0; j < message.rules.length; ++j)
                            object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                    }
                    if (message.fully_decode_reserved_expansion != null && message.hasOwnProperty("fully_decode_reserved_expansion"))
                        object.fully_decode_reserved_expansion = message.fully_decode_reserved_expansion;
                    return object;
                };
    
                /**
                 * Converts this Http to JSON.
                 * @function toJSON
                 * @memberof google.api.Http
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Http.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Http;
            })();
    
            api.HttpRule = (function() {
    
                /**
                 * Properties of a HttpRule.
                 * @memberof google.api
                 * @interface IHttpRule
                 * @property {string|null} [selector] HttpRule selector
                 * @property {string|null} [get] HttpRule get
                 * @property {string|null} [put] HttpRule put
                 * @property {string|null} [post] HttpRule post
                 * @property {string|null} ["delete"] HttpRule delete
                 * @property {string|null} [patch] HttpRule patch
                 * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
                 * @property {string|null} [body] HttpRule body
                 * @property {string|null} [response_body] HttpRule response_body
                 * @property {Array.<google.api.IHttpRule>|null} [additional_bindings] HttpRule additional_bindings
                 */
    
                /**
                 * Constructs a new HttpRule.
                 * @memberof google.api
                 * @classdesc Represents a HttpRule.
                 * @implements IHttpRule
                 * @constructor
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 */
                function HttpRule(properties) {
                    this.additional_bindings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * HttpRule selector.
                 * @member {string} selector
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.selector = "";
    
                /**
                 * HttpRule get.
                 * @member {string|null|undefined} get
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.get = null;
    
                /**
                 * HttpRule put.
                 * @member {string|null|undefined} put
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.put = null;
    
                /**
                 * HttpRule post.
                 * @member {string|null|undefined} post
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.post = null;
    
                /**
                 * HttpRule delete.
                 * @member {string|null|undefined} delete
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype["delete"] = null;
    
                /**
                 * HttpRule patch.
                 * @member {string|null|undefined} patch
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.patch = null;
    
                /**
                 * HttpRule custom.
                 * @member {google.api.ICustomHttpPattern|null|undefined} custom
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.custom = null;
    
                /**
                 * HttpRule body.
                 * @member {string} body
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.body = "";
    
                /**
                 * HttpRule response_body.
                 * @member {string} response_body
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.response_body = "";
    
                /**
                 * HttpRule additional_bindings.
                 * @member {Array.<google.api.IHttpRule>} additional_bindings
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.additional_bindings = $util.emptyArray;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * HttpRule pattern.
                 * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                Object.defineProperty(HttpRule.prototype, "pattern", {
                    get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                    if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                    if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                    if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                    if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                    if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                    if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                        $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.additional_bindings != null && message.additional_bindings.length)
                        for (var i = 0; i < message.additional_bindings.length; ++i)
                            $root.google.api.HttpRule.encode(message.additional_bindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.response_body != null && Object.hasOwnProperty.call(message, "response_body"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.response_body);
                    return writer;
                };
    
                /**
                 * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.selector = reader.string();
                            break;
                        case 2:
                            message.get = reader.string();
                            break;
                        case 3:
                            message.put = reader.string();
                            break;
                        case 4:
                            message.post = reader.string();
                            break;
                        case 5:
                            message["delete"] = reader.string();
                            break;
                        case 6:
                            message.patch = reader.string();
                            break;
                        case 8:
                            message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.body = reader.string();
                            break;
                        case 12:
                            message.response_body = reader.string();
                            break;
                        case 11:
                            if (!(message.additional_bindings && message.additional_bindings.length))
                                message.additional_bindings = [];
                            message.additional_bindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a HttpRule message.
                 * @function verify
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HttpRule.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.get != null && message.hasOwnProperty("get")) {
                        properties.pattern = 1;
                        if (!$util.isString(message.get))
                            return "get: string expected";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.put))
                            return "put: string expected";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.post))
                            return "post: string expected";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message["delete"]))
                            return "delete: string expected";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.patch))
                            return "patch: string expected";
                    }
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        {
                            var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                            if (error)
                                return "custom." + error;
                        }
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        if (!$util.isString(message.body))
                            return "body: string expected";
                    if (message.response_body != null && message.hasOwnProperty("response_body"))
                        if (!$util.isString(message.response_body))
                            return "response_body: string expected";
                    if (message.additional_bindings != null && message.hasOwnProperty("additional_bindings")) {
                        if (!Array.isArray(message.additional_bindings))
                            return "additional_bindings: array expected";
                        for (var i = 0; i < message.additional_bindings.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.additional_bindings[i]);
                            if (error)
                                return "additional_bindings." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.HttpRule} HttpRule
                 */
                HttpRule.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.HttpRule)
                        return object;
                    var message = new $root.google.api.HttpRule();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.get != null)
                        message.get = String(object.get);
                    if (object.put != null)
                        message.put = String(object.put);
                    if (object.post != null)
                        message.post = String(object.post);
                    if (object["delete"] != null)
                        message["delete"] = String(object["delete"]);
                    if (object.patch != null)
                        message.patch = String(object.patch);
                    if (object.custom != null) {
                        if (typeof object.custom !== "object")
                            throw TypeError(".google.api.HttpRule.custom: object expected");
                        message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                    }
                    if (object.body != null)
                        message.body = String(object.body);
                    if (object.response_body != null)
                        message.response_body = String(object.response_body);
                    if (object.additional_bindings) {
                        if (!Array.isArray(object.additional_bindings))
                            throw TypeError(".google.api.HttpRule.additional_bindings: array expected");
                        message.additional_bindings = [];
                        for (var i = 0; i < object.additional_bindings.length; ++i) {
                            if (typeof object.additional_bindings[i] !== "object")
                                throw TypeError(".google.api.HttpRule.additional_bindings: object expected");
                            message.additional_bindings[i] = $root.google.api.HttpRule.fromObject(object.additional_bindings[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.HttpRule} message HttpRule
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HttpRule.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.additional_bindings = [];
                    if (options.defaults) {
                        object.selector = "";
                        object.body = "";
                        object.response_body = "";
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.get != null && message.hasOwnProperty("get")) {
                        object.get = message.get;
                        if (options.oneofs)
                            object.pattern = "get";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        object.put = message.put;
                        if (options.oneofs)
                            object.pattern = "put";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        object.post = message.post;
                        if (options.oneofs)
                            object.pattern = "post";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        object["delete"] = message["delete"];
                        if (options.oneofs)
                            object.pattern = "delete";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        object.patch = message.patch;
                        if (options.oneofs)
                            object.pattern = "patch";
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        object.body = message.body;
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                        if (options.oneofs)
                            object.pattern = "custom";
                    }
                    if (message.additional_bindings && message.additional_bindings.length) {
                        object.additional_bindings = [];
                        for (var j = 0; j < message.additional_bindings.length; ++j)
                            object.additional_bindings[j] = $root.google.api.HttpRule.toObject(message.additional_bindings[j], options);
                    }
                    if (message.response_body != null && message.hasOwnProperty("response_body"))
                        object.response_body = message.response_body;
                    return object;
                };
    
                /**
                 * Converts this HttpRule to JSON.
                 * @function toJSON
                 * @memberof google.api.HttpRule
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HttpRule.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return HttpRule;
            })();
    
            api.CustomHttpPattern = (function() {
    
                /**
                 * Properties of a CustomHttpPattern.
                 * @memberof google.api
                 * @interface ICustomHttpPattern
                 * @property {string|null} [kind] CustomHttpPattern kind
                 * @property {string|null} [path] CustomHttpPattern path
                 */
    
                /**
                 * Constructs a new CustomHttpPattern.
                 * @memberof google.api
                 * @classdesc Represents a CustomHttpPattern.
                 * @implements ICustomHttpPattern
                 * @constructor
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 */
                function CustomHttpPattern(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CustomHttpPattern kind.
                 * @member {string} kind
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.kind = "";
    
                /**
                 * CustomHttpPattern path.
                 * @member {string} path
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.path = "";
    
                /**
                 * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                    if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                    return writer;
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.kind = reader.string();
                            break;
                        case 2:
                            message.path = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CustomHttpPattern message.
                 * @function verify
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CustomHttpPattern.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        if (!$util.isString(message.kind))
                            return "kind: string expected";
                    if (message.path != null && message.hasOwnProperty("path"))
                        if (!$util.isString(message.path))
                            return "path: string expected";
                    return null;
                };
    
                /**
                 * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 */
                CustomHttpPattern.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CustomHttpPattern)
                        return object;
                    var message = new $root.google.api.CustomHttpPattern();
                    if (object.kind != null)
                        message.kind = String(object.kind);
                    if (object.path != null)
                        message.path = String(object.path);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.CustomHttpPattern} message CustomHttpPattern
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CustomHttpPattern.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.kind = "";
                        object.path = "";
                    }
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = message.kind;
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    return object;
                };
    
                /**
                 * Converts this CustomHttpPattern to JSON.
                 * @function toJSON
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CustomHttpPattern.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return CustomHttpPattern;
            })();
    
            return api;
        })();
    
        return google;
    })();
    
    $root.cosmos = (function() {
    
        /**
         * Namespace cosmos.
         * @exports cosmos
         * @namespace
         */
        var cosmos = {};
    
        cosmos.base = (function() {
    
            /**
             * Namespace base.
             * @memberof cosmos
             * @namespace
             */
            var base = {};
    
            base.v1beta1 = (function() {
    
                /**
                 * Namespace v1beta1.
                 * @memberof cosmos.base
                 * @namespace
                 */
                var v1beta1 = {};
    
                v1beta1.Coin = (function() {
    
                    /**
                     * Properties of a Coin.
                     * @memberof cosmos.base.v1beta1
                     * @interface ICoin
                     * @property {string|null} [denom] Coin denom
                     * @property {string|null} [amount] Coin amount
                     */
    
                    /**
                     * Constructs a new Coin.
                     * @memberof cosmos.base.v1beta1
                     * @classdesc Represents a Coin.
                     * @implements ICoin
                     * @constructor
                     * @param {cosmos.base.v1beta1.ICoin=} [properties] Properties to set
                     */
                    function Coin(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Coin denom.
                     * @member {string} denom
                     * @memberof cosmos.base.v1beta1.Coin
                     * @instance
                     */
                    Coin.prototype.denom = "";
    
                    /**
                     * Coin amount.
                     * @member {string} amount
                     * @memberof cosmos.base.v1beta1.Coin
                     * @instance
                     */
                    Coin.prototype.amount = "";
    
                    /**
                     * Encodes the specified Coin message. Does not implicitly {@link cosmos.base.v1beta1.Coin.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.v1beta1.Coin
                     * @static
                     * @param {cosmos.base.v1beta1.ICoin} message Coin message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Coin.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.amount);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Coin message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.Coin.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.base.v1beta1.Coin
                     * @static
                     * @param {cosmos.base.v1beta1.ICoin} message Coin message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Coin.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Coin message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.v1beta1.Coin
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.base.v1beta1.Coin} Coin
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Coin.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.Coin();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.denom = reader.string();
                                break;
                            case 2:
                                message.amount = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Coin message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.base.v1beta1.Coin
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.base.v1beta1.Coin} Coin
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Coin.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Coin message.
                     * @function verify
                     * @memberof cosmos.base.v1beta1.Coin
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Coin.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            if (!$util.isString(message.amount))
                                return "amount: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Coin message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.base.v1beta1.Coin
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.base.v1beta1.Coin} Coin
                     */
                    Coin.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.base.v1beta1.Coin)
                            return object;
                        var message = new $root.cosmos.base.v1beta1.Coin();
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        if (object.amount != null)
                            message.amount = String(object.amount);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Coin message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.base.v1beta1.Coin
                     * @static
                     * @param {cosmos.base.v1beta1.Coin} message Coin
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Coin.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.denom = "";
                            object.amount = "";
                        }
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = message.amount;
                        return object;
                    };
    
                    /**
                     * Converts this Coin to JSON.
                     * @function toJSON
                     * @memberof cosmos.base.v1beta1.Coin
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Coin.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Coin;
                })();
    
                v1beta1.DecCoin = (function() {
    
                    /**
                     * Properties of a DecCoin.
                     * @memberof cosmos.base.v1beta1
                     * @interface IDecCoin
                     * @property {string|null} [denom] DecCoin denom
                     * @property {string|null} [amount] DecCoin amount
                     */
    
                    /**
                     * Constructs a new DecCoin.
                     * @memberof cosmos.base.v1beta1
                     * @classdesc Represents a DecCoin.
                     * @implements IDecCoin
                     * @constructor
                     * @param {cosmos.base.v1beta1.IDecCoin=} [properties] Properties to set
                     */
                    function DecCoin(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DecCoin denom.
                     * @member {string} denom
                     * @memberof cosmos.base.v1beta1.DecCoin
                     * @instance
                     */
                    DecCoin.prototype.denom = "";
    
                    /**
                     * DecCoin amount.
                     * @member {string} amount
                     * @memberof cosmos.base.v1beta1.DecCoin
                     * @instance
                     */
                    DecCoin.prototype.amount = "";
    
                    /**
                     * Encodes the specified DecCoin message. Does not implicitly {@link cosmos.base.v1beta1.DecCoin.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.v1beta1.DecCoin
                     * @static
                     * @param {cosmos.base.v1beta1.IDecCoin} message DecCoin message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DecCoin.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.amount);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DecCoin message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.DecCoin.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.base.v1beta1.DecCoin
                     * @static
                     * @param {cosmos.base.v1beta1.IDecCoin} message DecCoin message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DecCoin.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DecCoin message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.v1beta1.DecCoin
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DecCoin.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.DecCoin();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.denom = reader.string();
                                break;
                            case 2:
                                message.amount = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DecCoin message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.base.v1beta1.DecCoin
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DecCoin.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DecCoin message.
                     * @function verify
                     * @memberof cosmos.base.v1beta1.DecCoin
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DecCoin.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            if (!$util.isString(message.amount))
                                return "amount: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DecCoin message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.base.v1beta1.DecCoin
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                     */
                    DecCoin.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.base.v1beta1.DecCoin)
                            return object;
                        var message = new $root.cosmos.base.v1beta1.DecCoin();
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        if (object.amount != null)
                            message.amount = String(object.amount);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DecCoin message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.base.v1beta1.DecCoin
                     * @static
                     * @param {cosmos.base.v1beta1.DecCoin} message DecCoin
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DecCoin.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.denom = "";
                            object.amount = "";
                        }
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = message.amount;
                        return object;
                    };
    
                    /**
                     * Converts this DecCoin to JSON.
                     * @function toJSON
                     * @memberof cosmos.base.v1beta1.DecCoin
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DecCoin.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DecCoin;
                })();
    
                v1beta1.IntProto = (function() {
    
                    /**
                     * Properties of an IntProto.
                     * @memberof cosmos.base.v1beta1
                     * @interface IIntProto
                     * @property {string|null} [int] IntProto int
                     */
    
                    /**
                     * Constructs a new IntProto.
                     * @memberof cosmos.base.v1beta1
                     * @classdesc Represents an IntProto.
                     * @implements IIntProto
                     * @constructor
                     * @param {cosmos.base.v1beta1.IIntProto=} [properties] Properties to set
                     */
                    function IntProto(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * IntProto int.
                     * @member {string} int
                     * @memberof cosmos.base.v1beta1.IntProto
                     * @instance
                     */
                    IntProto.prototype.int = "";
    
                    /**
                     * Encodes the specified IntProto message. Does not implicitly {@link cosmos.base.v1beta1.IntProto.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.v1beta1.IntProto
                     * @static
                     * @param {cosmos.base.v1beta1.IIntProto} message IntProto message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IntProto.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.int != null && Object.hasOwnProperty.call(message, "int"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.int);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified IntProto message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.IntProto.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.base.v1beta1.IntProto
                     * @static
                     * @param {cosmos.base.v1beta1.IIntProto} message IntProto message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IntProto.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an IntProto message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.v1beta1.IntProto
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.base.v1beta1.IntProto} IntProto
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IntProto.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.IntProto();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.int = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an IntProto message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.base.v1beta1.IntProto
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.base.v1beta1.IntProto} IntProto
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IntProto.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an IntProto message.
                     * @function verify
                     * @memberof cosmos.base.v1beta1.IntProto
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    IntProto.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.int != null && message.hasOwnProperty("int"))
                            if (!$util.isString(message.int))
                                return "int: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an IntProto message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.base.v1beta1.IntProto
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.base.v1beta1.IntProto} IntProto
                     */
                    IntProto.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.base.v1beta1.IntProto)
                            return object;
                        var message = new $root.cosmos.base.v1beta1.IntProto();
                        if (object.int != null)
                            message.int = String(object.int);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an IntProto message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.base.v1beta1.IntProto
                     * @static
                     * @param {cosmos.base.v1beta1.IntProto} message IntProto
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    IntProto.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.int = "";
                        if (message.int != null && message.hasOwnProperty("int"))
                            object.int = message.int;
                        return object;
                    };
    
                    /**
                     * Converts this IntProto to JSON.
                     * @function toJSON
                     * @memberof cosmos.base.v1beta1.IntProto
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    IntProto.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return IntProto;
                })();
    
                v1beta1.DecProto = (function() {
    
                    /**
                     * Properties of a DecProto.
                     * @memberof cosmos.base.v1beta1
                     * @interface IDecProto
                     * @property {string|null} [dec] DecProto dec
                     */
    
                    /**
                     * Constructs a new DecProto.
                     * @memberof cosmos.base.v1beta1
                     * @classdesc Represents a DecProto.
                     * @implements IDecProto
                     * @constructor
                     * @param {cosmos.base.v1beta1.IDecProto=} [properties] Properties to set
                     */
                    function DecProto(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DecProto dec.
                     * @member {string} dec
                     * @memberof cosmos.base.v1beta1.DecProto
                     * @instance
                     */
                    DecProto.prototype.dec = "";
    
                    /**
                     * Encodes the specified DecProto message. Does not implicitly {@link cosmos.base.v1beta1.DecProto.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.v1beta1.DecProto
                     * @static
                     * @param {cosmos.base.v1beta1.IDecProto} message DecProto message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DecProto.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.dec != null && Object.hasOwnProperty.call(message, "dec"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.dec);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DecProto message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.DecProto.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.base.v1beta1.DecProto
                     * @static
                     * @param {cosmos.base.v1beta1.IDecProto} message DecProto message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DecProto.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DecProto message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.v1beta1.DecProto
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.base.v1beta1.DecProto} DecProto
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DecProto.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.DecProto();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.dec = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DecProto message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.base.v1beta1.DecProto
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.base.v1beta1.DecProto} DecProto
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DecProto.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DecProto message.
                     * @function verify
                     * @memberof cosmos.base.v1beta1.DecProto
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DecProto.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.dec != null && message.hasOwnProperty("dec"))
                            if (!$util.isString(message.dec))
                                return "dec: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DecProto message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.base.v1beta1.DecProto
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.base.v1beta1.DecProto} DecProto
                     */
                    DecProto.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.base.v1beta1.DecProto)
                            return object;
                        var message = new $root.cosmos.base.v1beta1.DecProto();
                        if (object.dec != null)
                            message.dec = String(object.dec);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DecProto message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.base.v1beta1.DecProto
                     * @static
                     * @param {cosmos.base.v1beta1.DecProto} message DecProto
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DecProto.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.dec = "";
                        if (message.dec != null && message.hasOwnProperty("dec"))
                            object.dec = message.dec;
                        return object;
                    };
    
                    /**
                     * Converts this DecProto to JSON.
                     * @function toJSON
                     * @memberof cosmos.base.v1beta1.DecProto
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DecProto.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DecProto;
                })();
    
                return v1beta1;
            })();
    
            return base;
        })();
    
        return cosmos;
    })();
    
    $root.cosmos_proto = (function() {
    
        /**
         * Namespace cosmos_proto.
         * @exports cosmos_proto
         * @namespace
         */
        var cosmos_proto = {};
    
        return cosmos_proto;
    })();

    return $root;
});
